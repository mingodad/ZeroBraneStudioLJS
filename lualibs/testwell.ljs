//
// Copyright (C) 2012 Paul Kulchenko
// A simple testing library
// Based on lua-TestMore : <http://fperrad.github.com/lua-TestMore/>
// Copyright (c) 2009-2011 Francois Perrad
// This library is licensed under the terms of the MIT/X11 license,
// like Lua itself.
//

var m = {
  _NAME = "testwell",
  _VERSION = "0.2",
  _COPYRIGHT = "Paul Kulchenko",
  _DESCRIPTION = "Simple testing library",
};

var pairs = pairs;
var tostring = tostring;
var type = type;
var _G = _G || _ENV;

//---------------------------------------------------------

var tb = {
  curr_test = 0,
  good_test = 0,
  skip_test = 0,
};

function tb::print(...) {
  print(...);
}

function tb::note(...) {
  this->print(...);
}

function tb::diag(...) {
  var xarg = {...};
  for( k, v in pairs(xarg) ) {
    xarg[k] = tostring(v);
  }
  var msg = table.concat(xarg);
  msg = msg->gsub("\n", "\n# ");
  msg = msg->gsub("\n# \n", "\n#\n");
  msg = msg->gsub("\n# $", '');
  this->print("# " .. msg);
}

function tb::ok(test, name, more) {
  this.curr_test = this.curr_test + 1;
  this.good_test = this.good_test + (test && 1 || 0);
  this.skip_test = this.skip_test + (test == null && 1 || 0);
  name = tostring(name || '');
  var out;
  if( test == null ) {
    out = "skip ";
  } else if( test ) {
    out = "ok ";
  } else {
    out = "not ok ";
  }
  out = out .. this.curr_test;
  if( name != '' ) {
    out = out .. " - " .. name;
  }
  this->print(out);
  if( test == false ) {
    this->diag("    Failed test " .. (name && ("'" .. name .. "'") || ''));
    if( debug ) {
      var info = debug.getinfo(3);
      var file = info.short_src;
      var line = info.currentline;
      this->diag("    in " .. file .. " at line " .. line .. ".");
    }
    this->diag(more);
  }
}

function tb::done_testing(reset) {
  var c, g, s = this.curr_test, this.good_test, this.skip_test;
  if( reset ) {
    this.curr_test = 0;
    this.good_test = 0;
    this.skip_test = 0;
  }
  return c, g, s;
}

//---------------------------------------------------------

var serpent = (function() { //-- include Serpent module for serialization
var n, v = "serpent", 0.15; // (C) 2012 Paul Kulchenko; MIT License
var c, d = "Paul Kulchenko", "Serializer and pretty printer of Lua data types";
var snum = {[tostring(1/0)]='1/0 --[[math.huge]]',[tostring(-1/0)]='-1/0 --[[-math.huge]]',[tostring(0/0)]='0/0'};
var badtype = {thread = true, userdata = true};
var keyword, globals, G = {}, {}, (_G || _ENV);
for( _,k in ipairs({'and', 'break', 'do', 'else', 'elseif', 'end', 'false',
  'for', 'function', 'goto', 'if', 'in', 'local', 'nil', 'not', 'or', 'repeat',
  'return', 'then', 'true', 'until', 'while'}) ) { keyword[k] = true; }
for( k,v in pairs(G) ) { globals[v] = k; } // build func to name mapping
for( _,g in ipairs({'coroutine', 'debug', 'io', 'math', 'string', 'table', 'os'}) ) {
  for( k,v in pairs(G[g]) ) { globals[v] = g..'.'..k; } }

var function s(t, opts) {
  var name, indent, fatal = opts.name, opts.indent, opts.fatal;
  var sparse, custom, huge = opts.sparse, opts.custom, ! opts.nohuge;
  var space, maxl = (opts.compact && '' || ' '), (opts.maxlevel || math.huge);
  var comm = opts.comment && (tonumber(opts.comment) || math.huge);
  var seen, sref, syms, symn = {}, {}, {}, 0;
  var function gensym(val) { return tostring(val)->gsub("[^%w]","")->gsub("(%d%w+)",
    function(s) { if( ! syms[s] ) { symn += 1; syms[s] = symn; } return syms[s]; }); }
  var function safestr(s) { return type(s) == "number" && (huge && snum[tostring(s)] || s)
    || type(s) != "string" && tostring(s) // escape NEWLINE/010 and EOF/026
    || ("%q")->format(s)->gsub("\010","n")->gsub("\026","\\026"); }
  var function comment(s,l) { return comm && (l || 0) < comm && ' --[['..tostring(s)..']]' || ''; }
  var function globerr(s,l) { return globals[s] && globals[s]..comment(s,l) || ! fatal
    && safestr(tostring(s))..comment('err',l) || error("Can't serialize "..tostring(s)); }
  var function safename(path, name) { // generates foo.bar, foo[3], or foo['b a r']
    var n = name == null && '' || name;
    var plain = type(n) == "string" && n->match("^[%l%u_][%w_]*$") && ! keyword[n];
    var safe = plain && n || '['..safestr(n)..']';
    return (path || '')..(plain && path && '.' || '')..safe, safe; }
  var alphanumsort = type(opts.sortkeys) == 'function' && opts.sortkeys || function(o, n) {
    var maxn, to = tonumber(n) || 12, {number = 'a', string = 'b'};
    var function padnum(d) { return ("%0"..maxn.."d")->format(d); }
    table.sort(o, function(a,b) {
      return (o[a] && 0 || to[type(a)] || 'z')..(tostring(a)->gsub("%d+",padnum))
           < (o[b] && 0 || to[type(b)] || 'z')..(tostring(b)->gsub("%d+",padnum)); }); };
  var function val2str(t, name, indent, path, plainindex, level) {
    var ttype;
    ttype, level = type(t), (level || 0);
    var spath, sname = safename(path, name);
    var tag = plainindex &&
      ((type(name) == "number") && '' || name..space..'='..space) ||
      (name != null && sname..space..'='..space || '');
    if( seen[t] ) {
      table.insert(sref, spath..space..'='..space..seen[t]);
      return tag..'nil'..comment('ref', level);
    } else if( badtype[ttype] ) { return tag..globerr(t, level);
    } else if( ttype == 'function' ) {
      seen[t] = spath;
      var ok, res = pcall(string.dump, t);
      var func = ok && ((opts.nocode && "function() end" ||
        "loadstring("..safestr(res)..",'@serialized')")..comment(t, level));
      return tag..(func || globerr(t, level));
    } else if( ttype == "table" ) {
      if( level >= maxl ) { return tag..'{}'..comment('max', level); }
      seen[t] = spath;
      if( next(t) == null ) { return tag..'{}'..comment(t, level); } // table empty
      var maxn, o, out = #t, {}, {};
      for( key = 1, maxn ) { table.insert(o, key); }
      for( key in pairs(t) ) { if( ! o[key] ) { table.insert(o, key); } }
      if( opts.sortkeys ) { alphanumsort(o, opts.sortkeys); }
      for( n, key in ipairs(o) ) {
        var value, ktype, plainindex = t[key], type(key), n <= maxn && ! sparse;
        if( opts.ignore && opts.ignore[value] // skip ignored values; do nothing
        || sparse && value == null ) { // skipping nils; do nothing
        } else if( ktype == 'table' || ktype == 'function' ) {
          if( ! seen[key] && ! globals[key] ) {
            table.insert(sref, 'local '..val2str(key,gensym(key),indent)); }
          table.insert(sref, seen[t]..'['..(seen[key] || globals[key] || gensym(key))
            ..']'..space..'='..space..(seen[value] || val2str(value,null,indent)));
        } else {
          if( badtype[ktype] ) { plainindex, key = true, '['..globerr(key, level+1)..']'; }
          table.insert(out,val2str(value,key,indent,spath,plainindex,level+1));
        }
      }
      var prefix = string.rep(indent || '', level);
      var head = indent && '{\n'..prefix..indent || '{';
      var body = table.concat(out, ','..(indent && '\n'..prefix..indent || space));
      var tail = indent && "\n"..prefix..'}' || '}';
      return (custom && custom(tag,head,body,tail) || tag..head..body..tail)..comment(t, level);
    } else { return tag..safestr(t); } // handle all other types
  }
  var sepr = indent && "\n" || ";"..space;
  var body = val2str(t, name, indent); // this call also populates sref
  var tail = #sref>0 && table.concat(sref, sepr)..sepr || '';
  return ! name && body || "do local "..body..sepr..tail.."return "..name..sepr.."end";
}

var function merge(a, b) { if( b ) { for( k,v in pairs(b) ) { a[k] = v; } }; return a; }
return { _NAME = n, _COPYRIGHT = c, _DESCRIPTION = d, _VERSION = v, serialize = s,
  dump = function(a, opts) { return s(a, merge({name = '_', compact = true, sparse = true}, opts)); },
  line = function(a, opts) { return s(a, merge({sortkeys = true, comment = true}, opts)); },
  block = function(a, opts) { return s(a, merge({indent = '  ', sortkeys = true, comment = true}, opts)); } };
})(); //-- end of Serpent module

//---------------------------------------------------------

function m.ok(test, name) {
  tb->ok(test, name);
}

var parms = {comment = false};
function m.is(got, expected, name) {
  var tgot, texp = type(got), type(expected);
  var vgot, vexp = serpent.line(got, parms), serpent.line(expected, parms);
  var pass = vgot == vexp;
  if( got == null ) { pass = null; }
  tb->ok(pass, name, ! pass && 
      "         got: " .. vgot .. " (" .. tgot .. ")" ..
    "\n    expected: " .. vexp .. " (" .. texp .. ")");
}

function m.isnt(got, expected, name) {
  var tgot, texp = type(got), type(expected);
  var vgot, vexp = serpent.line(got, parms), serpent.line(expected, parms);
  var pass = vgot != vexp;
  if( got == null ) { pass = null; }
  tb->ok(pass, name, ! pass &&
      "         got: " .. vgot .. " (" .. tgot .. ")" ..
    "\n    expected: anything else");
}

function m.like(got, pattern, name) {
  if( type(pattern) != 'string' ) {
    return tb->ok(false, name, "pattern isn't a string : " .. tostring(pattern));
  }

  var pass = tostring(got)->match(pattern);
  if( got == null ) { pass = null; }
  tb->ok(pass, name, ! pass && 
      "                  '" .. tostring(got) .. "'" ..
    "\n    doesn't match '" .. pattern .. "'");
}

function m.unlike(got, pattern, name) {
  if( type(pattern) != 'string' ) {
    return tb->ok(false, name, "pattern isn't a string : " .. tostring(pattern));
  }

  var pass = ! tostring(got)->match(pattern);
  if( got == null ) { pass = null; }
  tb->ok(pass, name, ! pass && 
      "                  '" .. tostring(got) .. "'" ..
    "\n          matches '" .. pattern .. "'");
}

var cmp = {
    ['<']  = function (a, b) { return a <  b; },
    ['<='] = function (a, b) { return a <= b; },
    ['>']  = function (a, b) { return a >  b; },
    ['>='] = function (a, b) { return a >= b; },
    ['=='] = function (a, b) { return a == b; },
    ['~='] = function (a, b) { return a != b; },
};

function m.cmp_ok(this, op, that, name) {
  var f = cmp[op];
  if( ! f ) {
    return tb->ok(false, name, "unknown operator : " .. tostring(op));
  }

  var pass = f(this, that);
  if( this == null ) { pass = null; }
  tb->ok(pass, name, ! pass && 
      "    " .. tostring(this) ..
    "\n        " .. op ..
    "\n    " .. tostring(that));
}

function m.type_ok(val, t, name) {
  if( type(t) != 'string' ) {
    return tb->ok(false, name, "type isn't a string : " .. tostring(t));
  }

  if( type(val) == t ) {
    tb->ok(true, name);
  } else {
    tb->ok(false, name,
      "    " .. tostring(val) .. " isn't a '" .. t .."', it's a '" .. type(val) .. "'");
  }
}

function m.diag(...) {
  tb->diag(...);
}

function m.report() {
  var total, good, skipped = tb->done_testing(true);
  if( total == 0 ) { return; }
  var failed = total - good - skipped;
  var sum = ("(%d/%d/%d).")->format(good, skipped, total);
  var num, msg = 0, "";
  if( good > 0 ) {
    num, msg = good, msg .. "passed " .. good;
  }
  if( failed > 0 ) {
    num, msg = failed, msg .. (#msg > 0 && (skipped > 0 && ", " || " and ") || "")
      .. "failed " .. failed;
  }
  if( skipped > 0 ) { 
    num, msg = skipped, msg .. (#msg > 0 && ((good > 0 && failed > 0 && ',' || '') .." and ") || "")
      .. "skipped " .. skipped;
  }
  msg = ("Looks like you %s test%s of %d %s")->format(msg, (num > 1 && 's' || ''), total, sum);
  if( skipped == total ) { msg = "Looks like you skipped all tests " .. sum; }
  if( good == total ) { msg = "All tests passed " .. sum; }
  tb->note(("1..%d # %s")->format(total, msg));
}

function m.ismain() {
  for( l = 3, 64 ) { // only check up to 64 level; no more needed
    var info = debug.getinfo(l);
    if( ! info ) { return true; }
    if( info.func == require ) { return false; }
  }
  return true;
}

// this is needed to call report() when the test object is destroyed
if( _VERSION >= "Lua 5.2" ) {
  setmetatable(m, {__gc = m.report});
} else {
  // keep sentinel alive until 'm' is garbage collected
  m.sentinel = newproxy(true);
  getmetatable(m.sentinel).__gc = m.report;
}

for( k, v in pairs(m) ) { // injection
  _G[k] = v;
}

return m;
