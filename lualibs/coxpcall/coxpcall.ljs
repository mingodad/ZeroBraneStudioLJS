//-----------------------------------------------------------------------------
// Coroutine safe xpcall and pcall versions
//
// Encapsulates the protected calls with a coroutine based loop, so errors can
// be dealed without the usual Lua 5.x pcall/xpcall issues with coroutines
// yielding inside the call to pcall or xpcall.
//
// Authors: Roberto Ierusalimschy and Andre Carregal
// Contributors: Thomas Harning Jr., Ignacio Burgueño, Fabio Mascarenhas
//
// Copyright 2005 - Kepler Project (www.keplerproject.org)
//
// $Id: coxpcall.lua,v 1.13 2008/05/19 19:20:02 mascarenhas Exp $
//-----------------------------------------------------------------------------

// Lua 5.2 makes this module a no-op
if( _VERSION == "Lua 5.2" ) {
  copcall = pcall;
  coxpcall = xpcall;
  return { pcall = pcall, xpcall = xpcall };
}

//-----------------------------------------------------------------------------
// Implements xpcall with coroutines
//-----------------------------------------------------------------------------
var performResume, handleReturnValue;
var oldpcall, oldxpcall = pcall, xpcall;
var pack = table.pack || function(...) { return {n = select("#", ...), ...}; };
var unpack = table.unpack || unpack;
  
function handleReturnValue(err, co, status, ...) {
    if( ! status ) {
        return false, err(debug.traceback(co, (...)), ...);
    }
    if( coroutine.status(co) == 'suspended' ) {
        return performResume(err, co, coroutine.yield(...));
    } else {
        return true, ...;
    }
}

function performResume(err, co, ...) {
    return handleReturnValue(err, co, coroutine.resume(co, ...));
}

function coxpcall(f, err, ...) {
    var res, co = oldpcall(coroutine.create, f);
    if( ! res ) {
        var params = pack(...);
        var newf = function() { return f(unpack(params, 1, params.n)); };
        co = coroutine.create(newf);
    }
    return performResume(err, co, ...);
}

//-----------------------------------------------------------------------------
// Implements pcall with coroutines
//-----------------------------------------------------------------------------

var function id(trace, ...) {
  return ...;
}

function copcall(f, ...) {
    return coxpcall(f, id, ...);
}

return { pcall = copcall, xpcall = coxpcall };
