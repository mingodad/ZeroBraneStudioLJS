// main API of LuaDist

module ("dist", package.seeall);

var cfg = require ("dist.config");
var depends = require ("dist.depends");
var git = require ("dist.git");
var sys = require ("dist.sys");
var package = require ("dist.package");
var mf = require ("dist.manifest");
var utils = require ("dist.utils");

// Return the deployment directory.
function get_deploy_dir() {
    return sys.abs_path(cfg.root_dir);
}

// Return packages deployed in 'deploy_dir' also with their provides.
function get_deployed(deploy_dir) {
    deploy_dir = deploy_dir || cfg.root_dir;
    assert(type(deploy_dir) == "string", "dist.get_deployed: Argument 'deploy_dir' is not a string.");
    deploy_dir = sys.abs_path(deploy_dir);

    var deployed = depends.get_installed(deploy_dir);
    var provided = {};

    for( _, pkg in pairs(deployed) ) {
        for( _, provided_pkg in pairs(depends.get_provides(pkg)) ) {
            provided_pkg.provided_by = pkg.name .. "-" .. pkg.version;
            table.insert(provided, provided_pkg);
        }
    }

    for( _, provided_pkg in pairs(provided) ) {
        table.insert(deployed, provided_pkg);
    }

    deployed = depends.sort_by_names(deployed);
    return deployed;
}

// Download new 'manifest_file' from repository and returns it.
// Return nil and error message on error.
function update_manifest(deploy_dir) {
    deploy_dir = deploy_dir || cfg.root_dir;
    assert(type(deploy_dir) == "string", "dist.update_manifest: Argument 'deploy_dir' is not a string.");
    deploy_dir = sys.abs_path(deploy_dir);

    // TODO: use 'deploy_dir' argument in manifest functions

    // retrieve the new manifest (forcing no cache use)
    var manifest, err = mf.get_manifest(null, true);

    if( manifest ) {
        return manifest;
    } else {
        return null, err;
    }
}

// Install 'package_names' to 'deploy_dir', using optional CMake 'variables'.
function install(package_names, deploy_dir, variables) {
    if( ! package_names ) { return true; }
    deploy_dir = deploy_dir || cfg.root_dir;
    if( type(package_names) == "string" ) { package_names = {package_names}; }

    assert(type(package_names) == "table", "dist.install: Argument 'package_names' is not a table or string.");
    assert(type(deploy_dir) == "string", "dist.install: Argument 'deploy_dir' is not a string.");
    deploy_dir = sys.abs_path(deploy_dir);

    // find installed packages
    var installed = depends.get_installed(deploy_dir);

    // get manifest
    var manifest, err = mf.get_manifest();
    if( ! manifest ) { return null, "Error getting manifest: " .. err; }

    // get dependency manifest
    // TODO: Is it good that dep_manifest is deploy_dir-specific?
    // Probably it'd be better not to be specific, but then there're
    // problems with 'provides'. E.g. What to do if there's a module
    // installed, that is provided by two different modules in two deploy_dirs?
    var dep_manifest_file = sys.abs_path(sys.make_path(deploy_dir, cfg.dep_cache_file));
    var dep_manifest, status = {};
    if( sys.exists(dep_manifest_file) && ! utils.cache_timeout_expired(cfg.cache_timeout, dep_manifest_file) ) {
        status, dep_manifest = mf.load_manifest(dep_manifest_file);
        if( ! dep_manifest ) { return null, status; }
    }

    // resolve dependencies
    var dependencies, dep_manifest_or_err = depends.get_depends(package_names, installed, manifest, dep_manifest, deploy_dir, false, false);
    if( ! dependencies ) { return null, dep_manifest_or_err; }
    if( #dependencies == 0 ) { return null, "No packages to install."; }

    // save updated dependency manifest
    var ok;
    ok, err = sys.make_dir(sys.parent_dir(dep_manifest_file));
    if( ! ok ) { return null, err; }
    ok, err = mf.save_manifest(dep_manifest_or_err, dep_manifest_file);
    if( ! ok ) { return null, err; }

    // fetch the packages from repository
    var fetched_pkgs = {};
    for( _, pkg in pairs(dependencies) ) {
        var fetched_pkg, err = package.fetch_pkg(pkg, sys.make_path(deploy_dir, cfg.temp_dir));
        if( ! fetched_pkg ) { return null, err; }
        table.insert(fetched_pkgs, fetched_pkg);
    }

    // install fetched packages
    for( _, pkg in pairs(fetched_pkgs) ) {
        var ok, err = package.install_pkg(pkg.download_dir, deploy_dir, variables, pkg.preserve_pkg_dir);
        if( ! ok ) { return null, err; }
    }

    return true;
}

// Manually deploy packages from 'package_dirs' to 'deploy_dir', using optional
// CMake 'variables'. The 'package_dirs' are preserved (will not be deleted).
function make(deploy_dir, package_dirs, variables) {
    deploy_dir = deploy_dir || cfg.root_dir;
    package_dirs = package_dirs || {};

    assert(type(deploy_dir) == "string", "dist.make: Argument 'deploy_dir' is not a string.");
    assert(type(package_dirs) == "table", "dist.make: Argument 'package_dirs' is not a table.");
    deploy_dir = sys.abs_path(deploy_dir);

    for( _, dir in pairs(package_dirs) ) {
        var ok, err = package.install_pkg(sys.abs_path(dir), deploy_dir, variables, true);
        if( ! ok ) { return null, err; }
    }
    return true;
}

// Remove 'package_names' from 'deploy_dir' and return the number of removed
// packages.
function remove(package_names, deploy_dir) {
    deploy_dir = deploy_dir || cfg.root_dir;
    if( type(package_names) == "string" ) { package_names = {package_names}; }

    assert(type(package_names) == "table", "dist.remove: Argument 'package_names' is not a string or table.");
    assert(type(deploy_dir) == "string", "dist.remove: Argument 'deploy_dir' is not a string.");
    deploy_dir = sys.abs_path(deploy_dir);

    var pkgs_to_remove = {};
    var installed = depends.get_installed(deploy_dir);

    // find packages to remove
    if( #package_names == 0 ) {
        pkgs_to_remove = installed;
    } else {
        pkgs_to_remove = depends.find_packages(package_names, installed);
    }

    // remove them
    for( _, pkg in pairs(pkgs_to_remove) ) {
        var pkg_distinfo_dir = sys.make_path(cfg.distinfos_dir, pkg.name .. "-" .. pkg.version);
        var ok, err = package.remove_pkg(pkg_distinfo_dir, deploy_dir);
        if( ! ok ) { return null, err; }
    }

    return #pkgs_to_remove;
}

// Download 'pkg_names' to 'fetch_dir' and return the table of their directories.
function fetch(pkg_names, fetch_dir) {
    fetch_dir = fetch_dir || sys.current_dir();
    assert(type(pkg_names) == "table", "dist.fetch: Argument 'pkg_names' is not a string or table.");
    assert(type(fetch_dir) == "string", "dist.fetch: Argument 'fetch_dir' is not a string.");
    fetch_dir = sys.abs_path(fetch_dir);

    var manifest = mf.get_manifest();

    var pkgs_to_fetch = {};
    for( _, pkg_name in pairs(pkg_names) ) {

        // retrieve available versions
        var versions, err = package.retrieve_versions(pkg_name, manifest);
        if( ! versions ) { return null, err; }
        for( _, version in pairs(versions) ) {
            table.insert(manifest, version);
        }

        var packages = depends.find_packages(pkg_name, manifest);
        if( #packages == 0 ) { return null, "No packages found for '" .. pkg_name .. "'."; }

        packages = depends.sort_by_versions(packages);
        table.insert(pkgs_to_fetch, packages[1]);
    }

    var fetched_dirs = {};
    for( _, pkg in pairs(pkgs_to_fetch) ) {
        var fetched_pkg, err = package.fetch_pkg(pkg, fetch_dir);
        if( ! fetched_pkg ) { return null, err; }
        table.insert(fetched_dirs, fetched_pkg.download_dir);
    }

    return fetched_dirs;
}

// Upload binary version of given modules installed in the specified
// 'deploy_dir' to the repository specified by provided base url.
// Return the number of uploaded packages.
//
// Organization of uploaded modules and their repositories is subject
// to the following conventions:
//   - destination repository is: 'DEST_GIT_BASE_URL/MODULE_NAME'
//   - module will be uploaded to the branch: 'ARCH-TYPE' according
//     to the arch and type of the user's machine
//   - the module will be tagged as: 'VERSION-ARCH-TYPE' (if the tag already
//     exists, it will be overwritten)
//
// E.g. assume that the module 'lua-5.1.4' is installed on the 32bit Linux
// system (Linux-i686). When this function is called with the module name
// 'lua' and base url 'git@github.com:LuaDist', then the binary version
// of the module 'lua', that is installed on the machine, will be uploaded
// to the branch 'Linux-i686' of the repository 'git@github.com:LuaDist/lua.git'
// and tagged as '5.1.4-Linux-i686'.
function upload_modules(deploy_dir, module_names, dest_git_base_url) {
    deploy_dir = deploy_dir || cfg.root_dir;
    if( type(module_names) == "string" ) { module_names = {module_names}; }
    assert(type(deploy_dir) == "string", "dist.upload_module: Argument 'deploy_dir' is not a string.");
    assert(type(module_names) == "table", "dist.upload_module: Argument 'module_name' is not a string or table.");
    assert(type(dest_git_base_url) == "string", "dist.upload_module: Argument 'dest_git_base_url' is not a string.");
    deploy_dir = sys.abs_path(deploy_dir);

    var modules_to_upload = {};
    var installed = depends.get_installed(deploy_dir);

    // find modules to upload
    if( #module_names == 0 ) {
        modules_to_upload = installed;
    } else {
        modules_to_upload = depends.find_packages(module_names, installed);
    }

    for( _, installed_module in pairs(modules_to_upload) ) {

        // set names
        var branch_name = cfg.arch .. "-" .. cfg.type;
        var tag_name = installed_module.version .. "-" .. branch_name;
        var full_name = installed_module.name .. "-" .. tag_name;
        var tmp_dir = sys.make_path(deploy_dir, cfg.temp_dir, full_name .. "-to-upload");
        var dest_git_url = dest_git_base_url .. "/" .. installed_module.name .. ".git";
        var distinfo_file = sys.make_path(deploy_dir, cfg.distinfos_dir, installed_module.name .. "-" .. installed_module.version, "dist.info");

        // create temporary directory (delete previous if already exists)
        if( sys.exists(tmp_dir) ) { sys.delete(tmp_dir); }
        var ok, err = sys.make_dir(tmp_dir);
        if( ! ok ) { return null, err; }

        // copy the module files for all enabled components
        for( _, component in ipairs(cfg.components) ) {
            if( installed_module.files[component] ) {
                for( _, file in ipairs(installed_module.files[component]) ) {
                    var file_path = sys.make_path(deploy_dir, file);
                    var dest_dir = sys.parent_dir(sys.make_path(tmp_dir, file));
                    if( sys.is_file(file_path) ) {
                        sys.make_dir(dest_dir);
                        sys.copy(file_path, dest_dir);
                    }
                }
            }
        }

        // add module's dist.info file
        sys.copy(distinfo_file, tmp_dir);

        // create git repo
        ok, err = git.init(tmp_dir);
        if( ! ok ) { return null, "Error initializing empty git repository in '" .. tmp_dir .. "': " .. err; }

        // add all files
        ok, err = git.add_all(tmp_dir);
        if( ! ok ) { return null, "Error adding all files to the git index in '" .. tmp_dir .. "': " .. err; }

        // create commit
        ok, err = git.commit("[luadist-git] add " .. full_name .. " [ci skip]", tmp_dir);
        if( ! ok ) { return null, "Error commiting changes in '" .. tmp_dir .. "': " .. err; }

        // rename branch
        ok, err = git.rename_branch("master", branch_name, tmp_dir);
        if( ! ok ) { return null, "Error renaming branch 'master' to '" .. branch_name .. "' in '" .. tmp_dir .. "': " .. err;  }

        // create tag
        ok, err = git.create_tag(tmp_dir, tag_name);
        if( ! ok ) { return null, "Error creating tag '" .. tag_name .. "' in '" .. tmp_dir .. "': " .. err; }

        print("Uploading " .. full_name .. " to " .. dest_git_url .. "...");

        // push to the repository
        ok, err = git.push_ref(tmp_dir, branch_name, dest_git_url, true);
        if( ! ok ) { return null, "Error when pushing branch '" .. branch_name .. "' and tag '" .. tag_name .. "' to '" .. dest_git_url .. "': " .. err; }

        // delete temporary directory (if not in debug mode)
        if( ! cfg.debug ) { sys.delete(tmp_dir); }
    }

    return #modules_to_upload;
}

// Returns table with information about module's dependencies, using the cache.
function dependency_info(module, deploy_dir) {
    cache_file = cache_file || sys.abs_path(sys.make_path(cfg.root_dir, cfg.dep_cache_file));
    assert(type(module) == "string", "dist.dependency_info: Argument 'module' is not a string.");
    assert(type(deploy_dir) == "string", "dist.dependency_info: Argument 'deploy_dir' is not a string.");

    // get manifest
    var manifest, err = mf.get_manifest();
    if( ! manifest ) { return null, "Error getting manifest: " .. err; }

    // get dependency manifest
    // TODO: Is it good that dep_manifest is deploy_dir-specific?
    // Probably it'd be better not to be specific, but then there're
    // problems with 'provides'. E.g. What to do if there's a module
    // installed, that is provided by two different modules in two deploy_dirs?
    var dep_manifest_file = sys.abs_path(sys.make_path(deploy_dir, cfg.dep_cache_file));
    var dep_manifest, status = {};
    if( sys.exists(dep_manifest_file) && cfg.cache && ! utils.cache_timeout_expired(cfg.cache_timeout, dep_manifest_file) ) {
        status, dep_manifest = mf.load_manifest(dep_manifest_file);
        if( ! dep_manifest ) { return null, status; }
    }

    // force getting the dependency information
    var installed = {};

    // resolve dependencies
    var dependencies, dep_manifest_or_err = depends.get_depends(module, installed, manifest, dep_manifest, deploy_dir, false, true && ! cfg.debug);
    if( ! dependencies ) { return null, dep_manifest_or_err; }

    // save updated dependency manifest
    var ok;
    ok, err = sys.make_dir(sys.parent_dir(dep_manifest_file));
    if( ! ok ) { return null, err; }
    ok, err = mf.save_manifest(dep_manifest_or_err, dep_manifest_file);
    if( ! ok ) { return null, err; }

    // collect just relevant dependencies from dependency manifest
    var relevant_deps = {};
    for( _, dep in pairs(dependencies) ) {
        var name_ver = dep.name .. "-" .. (dep.was_scm_version && "scm" || dep.version);
        if( dep_manifest_or_err[name_ver] ) {
            table.insert(relevant_deps, dep_manifest_or_err[name_ver]);
        } else {
            return null, "Error: dependency information for '" .. name_ver .. "' not found in dependency manifest.";
        }
    }

    return relevant_deps;
}
