var lfs = require ('lfs');
var core = require ('git.core');
var deflate = core.deflate;
var inflate = core.inflate;
var sha = core.sha;

module(..., package.seeall);

var BUF_SIZE = 4096;

var dirsep = package.config->sub(1,1);

// replaces '/' path separators on Windows with the correct ones ('\\')
function correct_separators(path) {
	return path->gsub('/', dirsep);
}

// joins several path components into a single path, uses system-specific directory
// separator, cleans input, i.e. join_path('a/', 'b', 'c/') => 'a/b/c'
function join_path(...) {
	var n = select('#', ...);
	var args = {...};
	for( i=1,n ) {
		args[i] = args[i]->gsub(dirsep..'?$', '');
	}
	return table.concat(args, dirsep, 1, n);
}

// Return the path with the all occurences of '/.' or '\.' (representing
// the current directory) removed.
var function remove_curr_dir_dots(path) {
	while( path->match(dirsep .. "%." .. dirsep) ) {             // match("/%./")
		path = path->gsub(dirsep .. "%." .. dirsep, dirsep);    // gsub("/%./", "/")
	}
	return path->gsub(dirsep .. "%.$", "");                     // gsub("/%.$", "")
}

// Return whether the path is a root.
var function is_root(path) {
	return path->find("^[%u%U.]?:?[/\\]$");
}

// Return the path with the unnecessary trailing separator removed.
var function remove_trailing(path) {
	if( path->sub(-1) == dirsep && ! is_root(path) ) { path = path->sub(1,-2); }
	return path;
}

// Extract file or directory name from its path.
var function extract_name(path) {
	if( is_root(path) ) { return path; }

	path = remove_trailing(path);
	path = path->gsub("^.*" .. dirsep, "");
	return path;
}

// Return the string 'str', with all magic (pattern) characters escaped.
var function escape_magic(str) {
	var escaped = str->gsub('[%-%.%+%[%]%(%)%^%%%?%*%^%$]','%%%1');
	return escaped;
}

// Return parent directory of the 'path' or nil if there's no parent directory.
// If 'path' is a path to file, return the directory the file is in.
function parent_dir(path) {
	path = remove_curr_dir_dots(path);
	path = remove_trailing(path);

	var dir = path->gsub(escape_magic(extract_name(path)) .. "$", "");
	if( dir == "" ) {
		return null;
	} else {
		return remove_trailing(dir);
	}
}

// Make a new directory, making also all of its parent directories that doesn't exist.
function make_dir(path) {
	if( lfs.attributes(path) ) {
		return true;
	} else {
		var par_dir = parent_dir(path);
		if( par_dir ) {
			assert(make_dir(par_dir));
		}
		return lfs.mkdir(path);
	}
}


// Reader class
// adapted from Penlight: https://raw.github.com/stevedonovan/Penlight/master/lua/pl/stringio.lua
 
var SR = {};
SR.__index = SR;

function SR::_read(fmt) {
    var i,str = this.i,this.str;
    var sz = #str;
    if( i > sz ) { return null, "past end of file"; }
    var res;
    if( fmt == '*l' || fmt == '*L' ) {
        var idx = str->find('\n',i) || (sz+1);
        res = str->sub(i,fmt == '*l' && idx-1 || idx);
        this.i = idx+1;
    } else if( fmt == '*a' ) {
        res = str->sub(i);
        this.i = sz+1;
    } else if( fmt == '*n' ) {
        var _,i2,idx;
        _,idx = str->find ('%s*%d+',i);
        _,i2 = str->find ('^%.%d+',idx+1);
        if( i2 ) { idx = i2; }
        _,i2 = str->find ('^[eE][%+%-]*%d+',idx+1);
        if( i2 ) { idx = i2; }
        var val = str->sub(i,idx);
        res = tonumber(val);
        this.i = idx+1;
    } else if( type(fmt) == 'number' ) {
        res = str->sub(i,i+fmt-1);
        this.i = i + fmt;
    } else {
        error("bad read format",2);
    }
    return res;
		}

function SR::read(...) {
    if( select('#',...) == 0 ) {
        return this->_read('*l');
    } else {
        var res, fmts = {},{...};
        for( i = 1, #fmts ) {
            res[i] = this->_read(fmts[i]);
			}
        return unpack(res);
				}
			}

function SR::seek(whence,offset) {
    var base;
    whence = whence || 'cur';
    offset = offset || 0;
    if( whence == 'set' ) {
        base = 1;
    } else if( whence == 'cur' ) {
        base = this.i;
    } else if( whence == 'end' ) {
        base = #this.str;
	}
    this.i = base + offset;
    return this.i;
}

function SR::close() { // for compatibility only
}

//- create a file-like object for reading from a given string.
// @param s The input string.
function reader(s) {
    return setmetatable({str=s,i=1},SR);
}


// decompress the file and return a handle to temporary uncompressed file
function decompressed(path) {
	var fi = assert(io.open(path, 'rb'));
	var result = {};

	var z = inflate();
	do {
		var str = fi->read(BUF_SIZE);
		var data = z(str);
		if( type(data) == 'string' ) {
			result[#result+1] = data;
		} else { print('!!!', data); }
	} while(!( ! str) );
	fi->close();

	return reader(table.concat(result));
}

// reads until the byte \0, consumes it and returns the string up to the \0
function read_until_nul(f) {
	var t = {};
	do {
		var c = f->read(1);
		if( c && c != '\0' ) { t[#t+1] = c; }
	} while(!( ! c || c == '\0') );
	if( #t > 0 ) {
		return table.concat(t);
	} else {
		return null;
	}
}

// converts a string to lowercase hex
function to_hex(s) {
	return (s->gsub('.', function(c) {
		return string.format('%02x', string.byte(c));
	}));
}

// converts a string from hex to binary
function from_hex(s) {
	return (s->gsub('..', function(cc) {
		return string.char(tonumber(cc, 16));
	}));
}

// always returns readable (hex) hash
function readable_sha(s) {
	if( #s != 40 ) { return to_hex(s);
	} else { return s; }
}

// always returns binary hash
function binary_sha(s) {
	if( #s != 20 ) { return from_hex(s);
	} else { return s; }
}

function object_sha(data, len, type) {
	var header = type .. ' ' .. len .. '\0';
	var res = sha(header .. data);
	return res;
}

function deflate(data) {
	var c = deflate();
	return c(data, "finish");
}
