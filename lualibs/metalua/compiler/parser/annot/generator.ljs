//------------------------------------------------------------------------------
// Copyright (c) 2006-2013 Fabien Fleutot and others.
//
// All rights reserved.
//
// This program and the accompanying materials are made available
// under the terms of the Eclipse Public License v1.0 which
// accompanies this distribution, and is available at
// http://www.eclipse.org/legal/epl-v10.html
//
// This program and the accompanying materials are also made available
// under the terms of the MIT public license which accompanies this
// distribution, and is available at http://www.lua.org/license.html
//
// Contributors:
//     Fabien Fleutot - API and implementation
//
//------------------------------------------------------------------------------

require ('checks');
var gg = require ('metalua.grammar.generator');
var M  = { };

function M.opt(mlc, primary, a_type) {
    checks('table', 'table|function', 'string');
    return gg.sequence({
        primary,
        gg.onkeyword({ "#", function() { return assert(mlc.annot[a_type]); } }),
        builder = function(x) {
            var t, annot = unpack(x);
            return annot && { tag='Annot', t, annot } || t;
        } });
}

// split a list of "foo" and "`Annot{foo, annot}" into a list of "foo"
// and a list of "annot".
// No annot list is returned if none of the elements were annotated.
function M.split(lst) {
    var x, a, some = { }, { }, false;
    for( i, p in ipairs(lst) ) {
        if( p.tag=='Annot' ) {
            some, x[i], a[i] = true, unpack(p);
        } else { x[i] = p; }
    }
    if( some ) { return x, a; } else { return lst; }
}

return M;
