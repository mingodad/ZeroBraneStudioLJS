//---------------------------------------------------------------------------
// LuaSocket helper module
// Author: Diego Nehab
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------
// Declare module and import dependencies
//---------------------------------------------------------------------------
var base = _G;
var string = require("string");
var math = require("math");
var socket = require("socket.core");

var _M = socket;

// this is needed in case this library is used when "socket.core" is loaded,
// but has an older version of luasocket that does not include `connect`.
if( ! socket.connect ) {
  socket.connect = function (address, port, laddress, lport) {
    var sock, err = socket.tcp();
    if( ! sock ) { return null, err; }
    if( laddress ) {
        var res, err = sock->bind(laddress, lport, -1);
        if( ! res ) { return null, err; }
    }
    var res;
    res, err = sock->connect(address, port);
    if( ! res ) { return null, err; }
    return sock;
  };
}

//---------------------------------------------------------------------------
// Exported auxiliar functions
//---------------------------------------------------------------------------
function _M.connect4(address, port, laddress, lport) {
    return socket.connect(address, port, laddress, lport, "inet");
}

function _M.connect6(address, port, laddress, lport) {
    return socket.connect(address, port, laddress, lport, "inet6");
}

function _M.bind(host, port, backlog) {
    if( host == "*" ) { host = "0.0.0.0"; }
    var addrinfo, err = socket.dns.getaddrinfo(host);
    if( ! addrinfo ) { return null, err; }
    var sock, res;
    err = "no info on address";
    for( i, alt in base.ipairs(addrinfo) ) {
        if( alt.family == "inet" ) {
            sock, err = socket.tcp();
        } else {
            sock, err = socket.tcp6();
        }
        if( ! sock ) { return null, err; }
        sock->setoption("reuseaddr", true);
        res, err = sock->bind(alt.addr, port);
        if( ! res ) { 
            sock->close();
        } else { 
            res, err = sock->listen(backlog);
            if( ! res ) { 
                sock->close();
            } else {
                return sock;
            }
        } 
    }
    return null, err;
}

_M.try = _M.newtry();

function _M.choose(table) {
    return function(name, opt1, opt2) {
        if( base.type(name) != "string" ) {
            name, opt1, opt2 = "default", name, opt1;
        }
        var f = table[name || "nil"];
        if( ! f ) { base.error("unknown key (".. base.tostring(name) ..")", 3);
        } else { return f(opt1, opt2); }
    };
}

//---------------------------------------------------------------------------
// Socket sources and sinks, conforming to LTN12
//---------------------------------------------------------------------------
// create namespaces inside LuaSocket namespace
var sourcet, sinkt = {}, {};
_M.sourcet = sourcet;
_M.sinkt = sinkt;

_M.BLOCKSIZE = 2048;

sinkt["close-when-done"] = function(sock) {
    return base.setmetatable({
        getfd = function() { return sock->getfd(); },
        dirty = function() { return sock->dirty(); }
    }, {
        __call = function(this, chunk, err) {
            if( ! chunk ) {
                sock->close();
                return 1;
            } else { return sock->send(chunk); }
        }
    });
};

sinkt["keep-open"] = function(sock) {
    return base.setmetatable({
        getfd = function() { return sock->getfd(); },
        dirty = function() { return sock->dirty(); }
    }, {
        __call = function(this, chunk, err) {
            if( chunk ) { return sock->send(chunk);
            } else { return 1; }
        }
    });
};

sinkt["default"] = sinkt["keep-open"];

_M.sink = _M.choose(sinkt);

sourcet["by-length"] = function(sock, length) {
    return base.setmetatable({
        getfd = function() { return sock->getfd(); },
        dirty = function() { return sock->dirty(); }
    }, {
        __call = function() {
            if( length <= 0 ) { return null; }
            var size = math.min(socket.BLOCKSIZE, length);
            var chunk, err = sock->receive(size);
            if( err ) { return null, err; }
            length -=   string.len(chunk);
            return chunk;
        }
    });
};

sourcet["until-closed"] = function(sock) {
    var done;
    return base.setmetatable({
        getfd = function() { return sock->getfd(); },
        dirty = function() { return sock->dirty(); }
    }, {
        __call = function() {
            if( done ) { return null; }
            var chunk, err, partial = sock->receive(socket.BLOCKSIZE);
            if( ! err ) { return chunk;
            } else if( err == "closed" ) {
                sock->close();
                done = 1;
                return partial;
            } else { return null, err; }
        }
    });
};


sourcet["default"] = sourcet["until-closed"];

_M.source = _M.choose(sourcet);

return _M;
