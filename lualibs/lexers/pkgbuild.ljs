// Copyright 2006-2013 gwash. See LICENSE.
// Archlinux PKGBUILD LPeg lexer.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'pkgbuild'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var comment = token(l.COMMENT, '#' * l.nonnewline**0);

// Strings.
var sq_str = l.delimited_range("'", false, true);
var dq_str = l.delimited_range('"');
var ex_str = l.delimited_range('`');
var heredoc = '<<' * P(function(input, index) {
  var s, e, _, delimiter =
    input->find('(["\']?)([%a_][%w_]*)%1[\n\r\f;]+', index);
  if( s == index && delimiter ) {
    var _, e = input->find('[\n\r\f]+'..delimiter, e);
    return e && e + 1 || #input + 1;
  }
});
var string = token(l.STRING, sq_str + dq_str + ex_str + heredoc);

// Numbers.
var number = token(l.NUMBER, l.float + l.integer);

// Keywords.
var keyword = token(l.KEYWORD, word_match({
  'patch', 'cd', 'make', 'patch', 'mkdir', 'cp', 'sed', 'install', 'rm',
  'if', 'then', 'elif', 'else', 'fi', 'case', 'in', 'esac', 'while', 'for',
  'do', 'done', 'continue', 'local', 'return', 'git', 'svn', 'co', 'clone',
  'gconf-merge-schema', 'msg', 'echo', 'ln',
  // Operators.
  '-a', '-b', '-c', '-d', '-e', '-f', '-g', '-h', '-k', '-p', '-r', '-s', '-t',
  '-u', '-w', '-x', '-O', '-G', '-L', '-S', '-N', '-nt', '-ot', '-ef', '-o',
  '-z', '-n', '-eq', '-ne', '-lt', '-le', '-gt', '-ge', '-Np', '-i'
}, '-'));

// Functions.
var func = token(l.FUNCTION, word_match({'build'}));

var constant = token(l.CONSTANT, word_match({
  'pkgname', 'pkgver', 'pkgrel', 'pkgdesc', 'arch', 'url',
  'license', 'optdepends', 'depends', 'makedepends', 'provides',
  'conflicts', 'replaces', 'install', 'source', 'md5sums',
  'pkgdir', 'srcdir'
}));

// Identifiers.
var identifier = token(l.IDENTIFIER, l.word);

// Variables.
var variable = token(l.VARIABLE,
                       '$' * (S('!#?*@$') +
                       l.delimited_range('()', true, true) +
                       l.delimited_range('[]', true, true) +
                       l.delimited_range('{}', true, true) +
                       l.delimited_range('`', true, true) +
                       l.digit**1 + l.word));

// Operators.
var operator = token(l.OPERATOR, S('=!<>+-/*^~.,:;?()[]{}'));

M._rules = {
  {'whitespace', ws},
  {'comment', comment},
  {'string', string},
  {'number', number},
  {'keyword', keyword},
  {'function', func},
  {'constant', constant},
  {'identifier', identifier},
  {'variable', variable},
  {'operator', operator},
};

M._foldsymbols = {
  _patterns = {'[%(%){}]', '#'},
  [l.OPERATOR] = {['('] = 1, [')'] = -1, ['{'] = 1, ['}'] = -1},
  [l.COMMENT] = {['#'] = l.fold_line_comments('#')}
};

return M;
