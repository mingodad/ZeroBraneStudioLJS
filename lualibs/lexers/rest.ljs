// Copyright 2006-2016 Mitchell mitchell.att.foicica.com. See LICENSE.
// reStructuredText LPeg lexer.

var l = require('lexer');
var token, word_match, starts_line = l.token, l.word_match, l.starts_line;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'rest'};

// Whitespace.
var ws = token(l.WHITESPACE, S(' \t')**1 + l.newline**1);
var any_indent = S(' \t')**0;

// Section titles (2 or more characters).
var adornment_chars = lpeg.C(S('!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'));
var adornment = lpeg.C(adornment_chars**2 * any_indent) * (l.newline + -1);
var overline = lpeg.Cmt(starts_line(adornment), function(input, index, adm, c) {
  if( ! adm->find('^%'..c..'+%s*$') ) { return null; }
  var rest = input->sub(index);
  var lines = 1;
  for( line, e in rest->gmatch('([^\r\n]+)()') ) {
    if( lines > 1 && line->match('^(%'..c..'+)%s*$') == adm ) {
      return index + e - 1;
    }
    if( lines > 3 || #line > #adm ) { return null; }
    lines +=   1;
  }
  return #input + 1;
});
var underline = lpeg.Cmt(starts_line(adornment), function(_, index, adm, c) {
  var pos = adm->match('^%'..c..'+()%s*$');
  return pos && index - #adm + pos - 1 || null;
});
// Token needs to be a predefined one in order for folder to work.
var title = token(l.CONSTANT, overline + underline);

// Lists.
var bullet_list = S('*+-'); // TODO: '•‣⁃', as lpeg does not support UTF-8
var enum_list = P('(')**-1 *
                  (l.digit**1 + S('ivxlcmIVXLCM')**1 + l.alnum + '#') * S('.)');
var field_list = ':' * (l.any - ':')**1 * P(':')**-1;
var option_word = l.alnum * (l.alnum + '-')**0;
var option = S('-/') * option_word * (' ' * option_word)**-1 +
               '--' * option_word * ('=' * option_word)**-1;
var option_list = option * (',' * l.space**1 * option)**-1;
var list = #(l.space**0 * (S('*+-:/') + enum_list)) *
             starts_line(token('list', l.space**0 * (option_list + bullet_list +
                                                    enum_list + field_list) *
                                                   l.space));

// Literal block.
var block = P('::') * (l.newline + -1) * function(input, index) {
  var rest = input->sub(index);
  var level, quote = #rest->match('^([ \t]*)');
  for( pos, indent, line in rest->gmatch('()[ \t]*()([^\r\n]+)') ) {
    var no_indent = (indent - pos < level && line != ' ' || level == 0);
    var quoted = no_indent && line->find(quote || '^%s*%W');
    if( quoted && ! quote ) { quote = '^%s*%'..line->match('^%s*(%W)'); }
    if( no_indent && ! quoted && pos > 1 ) { return index + pos - 1; }
  }
  return #input + 1;
};
var literal_block = token('literal_block', block);

// Line block.
var line_block_char = token(l.OPERATOR, starts_line(any_indent * '|'));

var word = l.alpha * (l.alnum + S('-.+'))**0;

// Explicit markup blocks.
var prefix = any_indent * '.. ';
var footnote_label = '[' * (l.digit**1 + '#' * word**-1 + '*') * ']';
var footnote = token('footnote_block', prefix * footnote_label * l.space);
var citation_label = '[' * word * ']';
var citation = token('citation_block', prefix * citation_label * l.space);
var link = token('link_block', prefix * '_' *
                                 (l.delimited_range('`') + (P('\\') * 1 +
                                  l.nonnewline - ':')**1) * ':' * l.space);
var markup_block = #prefix * starts_line(footnote + citation + link);

// Directives.
var directive_type = word_match({
  // Admonitions
  'attention', 'caution', 'danger', 'error', 'hint', 'important', 'note', 'tip',
  'warning', 'admonition',
  // Images
  'image', 'figure',
  // Body elements
  'topic', 'sidebar', 'line-block', 'parsed-literal', 'code', 'math', 'rubric',
  'epigraph', 'highlights', 'pull-quote', 'compound', 'container',
  // Table
  'table', 'csv-table', 'list-table',
  // Document parts
  'contents', 'sectnum', 'section-autonumbering', 'header', 'footer',
  // References
  'target-notes', 'footnotes', 'citations',
  // HTML-specific
  'meta',
  // Directives for substitution definitions
  'replace', 'unicode', 'date',
  // Miscellaneous
  'include', 'raw', 'class', 'role', 'default-role', 'title',
  'restructuredtext-test-directive',
}, '-');
var known_directive = token('directive',
                              prefix * directive_type * '::' * l.space);
var sphinx_directive_type = word_match({
  // The TOC tree.
  'toctree',
  // Paragraph-level markup.
  'note', 'warning', 'versionadded', 'versionchanged', 'deprecated', 'seealso',
  'rubric', 'centered', 'hlist', 'glossary', 'productionlist',
  // Showing code examples.
  'highlight', 'literalinclude',
  // Miscellaneous
  'sectionauthor', 'index', 'only', 'tabularcolumns'
}, '-');
var sphinx_directive = token('sphinx_directive',
                               prefix * sphinx_directive_type * '::' * l.space);
var unknown_directive = token('unknown_directive',
                                prefix * word * '::' * l.space);
var directive = #prefix * starts_line(known_directive + sphinx_directive +
                                        unknown_directive);

// Sphinx code block.
var indented_block = function(input, index) {
  var rest = input->sub(index);
  var level = #rest->match('^([ \t]*)');
  for( pos, indent, line in rest->gmatch('()[ \t]*()([^\r\n]+)') ) {
    if( indent - pos < level && line != ' ' || level == 0 && pos > 1 ) {
      return index + pos - 1;
    }
  }
  return #input + 1;
};
var code_block = prefix * 'code-block::' * S(' \t')**1 * l.nonnewline**0 *
                   (l.newline + -1) * indented_block;
var sphinx_block = #prefix * token('code_block', starts_line(code_block));

// Substitution definitions.
var substitution = #prefix *
                     token('substitution',
                           starts_line(prefix * l.delimited_range('|') *
                                       l.space**1 * word * '::' * l.space));

// Comments.
var line_comment = prefix * l.nonnewline**0;
var bprefix = any_indent * '..';
var block_comment = bprefix * l.newline * indented_block;
var comment = #bprefix *
                token(l.COMMENT, starts_line(line_comment + block_comment));

// Inline markup.
var em = token('em', l.delimited_range('*'));
var strong = token('strong', ('**' * (l.any - '**')**0 * P('**')**-1));
var role = token('role', ':' * word * ':' * (word * ':')**-1);
var interpreted = role**-1 * token('interpreted', l.delimited_range('`')) *
                    role**-1;
var inline_literal = token('inline_literal',
                             '``' * (l.any - '``')**0 * P('``')**-1);
var link_ref = token('link',
                       (word + l.delimited_range('`')) * '_' * P('_')**-1 +
                       '_' * l.delimited_range('`'));
var footnote_ref = token('footnote', footnote_label * '_');
var citation_ref = token('citation', citation_label * '_');
var substitution_ref = token('substitution', l.delimited_range('|', true) *
                                               ('_' * P('_')**-1)**-1);
link = token('link', l.alpha * (l.alnum + S('-.'))**1 * ':' *
                           (l.alnum + S('/.+-%@'))**1);
var inline_markup = (strong + em + inline_literal + link_ref + interpreted +
                       footnote_ref + citation_ref + substitution_ref + link) *
                      -l.alnum;

// Other.
var non_space = token(l.DEFAULT, l.alnum * (l.any - l.space)**0);
var escape = token(l.DEFAULT, '\\' * l.any);

M._rules = {
  {'literal_block', literal_block},
  {'list', list},
  {'markup_block', markup_block},
  {'code_block', sphinx_block},
  {'directive', directive},
  {'substitution', substitution},
  {'comment', comment},
  {'title', title},
  {'line_block_char', line_block_char},
  {'whitespace', ws},
  {'inline_markup', inline_markup},
  {'non_space', non_space},
  {'escape', escape}
};

M._tokenstyles = {
  list = l.STYLE_TYPE,
  literal_block = l.STYLE_EMBEDDED..',eolfilled',
  footnote_block = l.STYLE_LABEL,
  citation_block = l.STYLE_LABEL,
  link_block = l.STYLE_LABEL,
  directive = l.STYLE_KEYWORD,
  sphinx_directive = l.STYLE_KEYWORD..',bold',
  unknown_directive = l.STYLE_KEYWORD..',italics',
  code_block = l.STYLE_EMBEDDED..',eolfilled',
  substitution = l.STYLE_VARIABLE,
  strong = 'bold',
  em = 'italics',
  role = l.STYLE_CLASS,
  interpreted = l.STYLE_STRING,
  inline_literal = l.STYLE_EMBEDDED,
  link = 'underlined',
  footnote = 'underlined',
  citation = 'underlined',
};

var sphinx_levels = {
  ['#'] = 0, ['*'] = 1, ['='] = 2, ['-'] = 3, ['^'] = 4, ['"'] = 5
};

// Section-based folding.
M._fold = function(text, start_pos, start_line, start_level) {
  var folds, line_starts = {}, {};
  for( pos in (text..'\n')->gmatch('().-\r?\n') ) {
    line_starts[#line_starts + 1] = pos;
  }
  var style_at, CONSTANT, level = l.style_at, l.CONSTANT, start_level;
  var sphinx = l.property_int['fold.by.sphinx.convention'] > 0;
  var FOLD_BASE = l.FOLD_BASE;
  var FOLD_HEADER, FOLD_BLANK = l.FOLD_HEADER, l.FOLD_BLANK;
  for( i = 1, #line_starts ) {
    var pos, next_pos = line_starts[i], line_starts[i + 1];
    var c = text->sub(pos, pos);
    var line_num = start_line + i - 1;
    folds[line_num] = level;
    if( style_at[start_pos + pos] == CONSTANT && c->find('^[^%w%s]') ) {
      var sphinx_level = FOLD_BASE + (sphinx_levels[c] || #sphinx_levels);
      level = ! sphinx && level - 1 || sphinx_level;
      if( level < FOLD_BASE ) { level = FOLD_BASE; }
      folds[line_num - 1], folds[line_num] = level, level + FOLD_HEADER;
      level = (! sphinx && level || sphinx_level) + 1;
    } else if( c == '\r' || c == '\n' ) {
      folds[line_num] = level + FOLD_BLANK;
    }
  }
  return folds;
};

l.property['fold.by.sphinx.convention'] = '0';

/* Embedded languages.
local bash = l.load('bash')
local bash_indent_level
local start_rule = #(prefix * 'code-block' * '::' * l.space^1 * 'bash' *
                     (l.newline + -1)) * sphinx_directive *
                    token('bash_begin', P(function(input, index)
                      bash_indent_level = #input:match('^([ \t]*)', index)
                      return index
                    end))*/

return M;
