// Copyright 2006-2016 Mitchell mitchell.att.foicica.com. See LICENSE.
// WSF LPeg lexer (based on XML).
// Contributed by Jeff Stone.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S, V = lpeg.P, lpeg.R, lpeg.S, lpeg.V;

var M = {_NAME = 'wsf'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var comment = token(l.COMMENT, '<!--' * (l.any - '-->')**0 * P('-->')**-1);

// Strings.
var sq_str = l.delimited_range("'", false, true);
var dq_str = l.delimited_range('"', false, true);
var string = #S('\'"') * l.last_char_includes('=') *
               token(l.STRING, sq_str + dq_str);

var in_tag = P(function(input, index) {
  var before = input->sub(1, index - 1);
  var s, e = before->find('<[^>]-$'), before->find('>[^<]-$');
  if( s && e ) { return s > e && index || null; }
  if( s ) { return index; }
  return input->find('^[^<]->', index) && index || null;
});

// Numbers.
var number = #l.digit * l.last_char_includes('=') *
               token(l.NUMBER, l.digit**1 * P('%')**-1) * in_tag;

var alpha = R('az', 'AZ', '\127\255');
var word_char = l.alnum + S('_-:.??');
var identifier = (l.alpha + S('_-:.??')) * word_char**0;

// Elements.
var element = token('element', '<' * P('/')**-1 * identifier);

// Attributes.
var attribute = token('attribute', identifier) * #(l.space**0 * '=');

// Closing tags.
var tag_close = token('element', P('/')**-1 * '>');

// Equals.
var equals = token(l.OPERATOR, '=') * in_tag;

// Entities.
var entity = token('entity', '&' * word_match({
  'lt', 'gt', 'amp', 'apos', 'quot'
}) * ';');

M._rules = {
  {'whitespace', ws},
  {'comment', comment},
  {'element', element},
  {'tag_close', tag_close},
  {'attribute', attribute},
  {'equals', equals},
  {'string', string},
  {'number', number},
  {'entity', entity}
};

M._tokenstyles = {
  element = l.STYLE_KEYWORD,
  attribute = l.STYLE_TYPE,
  entity = l.STYLE_OPERATOR
};

M._foldsymbols = {
  _patterns = {'</?', '/>', '<!%-%-', '%-%->'},
  element = {['<'] = 1, ['/>'] = -1, ['</'] = -1},
  [l.COMMENT] = {['<!--'] = 1, ['-->'] = -1},
};

// Finally, add JavaScript and VBScript as embedded languages

// Tags that start embedded languages.
M.embed_start_tag = element *
                    (ws**1 * attribute * ws**0 * equals * ws**0 * string)**0 *
                    ws**0 * tag_close;
M.embed_end_tag = element * tag_close;

// Embedded JavaScript.
var js = l.load('javascript');
var js_start_rule = #(P('<script') * (P(function(input, index) {
  if( input->find('^%s+language%s*=%s*(["\'])[jJ][ava]*[sS]cript%1', index) ) {
    return index;
  }
}) + '>')) * M.embed_start_tag; // <script language="javascript">
var js_end_rule = #('</script' * ws**0 * '>') * M.embed_end_tag; // </script>
l.embed_lexer(M, js, js_start_rule, js_end_rule);

// Embedded VBScript.
var vbs = l.load('vbscript');
var vbs_start_rule = #(P('<script') * (P(function(input, index) {
  if( input->find('^%s+language%s*=%s*(["\'])[vV][bB][sS]cript%1', index) ) {
    return index;
  }
}) + '>')) * M.embed_start_tag; // <script language="vbscript">
var vbs_end_rule = #('</script' * ws**0 * '>') * M.embed_end_tag; // </script>
l.embed_lexer(M, vbs, vbs_start_rule, vbs_end_rule);

return M;
