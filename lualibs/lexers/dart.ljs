// Dart LPeg lexer.
// Written by Brian Schott (@Hackerpilot on Github).

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'dart'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var line_comment = '//' * l.nonnewline_esc**0;
var nested_comment = l.nested_pair('/*', '*/');
var comment = token(l.COMMENT, line_comment + nested_comment);

// Strings.
var sq_str = S('r')**-1 * l.delimited_range("'", true);
var dq_str = S('r')**-1 * l.delimited_range('"', true);
var sq_str_multiline = S('r')**-1 * l.delimited_range('"""');
var dq_str_multiline = S('r')**-1 * l.delimited_range("''' ");
var string = token(l.STRING,
                     sq_str + dq_str + sq_str_multiline + dq_str_multiline);

// Numbers.
var number = token(l.NUMBER, (l.float + l.hex_num));

// Keywords.
var keyword = token(l.KEYWORD, word_match({
  'assert', 'break', 'case', 'catch', 'class', 'const', 'continue', 'default',
  'do', 'else', 'enum', 'extends', 'false', 'final' , 'finally', 'for', 'if',
  'in', 'is', 'new', 'null', 'rethrow', 'return', 'super', 'switch', 'this',
  'throw', 'true', 'try', 'var', 'void', 'while', 'with',
}));

var builtin_identifiers = token(l.CONSTANT, word_match({
  'abstract', 'as', 'dynamic', 'export', 'external', 'factory', 'get',
  'implements', 'import', 'library', 'operator', 'part', 'set', 'static',
  'typedef'
}));

// Identifiers.
var identifier = token(l.IDENTIFIER, l.word);

// Operators.
var operator = token(l.OPERATOR, S('#?=!<>+-*$/%&|^~.,;()[]{}'));

// Preprocs.
var annotation = token('annotation', '@' * l.word**1);

M._rules = {
  {'whitespace', ws},
  {'keyword', keyword},
  {'constant', builtin_identifiers},
  {'string', string},
  {'identifier', identifier},
  {'comment', comment},
  {'number', number},
  {'operator', operator},
  {'annotation', annotation},
};

M._tokenstyles = {
  annotation = l.STYLE_PREPROCESSOR,
};

M._foldsymbols = {
  _patterns = {'[{}]', '/[*+]', '[*+]/', '//'},
  [l.OPERATOR] = {['{'] = 1, ['}'] = -1},
  [l.COMMENT] = {
    ['/*'] = 1, ['*/'] = -1, ['/+'] = 1, ['+/'] = -1,
    ['//'] = l.fold_line_comments('//')
  }
};

return M;
