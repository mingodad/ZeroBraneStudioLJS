// Copyright 2015-2016 Alejandro Baez (https://keybase.io/baez). See LICENSE.
// Rust LPeg lexer.

var l = require("lexer");
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'rust'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var line_comment = '//' * l.nonnewline_esc**0;
var block_comment = '/*' * (l.any - '*/')**0 * P('*/')**-1;
var comment = token(l.COMMENT, line_comment + block_comment);

// Strings.
var sq_str = P('L')**-1 * l.delimited_range("'");
var dq_str = P('L')**-1 * l.delimited_range('"');
var raw_str =  '#"' * (l.any - '#')**0 * P('#')**-1;
var string = token(l.STRING, dq_str + raw_str);

// Numbers.
var number = token(l.NUMBER, l.float + (l.dec_num + "_")**1 +
                     "0b" * (l.dec_num + "_")**1 + l.integer);

// Keywords.
var keyword = token(l.KEYWORD, word_match({
  'abstract',   'alignof',    'as',       'become',   'box',
  'break',      'const',      'continue', 'crate',    'do',
  'else',       'enum',       'extern',   'false',    'final',
  'fn',         'for',        'if',       'impl',     'in',
  'let',        'loop',       'macro',    'match',    'mod',
  'move',       'mut',        "offsetof", 'override', 'priv',
  'proc',       'pub',        'pure',     'ref',      'return',
  'Self',       'self',       'sizeof',   'static',   'struct',
  'super',      'trait',      'true',     'type',     'typeof',
  'unsafe',     'unsized',    'use',      'virtual',  'where',
  'while',      'yield'
}));

// Library types
var library = token(l.LABEL, l.upper * (l.lower + l.dec_num)**1);

// syntax extensions
var extension = l.word**1 * S("!");

var func = token(l.FUNCTION, extension);

// Types.
var type = token(l.TYPE, word_match({
  '()', 'bool', 'isize', 'usize', 'char', 'str',
  'u8', 'u16', 'u32', 'u64', 'i8', 'i16', 'i32', 'i64',
  'f32','f64',
}));

// Identifiers.
var identifier = token(l.IDENTIFIER, l.word);

// Operators.
var operator = token(l.OPERATOR, S('+-/*%<>!=`^~@&|?#~:;,.()[]{}'));

// Attributes.
var attribute = token(l.PREPROCESSOR, "#[" *
                        (l.nonnewline - ']')**0 * P("]")**-1);

M._rules = {
  {'whitespace', ws},
  {'keyword', keyword},
  {'function', func},
  {'library', library},
  {'type', type},
  {'identifier', identifier},
  {'string', string},
  {'comment', comment},
  {'number', number},
  {'operator', operator},
  {'preprocessor', attribute},
};

M._foldsymbols = {
  _patterns = {'%l+', '[{}]', '/%*', '%*/', '//'},
  [l.COMMENT] = {['/*'] = 1, ['*/'] = -1, ['//'] = l.fold_line_comments('//')},
  [l.OPERATOR] = {['('] = 1, ['{'] = 1, [')'] = -1, ['}'] = -1}
};

return M;
