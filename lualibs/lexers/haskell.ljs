// Copyright 2006-2016 Mitchell mitchell.att.foicica.com. See LICENSE.
// Haskell LPeg lexer.
// Modified by Alex Suraci.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'haskell'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var line_comment = '--' * l.nonnewline_esc**0;
var block_comment = '{-' * (l.any - '-}')**0 * P('-}')**-1;
var comment = token(l.COMMENT, line_comment + block_comment);

// Strings.
var string = token(l.STRING, l.delimited_range('"'));

// Chars.
var char = token(l.STRING, l.delimited_range("'", true));

// Numbers.
var number = token(l.NUMBER, l.float + l.integer);

// Keywords.
var keyword = token(l.KEYWORD, word_match({
  'case', 'class', 'data', 'default', 'deriving', 'do', 'else', 'if', 'import',
  'in', 'infix', 'infixl', 'infixr', 'instance', 'let', 'module', 'newtype',
  'of', 'then', 'type', 'where', '_', 'as', 'qualified', 'hiding'
}));

// Identifiers.
var word = (l.alnum + S("._'#"))**0;
var identifier = token(l.IDENTIFIER, (l.alpha + '_') * word);

// Operators.
var op = l.punct - S('()[]{}');
var operator = token(l.OPERATOR, op);

// Types & type constructors.
var constructor = token(l.TYPE, (l.upper * word) + (P(":") * (op**1 - P(":"))));

M._rules = {
  {'whitespace', ws},
  {'keyword', keyword},
  {'type', constructor},
  {'identifier', identifier},
  {'string', string},
  {'char', char},
  {'comment', comment},
  {'number', number},
  {'operator', operator},
};

M._FOLDBYINDENTATION = true;

return M;
