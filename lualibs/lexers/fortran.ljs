// Copyright 2006-2016 Mitchell mitchell.att.foicica.com. See LICENSE.
// Fortran LPeg lexer.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'fortran'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var c_comment = l.starts_line(S('Cc')) * l.nonnewline**0;
var d_comment = l.starts_line(S('Dd')) * l.nonnewline**0;
var ex_comment = l.starts_line('!') * l.nonnewline**0;
var ast_comment = l.starts_line('*') * l.nonnewline**0;
var line_comment = '!' * l.nonnewline**0;
var comment = token(l.COMMENT, c_comment + d_comment + ex_comment +
                      ast_comment + line_comment);

// Strings.
var sq_str = l.delimited_range("'", true, true);
var dq_str = l.delimited_range('"', true, true);
var string = token(l.STRING, sq_str + dq_str);

// Numbers.
var number = token(l.NUMBER, (l.float + l.integer) * -l.alpha);

// Keywords.
var keyword = token(l.KEYWORD, word_match({
  'include', 'program', 'module', 'subroutine', 'function', 'contains', 'use',
  'call', 'return',
  // Statements.
  'case', 'select', 'default', 'continue', 'cycle', 'do', 'while', 'else', 'if',
  'elseif', 'then', 'elsewhere', 'end', 'endif', 'enddo', 'forall', 'where',
  'exit', 'goto', 'pause', 'stop',
  // Operators.
  '.not.', '.and.', '.or.', '.xor.', '.eqv.', '.neqv.', '.eq.', '.ne.', '.gt.',
  '.ge.', '.lt.', '.le.',
  // Logical.
  '.false.', '.true.'
}, '.', true));

// Functions.
var func = token(l.FUNCTION, word_match({
  // I/O.
  'backspace', 'close', 'endfile', 'inquire', 'open', 'print', 'read', 'rewind',
  'write', 'format',
  // Type conversion, utility, and math.
  'aimag', 'aint', 'amax0', 'amin0', 'anint', 'ceiling', 'cmplx', 'conjg',
  'dble', 'dcmplx', 'dfloat', 'dim', 'dprod', 'float', 'floor', 'ifix', 'imag',
  'int', 'logical', 'modulo', 'nint', 'real', 'sign', 'sngl', 'transfer',
  'zext', 'abs', 'acos', 'aimag', 'aint', 'alog', 'alog10', 'amax0', 'amax1',
  'amin0', 'amin1', 'amod', 'anint', 'asin', 'atan', 'atan2', 'cabs', 'ccos',
  'char', 'clog', 'cmplx', 'conjg', 'cos', 'cosh', 'csin', 'csqrt', 'dabs',
  'dacos', 'dasin', 'datan', 'datan2', 'dble', 'dcos', 'dcosh', 'ddim', 'dexp',
  'dim', 'dint', 'dlog', 'dlog10', 'dmax1', 'dmin1', 'dmod', 'dnint', 'dprod',
  'dreal', 'dsign', 'dsin', 'dsinh', 'dsqrt', 'dtan', 'dtanh', 'exp', 'float',
  'iabs', 'ichar', 'idim', 'idint', 'idnint', 'ifix', 'index', 'int', 'isign',
  'len', 'lge', 'lgt', 'lle', 'llt', 'log', 'log10', 'max', 'max0', 'max1',
  'min', 'min0', 'min1', 'mod', 'nint', 'real', 'sign', 'sin', 'sinh', 'sngl',
  'sqrt', 'tan', 'tanh'
}, null, true));

// Types.
var type = token(l.TYPE, word_match({
  'implicit', 'explicit', 'none', 'data', 'parameter', 'allocate',
  'allocatable', 'allocated', 'deallocate', 'integer', 'real', 'double',
  'precision', 'complex', 'logical', 'character', 'dimension', 'kind',
}, null, true));

// Identifiers.
var identifier = token(l.IDENTIFIER, l.alnum**1);

// Operators.
var operator = token(l.OPERATOR, S('<>=&+-/*,()'));

M._rules = {
  {'whitespace', ws},
  {'comment', comment},
  {'keyword', keyword},
  {'function', func},
  {'type', type},
  {'number', number},
  {'identifier', identifier},
  {'string', string},
  {'operator', operator},
};

return M;
