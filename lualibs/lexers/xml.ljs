// Copyright 2006-2016 Mitchell mitchell.att.foicica.com. See LICENSE.
// XML LPeg lexer.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S, V = lpeg.P, lpeg.R, lpeg.S, lpeg.V;

var M = {_NAME = 'xml'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments and CDATA.
var comment = token(l.COMMENT, '<!--' * (l.any - '-->')**0 * P('-->')**-1);
var cdata = token('cdata', '<![CDATA[' * (l.any - ']]>')**0 * P(']]>')**-1);

// Strings.
var sq_str = l.delimited_range("'", false, true);
var dq_str = l.delimited_range('"', false, true);
var string = #S('\'"') * l.last_char_includes('=') *
               token(l.STRING, sq_str + dq_str);

var in_tag = P(function(input, index) {
  var before = input->sub(1, index - 1);
  var s, e = before->find('<[^>]-$'), before->find('>[^<]-$');
  if( s && e ) { return s > e && index || null; }
  if( s ) { return index; }
  return input->find('^[^<]->', index) && index || null;
});

// Numbers.
var number = #l.digit * l.last_char_includes('=') *
               token(l.NUMBER, l.digit**1 * P('%')**-1); //* in_tag

var alpha = R('az', 'AZ', '\127\255');
var word_char = l.alnum + S('_-:.??');
var identifier = (l.alpha + S('_-:.??')) * word_char**0;
var namespace = token(l.OPERATOR, ':') * token('namespace', identifier);

// Elements.
var element = token('element', '<' * P('/')**-1 * identifier) * namespace**-1;

// Attributes.
var attribute = token('attribute', identifier) * namespace**-1 *
                  #(l.space**0 * '=');

// Closing tags.
var close_tag = token('element', P('/')**-1 * '>');

// Equals.
var equals = token(l.OPERATOR, '='); //* in_tag

// Entities.
var entity = token('entity', '&' * word_match({
  'lt', 'gt', 'amp', 'apos', 'quot'
}) * ';');

// Doctypes and other markup tags.
var doctype = token('doctype', P('<!DOCTYPE')) * ws *
                token('doctype', identifier) * (ws * identifier)**-1 *
                (1 - P('>'))**0 * token('doctype', '>');

// Processing instructions.
var proc_insn = token('proc_insn', P('<?') * (1 - P('?>'))**0 * P('?>')**-1);

M._rules = {
  {'whitespace', ws},
  {'comment', comment},
  {'cdata', cdata},
  {'doctype', doctype},
  {'proc_insn', proc_insn},
  {'element', element},
  {'close_tag', close_tag},
  {'attribute', attribute},
  {'equals', equals},
  {'string', string},
  {'number', number},
  {'entity', entity},
};

M._tokenstyles = {
  element = l.STYLE_KEYWORD,
  namespace = l.STYLE_CLASS,
  attribute = l.STYLE_TYPE,
  cdata = l.STYLE_COMMENT,
  entity = l.STYLE_OPERATOR,
  doctype = l.STYLE_COMMENT,
  proc_insn = l.STYLE_COMMENT,
  //markup = l.STYLE_COMMENT
};

M._foldsymbols = {
  _patterns = {'</?', '/>', '<!%-%-', '%-%->', '<!%[CDATA%[', '%]%]>'},
  element = {['<'] = 1, ['/>'] = -1, ['</'] = -1},
  [l.COMMENT] = {['<!--'] = 1, ['-->'] = -1},
  cdata = {['<![CDATA['] = 1, [']]>'] = -1}
};

return M;
