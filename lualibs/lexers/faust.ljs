// Copyright 2015-2016 David B. Lamkins <david@lamkins.net>. See LICENSE.
// Faust LPeg lexer, see http://faust.grame.fr/

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'faust'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var line_comment = '//' * l.nonnewline**0;
var block_comment = '/*' * (l.any - '*/')**0 * P('*/')**-1;
var comment = token(l.COMMENT, line_comment + block_comment);

// Strings.
var string = token(l.STRING, l.delimited_range('"', true));

// Numbers.
var int = R('09')**1;
var rad = P('.');
var exp = (P('e') * S('+-')**-1 * int)**-1;
var flt = int * (rad * int)**-1 * exp + int**-1 * rad * int * exp;
var number = token(l.NUMBER, flt + int);

// Keywords.
var keyword = token(l.KEYWORD, word_match({
  'declare', 'import', 'mdoctags', 'dependencies', 'distributed', 'inputs',
  'outputs', 'par', 'seq', 'sum', 'prod', 'xor', 'with', 'environment',
  'library', 'component', 'ffunction', 'fvariable', 'fconstant', 'int', 'float',
  'case', 'waveform', 'h:', 'v:', 't:'
}));

// Identifiers.
var identifier = token(l.IDENTIFIER, l.word);

// Operators.
var punct = S('+-/*%<>~!=^&|?~:;,.()[]{}@#$`\\\'');
var operator = token(l.OPERATOR, punct);

// Pragmas.
var mdoc = P('<mdoc>') * (l.any - P('</mdoc>'))**0 * P('</mdoc>');
var pragma = token(l.PREPROCESSOR, mdoc);

M._rules = {
  {'whitespace', ws},
  {'comment', comment},
  {'pragma', pragma},
  {'keyword', keyword},
  {'number', number},
  {'operator', operator},
  {'identifier', identifier},
  {'string', string},
};

return M;
