// Copyright 2006-2016 Mitchell mitchell.att.foicica.com. See LICENSE.
// PHP LPeg lexer.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S, V = lpeg.P, lpeg.R, lpeg.S, lpeg.V;

var M = {_NAME = 'php'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var line_comment = (P('//') + '#') * l.nonnewline**0;
var block_comment = '/*' * (l.any - '*/')**0 * P('*/')**-1;
var comment = token(l.COMMENT, block_comment + line_comment);

// Strings.
var sq_str = l.delimited_range("'");
var dq_str = l.delimited_range('"');
var bt_str = l.delimited_range('`');
var heredoc = '<<<' * P(function(input, index) {
  var _, e, delimiter = input->find('([%a_][%w_]*)[\n\r\f]+', index);
  if( delimiter ) {
    var _, e = input->find('[\n\r\f]+'..delimiter, e);
    return e && e + 1;
  }
});
var string = token(l.STRING, sq_str + dq_str + bt_str + heredoc);
// TODO: interpolated code.

// Numbers.
var number = token(l.NUMBER, l.float + l.integer);

// Keywords.
var keyword = token(l.KEYWORD, word_match({
  'and', 'array', 'as', 'bool', 'boolean', 'break', 'case',
  'cfunction', 'class', 'const', 'continue', 'declare', 'default',
  'die', 'directory', 'do', 'double', 'echo', 'else', 'elseif',
  'empty', 'enddeclare', 'endfor', 'endforeach', 'endif',
  'endswitch', 'endwhile', 'eval', 'exit', 'extends', 'false',
  'float', 'for', 'foreach', 'function', 'global', 'if', 'include',
  'include_once', 'int', 'integer', 'isset', 'list', 'new', 'null',
  'object', 'old_function', 'or', 'parent', 'print', 'real',
  'require', 'require_once', 'resource', 'return', 'static',
  'stdclass', 'string', 'switch', 'true', 'unset', 'use', 'var',
  'while', 'xor', '__class__', '__file__', '__function__',
  '__line__', '__sleep', '__wakeup'
}));

// Variables.
var word = (l.alpha + '_' + R('\127\255')) * (l.alnum + '_' + R('\127\255'))**0;
var variable = token(l.VARIABLE, '$' * word);

// Identifiers.
var identifier = token(l.IDENTIFIER, word);

// Operators.
var operator = token(l.OPERATOR, S('!@%^*&()-+=|/.,;:<>[]{}') + '?' * -P('>'));

M._rules = {
  {'whitespace', ws},
  {'keyword', keyword},
  {'identifier', identifier},
  {'string', string},
  {'variable', variable},
  {'comment', comment},
  {'number', number},
  {'operator', operator},
};

// Embedded in HTML.
var html = l.load('html');

// Embedded PHP.
var php_start_rule = token('php_tag', '<?' * ('php' * l.space)**-1);
var php_end_rule = token('php_tag', '?>');
l.embed_lexer(html, M, php_start_rule, php_end_rule);

M._tokenstyles = {
  php_tag = l.STYLE_EMBEDDED
};

var _foldsymbols = html._foldsymbols;
_foldsymbols._patterns[#_foldsymbols._patterns + 1] = '<%?';
_foldsymbols._patterns[#_foldsymbols._patterns + 1] = '%?>';
_foldsymbols._patterns[#_foldsymbols._patterns + 1] = '/%*';
_foldsymbols._patterns[#_foldsymbols._patterns + 1] = '%*/';
_foldsymbols._patterns[#_foldsymbols._patterns + 1] = '//';
_foldsymbols._patterns[#_foldsymbols._patterns + 1] = '#';
_foldsymbols._patterns[#_foldsymbols._patterns + 1] = '[{}()]';
_foldsymbols.php_tag = {['<?'] = 1, ['?>'] = -1};
_foldsymbols[l.COMMENT]['/*'], _foldsymbols[l.COMMENT]['*/'] = 1, -1;
_foldsymbols[l.COMMENT]['//'] = l.fold_line_comments('//');
_foldsymbols[l.COMMENT]['#'] = l.fold_line_comments('#');
_foldsymbols[l.OPERATOR] = {['{'] = 1, ['}'] = -1, ['('] = 1, [')'] = -1};
M._foldsymbols = _foldsymbols;

return M;
