// Copyright 2006-2016 Mitchell mitchell.att.foicica.com. See LICENSE.
// IDL LPeg lexer.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'idl'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var line_comment = '//' * l.nonnewline_esc**0;
var block_comment = '/*' * (l.any - '*/')**0 * P('*/')**-1;
var comment = token(l.COMMENT, line_comment + block_comment);

// Strings.
var sq_str = l.delimited_range("'", true);
var dq_str = l.delimited_range('"', true);
var string = token(l.STRING, sq_str + dq_str);

// Numbers.
var number = token(l.NUMBER, l.float + l.integer);

// Preprocessor.
var preproc_word = word_match({
  'define', 'undef', 'ifdef', 'ifndef', 'if', 'elif', 'else', 'endif',
  'include', 'warning', 'pragma'
});
var preproc = token(l.PREPROCESSOR,
                      l.starts_line('#') * preproc_word * l.nonnewline**0);

// Keywords.
var keyword = token(l.KEYWORD, word_match({
  'abstract', 'attribute', 'case', 'const', 'context', 'custom', 'default',
  'exception', 'enum', 'factory', 'FALSE', 'in', 'inout', 'interface', 'local',
  'module', 'native', 'oneway', 'out', 'private', 'public', 'raises',
  'readonly', 'struct', 'support', 'switch', 'TRUE', 'truncatable', 'typedef',
  'union', 'valuetype'
}));

// Types.
var type = token(l.TYPE, word_match({
  'any', 'boolean', 'char', 'double', 'fixed', 'float', 'long', 'Object',
  'octet', 'sequence', 'short', 'string', 'unsigned', 'ValueBase', 'void',
  'wchar', 'wstring'
}));

// Identifiers.
var identifier = token(l.IDENTIFIER, l.word);

// Operators.
var operator = token(l.OPERATOR, S('!<>=+-/*%&|^~.,:;?()[]{}'));

M._rules = {
  {'whitespace', ws},
  {'keyword', keyword},
  {'type', type},
  {'identifier', identifier},
  {'string', string},
  {'comment', comment},
  {'number', number},
  {'preprocessor', preproc},
  {'operator', operator},
};

return M;
