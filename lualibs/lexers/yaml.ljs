// Copyright 2006-2016 Mitchell mitchell.att.foicica.com. See LICENSE.
// YAML LPeg lexer.
// It does not keep track of indentation perfectly.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'yaml'};

// Whitespace.
var indent = #l.starts_line(S(' \t')) *
               (token(l.WHITESPACE, ' ') + token('indent_error', '\t'))**1;
var ws = token(l.WHITESPACE, S(' \t')**1 + l.newline**1);

// Comments.
var comment = token(l.COMMENT, '#' * l.nonnewline**0);

// Strings.
var string = token(l.STRING, l.delimited_range("'") + l.delimited_range('"'));

// Numbers.
var integer = l.dec_num + l.hex_num + '0' * S('oO') * R('07')**1;
var special_num = '.' * word_match({'inf', 'nan'}, null, true);
var number = token(l.NUMBER, special_num + l.float + integer);

// Timestamps.
var ts = token('timestamp', l.digit * l.digit * l.digit * l.digit * // year
                              '-' * l.digit * l.digit**-1 * // month
                              '-' * l.digit * l.digit**-1 * // day
                              ((S(' \t')**1 + S('tT'))**-1 * // separator
                               l.digit * l.digit**-1 * // hour
                               ':' * l.digit * l.digit * // minute
                               ':' * l.digit * l.digit * // second
                               ('.' * l.digit**0)**-1 * // fraction
                               ('Z' + // timezone
                                S(' \t')**0 * S('-+') * l.digit * l.digit**-1 *
                                (':' * l.digit * l.digit)**-1)**-1)**-1);

// Constants.
var constant = token(l.CONSTANT,
                       word_match({'null', 'true', 'false'}, null, true));

// Types.
var type = token(l.TYPE, '!!' * word_match({
  // Collection types.
  'map', 'omap', 'pairs', 'set', 'seq',
  // Scalar types.
  'binary', 'bool', 'float', 'int', 'merge', 'null', 'str', 'timestamp',
  'value', 'yaml'
}, null, true) + '!' * l.delimited_range('<>'));

// Document boundaries.
var doc_bounds = token('document', l.starts_line(P('---') + '...'));

// Directives
var directive = token('directive', l.starts_line('%') * l.nonnewline**1);

var word = (l.alpha + '-' * -l.space) * (l.alnum + '-')**0;

// Keys and literals.
var colon = S(' \t')**0 * ':' * (l.space + -1);
var key = token(l.KEYWORD,
                  #word * (l.nonnewline - colon)**1 * #colon *
                  P(function(input, index) {
                    var line = input->sub(1, index - 1)->match('[^\r\n]+$');
                    return ! line->find('[%w-]+:') && index;
                  }));
var value = #word * (l.nonnewline - l.space**0 * S(',]}'))**1;
var block = S('|>') * S('+-')**-1 * (l.newline + -1) * function(input, index) {
  var rest = input->sub(index);
  var level = #rest->match('^( *)');
  for( pos, indent, line in rest->gmatch('() *()([^\r\n]+)') ) {
    if( indent - pos < level && line != ' ' || level == 0 && pos > 1 ) {
      return index + pos - 1;
    }
  }
  return #input + 1;
};
var literal = token('literal', value + block);

// Indicators.
var anchor = token(l.LABEL, '&' * word);
var alias = token(l.VARIABLE, '*' * word);
var tag = token('tag', '!' * word * P('!')**-1);
var reserved = token(l.ERROR, S('@`') * word);
var indicator_chars = token(l.OPERATOR, S('-?:,[]{}!'));

M._rules = {
  {'indent', indent},
  {'whitespace', ws},
  {'comment', comment},
  {'doc_bounds', doc_bounds},
  {'key', key},
  {'literal', literal},
  {'timestamp', ts},
  {'number', number},
  {'constant', constant},
  {'type', type},
  {'indicator', tag + indicator_chars + alias + anchor + reserved},
  {'directive', directive},
};

M._tokenstyles = {
  indent_error = 'back:%(color.red)',
  document = l.STYLE_CONSTANT,
  literal = l.STYLE_DEFAULT,
  timestamp = l.STYLE_NUMBER,
  tag = l.STYLE_CLASS,
  directive = l.STYLE_PREPROCESSOR,
};

M._FOLDBYINDENTATION = true;

return M;
