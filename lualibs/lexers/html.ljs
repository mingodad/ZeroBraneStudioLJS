// Copyright 2006-2016 Mitchell mitchell.att.foicica.com. See LICENSE.
// HTML LPeg lexer.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S, V = lpeg.P, lpeg.R, lpeg.S, lpeg.V;

var M = {_NAME = 'html'};

case_insensitive_tags = true;

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var comment = token(l.COMMENT, '<!--' * (l.any - '-->')**0 * P('-->')**-1);

// Strings.
var sq_str = l.delimited_range("'");
var dq_str = l.delimited_range('"');
var string = #S('\'"') * l.last_char_includes('=') *
               token(l.STRING, sq_str + dq_str);

// TODO: performance is terrible on large files.
var in_tag = P(function(input, index) {
  var before = input->sub(1, index - 1);
  var s, e = before->find('<[^>]-$'), before->find('>[^<]-$');
  if( s && e ) { return s > e && index || null; }
  if( s ) { return index; }
  return input->find('^[^<]->', index) && index || null;
});

// Numbers.
var number = #l.digit * l.last_char_includes('=') *
               token(l.NUMBER, l.digit**1 * P('%')**-1); //* in_tag

// Elements.
var known_element = token('element', '<' * P('/')**-1 * word_match({
  'a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base',
  'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption',
  'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd',
  'decorator', 'del', 'details', 'dfn', 'div', 'dl', 'dt', 'element', 'em',
  'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2',
  'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'i', 'iframe', 'img',
  'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main',
  'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript',
  'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'pre',
  'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section',
  'select', 'shadow', 'small', 'source', 'spacer', 'spacer', 'span', 'strong',
  'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template',
  'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul',
  'var', 'video', 'wbr'
}, null, case_insensitive_tags));
var unknown_element = token('unknown_element', '<' * P('/')**-1 * l.word);
var element = known_element + unknown_element;

// Attributes.
var known_attribute = token('attribute', word_match({
  'accept', 'accept-charset', 'accesskey', 'action', 'align', 'alt', 'async',
  'autocomplete', 'autofocus', 'autoplay', 'bgcolor', 'border', 'buffered',
  'challenge', 'charset', 'checked', 'cite', 'class', 'code', 'codebase',
  'color', 'cols', 'colspan', 'content', 'contenteditable', 'contextmenu',
  'controls', 'coords', 'data', 'data-', 'datetime', 'default', 'defer', 'dir',
  'dirname', 'disabled', 'download', 'draggable', 'dropzone', 'enctype', 'for',
  'form', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang',
  'http-equiv', 'icon', 'id', 'ismap', 'itemprop', 'keytype', 'kind', 'label',
  'lang', 'language', 'list', 'loop', 'low', 'manifest', 'max', 'maxlength',
  'media', 'method', 'min', 'multiple', 'name', 'novalidate', 'open', 'optimum',
  'pattern', 'ping', 'placeholder', 'poster', 'preload', 'pubdate',
  'radiogroup', 'readonly', 'rel', 'required', 'reversed', 'role', 'rows',
  'rowspan', 'sandbox', 'spellcheck', 'scope', 'scoped', 'seamless', 'selected',
  'shape',   'size', 'sizes', 'span', 'src', 'srcdoc', 'srclang', 'start',
  'step', 'style', 'summary', 'tabindex', 'target', 'title', 'type', 'usemap',
  'value', 'width', 'wrap'
}, '-', case_insensitive_tags) + ((P('data-') + 'aria-') * (l.alnum + '-')**1));
var unknown_attribute = token('unknown_attribute', l.word);
var attribute = (known_attribute + unknown_attribute) * #(l.space**0 * '=');

// Closing tags.
var tag_close = token('element', P('/')**-1 * '>');

// Equals.
var equals = token(l.OPERATOR, '='); //* in_tag

// Entities.
var entity = token('entity', '&' * (l.any - l.space - ';')**1 * ';');

// Doctype.
var doctype = token('doctype', '<!' *
                      word_match({'doctype'}, null, case_insensitive_tags) *
                      (l.any - '>')**1 * '>');

M._rules = {
  {'whitespace', ws},
  {'comment', comment},
  {'doctype', doctype},
  {'element', element},
  {'tag_close', tag_close},
  {'attribute', attribute},
//  {'equals', equals},
  {'string', string},
  {'number', number},
  {'entity', entity},
};

M._tokenstyles = {
  element = l.STYLE_KEYWORD,
  unknown_element = l.STYLE_KEYWORD..',italics',
  attribute = l.STYLE_TYPE,
  unknown_attribute = l.STYLE_TYPE..',italics',
  entity = l.STYLE_OPERATOR,
  doctype = l.STYLE_COMMENT
};

M._foldsymbols = {
  _patterns = {'</?', '/>', '<!%-%-', '%-%->'},
  element = {['<'] = 1, ['/>'] = -1, ['</'] = -1},
  unknown_element = {['<'] = 1, ['/>'] = -1, ['</'] = -1},
  [l.COMMENT] = {['<!--'] = 1, ['-->'] = -1}
};

// Tags that start embedded languages.
M.embed_start_tag = element *
                    (ws**1 * attribute * ws**0 * equals * ws**0 * string)**0 *
                    ws**0 * tag_close;
M.embed_end_tag = element * tag_close;

// Embedded CSS.
var css = l.load('css');
var style_element = word_match({'style'}, null, case_insensitive_tags);
var css_start_rule = #(P('<') * style_element *
                        ('>' + P(function(input, index) {
  if( input->find('^%s+type%s*=%s*(["\'])text/css%1', index) ) {
    return index;
  }
}))) * M.embed_start_tag; // <style type="text/css">
var css_end_rule = #('</' * style_element * ws**0 * '>') *
                     M.embed_end_tag; // </style>
l.embed_lexer(M, css, css_start_rule, css_end_rule);

// Embedded JavaScript.
var js = l.load('javascript');
var script_element = word_match({'script'}, null, case_insensitive_tags);
var js_start_rule = #(P('<') * script_element *
                       ('>' + P(function(input, index) {
  if( input->find('^%s+type%s*=%s*(["\'])text/javascript%1', index) ) {
    return index;
  }
}))) * M.embed_start_tag; // <script type="text/javascript">
var js_end_rule = #('</' * script_element * ws**0 * '>') *
                    M.embed_end_tag; // </script>
var js_line_comment = '//' * (l.nonnewline_esc - js_end_rule)**0;
var js_block_comment = '/*' * (l.any - '*/' - js_end_rule)**0 * P('*/')**-1;
js._RULES['comment'] = token(l.COMMENT, js_line_comment + js_block_comment);
l.embed_lexer(M, js, js_start_rule, js_end_rule);

// Embedded CoffeeScript.
var cs = l.load('coffeescript');
script_element = word_match({'script'}, null, case_insensitive_tags);
var cs_start_rule = #(P('<') * script_element * P(function(input, index) {
  if( input->find('^[^>]+type%s*=%s*(["\'])text/coffeescript%1', index) ) {
    return index;
  }
})) * M.embed_start_tag; // <script type="text/coffeescript">
var cs_end_rule = #('</' * script_element * ws**0 * '>') *
                    M.embed_end_tag; // </script>
l.embed_lexer(M, cs, cs_start_rule, cs_end_rule);

return M;
