// Copyright 2015-2016 David B. Lamkins <david@lamkins.net>. See LICENSE.
// pure LPeg lexer, see http://purelang.bitbucket.org/

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'pure'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Comments.
var line_comment = '//' * l.nonnewline**0;
var block_comment = '/*' * (l.any - '*/')**0 * P('*/')**-1;
var comment = token(l.COMMENT, line_comment + block_comment);

// Strings.
var string = token(l.STRING, l.delimited_range('"', true));

// Numbers.
var bin = '0' * S('Bb') * S('01')**1;
var hex = '0' * S('Xx') * (R('09') + R('af') + R('AF'))**1;
var dec = R('09')**1;
var int = (bin + hex + dec) * P('L')**-1;
var rad = P('.') - P('..');
var exp = (S('Ee') * S('+-')**-1 * int)**-1;
var flt = int * (rad * dec)**-1 * exp + int**-1 * rad * dec * exp;
var number = token(l.NUMBER, flt + int);

// Keywords.
var keyword = token(l.KEYWORD, word_match({
  'namespace', 'with', 'end', 'using', 'interface', 'extern', 'let', 'const',
  'def', 'type', 'public', 'private', 'nonfix', 'outfix', 'infix', 'infixl',
  'infixr', 'prefix', 'postfix', 'if', 'otherwise', 'when', 'case', 'of',
  'then', 'else'
}));

// Identifiers.
var identifier = token(l.IDENTIFIER, l.word);

// Operators.
var punct = S('+-/*%<>~!=^&|?~:;,.()[]{}@#$`\\\'');
var dots = P('..');
var operator = token(l.OPERATOR, dots + punct);

// Pragmas.
var hashbang = l.starts_line('#!') * (l.nonnewline - P('//'))**0;
var pragma = token(l.PREPROCESSOR, hashbang);

M._rules = {
  {'whitespace', ws},
  {'comment', comment},
  {'pragma', pragma},
  {'keyword', keyword},
  {'number', number},
  {'operator', operator},
  {'identifier', identifier},
  {'string', string},
};

return M;
