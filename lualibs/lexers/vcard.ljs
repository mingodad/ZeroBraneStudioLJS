// Copyright (c) 2015 Piotr Orzechowski [drzewo.org]. See LICENSE.
// vCard 2.1, 3.0 and 4.0 LPeg lexer.

var l = require('lexer');
var token, word_match = l.token, l.word_match;
var P, R, S = lpeg.P, lpeg.R, lpeg.S;

var M = {_NAME = 'vcard'};

// Whitespace.
var ws = token(l.WHITESPACE, l.space**1);

// Required properties.
var required_property = token(l.KEYWORD, word_match({
  'BEGIN', 'END', 'FN', 'N' /* Not required in v4.0. */, 'VERSION'
}, null, true)) * #P(':');

// Supported properties.
var supported_property = token(l.TYPE, word_match({
  'ADR', 'AGENT' /* Not supported in v4.0. */,
  'ANNIVERSARY' /* Supported in v4.0 only. */, 'BDAY',
  'CALADRURI' /* Supported in v4.0 only. */,
  'CALURI' /* Supported in v4.0 only. */, 'CATEGORIES',
  'CLASS' /* Supported in v3.0 only. */,
  'CLIENTPIDMAP' /* Supported in v4.0 only. */, 'EMAIL', 'END',
  'FBURL' /* Supported in v4.0 only. */,
  'GENDER' /* Supported in v4.0 only. */, 'GEO',
  'IMPP' /* Not supported in v2.1. */, 'KEY',
  'KIND' /* Supported in v4.0 only. */,
  'LABEL' /* Not supported in v4.0. */,
  'LANG' /* Supported in v4.0 only. */, 'LOGO',
  'MAILER' /* Not supported in v4.0. */,
  'MEMBER' /* Supported in v4.0 only. */,
  'NAME' /* Supported in v3.0 only. */,
  'NICKNAME' /* Not supported in v2.1. */, 'NOTE', 'ORG', 'PHOTO',
  'PRODID' /* Not supported in v2.1. */,
  'PROFILE' /* Not supported in v4.0. */,
  'RELATED' /* Supported in v4.0 only. */, 'REV', 'ROLE',
  'SORT-STRING' /* Not supported in v4.0. */, 'SOUND', 'SOURCE', 'TEL',
  'TITLE', 'TZ', 'UID', 'URL', 'XML' /* Supported in v4.0 only. */
}, null, true)) * #S(':;');

var identifier = l.alpha**1 * l.digit**0 * (P('-') * l.alnum**1)**0;

// Extension.
var extension = token(l.TYPE,
                        l.starts_line(S('xX') * P('-') * identifier * #S(':;')));

// Parameter.
var parameter = token(l.IDENTIFIER, l.starts_line(identifier * #S(':='))) +
                  token(l.STRING, identifier) * #S(':=');

// Operators.
var operator = token(l.OPERATOR, S('.:;='));

// Group and property.
var group_sequence = token(l.CONSTANT, l.starts_line(identifier)) *
                       token(l.OPERATOR, P('.')) *
                       (required_property + supported_property +
                        l.token(l.TYPE, S('xX') * P('-') * identifier) *
                       #S(':;'));
// Begin vCard, end vCard.
var begin_sequence = token(l.KEYWORD, P('BEGIN')) *
                       token(l.OPERATOR, P(':')) * token(l.COMMENT, P('VCARD'));
var end_sequence = token(l.KEYWORD, P('END')) * token(l.OPERATOR, P(':')) *
                     token(l.COMMENT, P('VCARD'));

// vCard version (in v3.0 and v4.0 must appear immediately after BEGIN:VCARD).
var version_sequence = token(l.KEYWORD, P('VERSION')) *
                         token(l.OPERATOR, P(':')) *
                         token(l.CONSTANT, l.digit**1 * (P('.') * l.digit**1)**-1);

// Data.
var data = token(l.IDENTIFIER, l.any);

// Rules.
M._rules = {
  {'whitespace', ws},
  {'begin_sequence', begin_sequence},
  {'end_sequence', end_sequence},
  {'version_sequence', version_sequence},
  {'group_sequence', group_sequence},
  {'required_property', required_property},
  {'supported_property', supported_property},
  {'extension', extension},
  {'parameter', parameter},
  {'operator', operator},
  {'data', data},
};

// Folding.
M._foldsymbols = {
  _patterns = {'BEGIN', 'END'},
  [l.KEYWORD] = {['BEGIN'] = 1, ['END'] = -1}
};

return M;
