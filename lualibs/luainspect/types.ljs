var T = {}; // types

// istype[o] iff o represents a type (i.e. set of values)
T.istype = {};

// iserror[o] iff o represents an error type (created via T.error).
T.iserror = {};

// istabletype[o] iff o represents a table type (created by T.table).
T.istabletype = {};

// Number type
T.number = {};
setmetatable(T.number, T.number);
function T.number.__tostring(this) {
  return 'number';
}
T.istype[T.number] = true;

// String type
T.string = {};
setmetatable(T.string, T.string);
function T.string.__tostring(this) {
  return 'string';
}
T.istype[T.string] = true;

// Boolean type
T.boolean = {};
setmetatable(T.boolean, T.boolean);
function T.boolean.__tostring(this) {
  return 'boolean';
}
T.istype[T.boolean] = true;

// Table type
function T.table(t) {
  T.istype[t] = true;
  T.istabletype[t] = true;
  return t;
}

// Universal type.  This is a superset of all other types.
T.universal = {};
setmetatable(T.universal, T.universal);
function T.universal.__tostring(this) {
  return 'unknown';
}
T.istype[T.universal] = true;

// nil type.  Represents `nil` but can be stored in tables.
T['nil'] = {};
setmetatable(T['nil'], T['nil']);
T['nil'].__tostring = function(this) {
  return 'nil';
};
T.istype[T['nil']] = true;

// None type.  Represents a non-existent value, in a similar way
// that `none` is used differently from `nil` in the Lua C API.
T.none = {};
setmetatable(T.none, T.none);
function T.none.__tostring(this) {
  return 'none';
}
T.istype[T.none] = true;

// Error type
var CError = {}; CError.__index = CError;
function CError.__tostring(this) { return "error:" .. tostring(this.value); }
function T.error(val) {
  var this = setmetatable({value=val}, CError);
  T.istype[this] = true;
  T.iserror[this] = true;
  return this;
}


// Gets a type that is a superset of the two given types.
function T.superset_types(a, b) {
  if( T.iserror[a] ) { return a; }
  if( T.iserror[b] ) { return b; }
  if( rawequal(a, b) ) { // note: including nil == nil
    return a;
  } else if( type(a) == 'string' || a == T.string ) {
    if( type(b) == 'string' || b == T.string ) {
      return T.string;
    } else {
      return T.universal;
    }
  } else if( type(a) == 'number' || a == T.number ) {
    if( type(b) == 'number' || b == T.number ) {
      return T.number;
    } else {
      return T.universal;
    }
  } else if( type(a) == 'boolean' || a == T.boolean ) {
    if( type(b) == 'boolean' || b == T.boolean ) {
      return T.boolean;
    } else {
      return T.universal;
    }
  } else {
    return T.universal; // IMPROVE
  }
}
/*TESTS:
assert(T.superset_types(2, 2) == 2)
assert(T.superset_types(2, 3) == T.number)
assert(T.superset_types(2, T.number) == T.number)
assert(T.superset_types(T.number, T.string) == T.universal)
print 'DONE'
--*/

// Determines whether type `o` certainly evaluates to true (true),
// certainly evaluates to false (false) or could evaluate to either
// true of false ('?').
function T.boolean_cast(o) {
  if( T.iserror[o] ) { // special case
    return '?';
  } else if( o == null || o == false || o == T['nil'] ) { // all subsets of {nil, false}
    return false;
  } else if( o == T.universal || o == T.boolean ) { // all supersets of boolean
    return '?';
  } else { // all subsets of  universal - {nil, false}
    return true;
  }
}

return T;
