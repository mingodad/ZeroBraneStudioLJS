// LuaInspect.globals - identifier scope analysis
// Locates locals, globals, and their definitions.
//
// (c) D.Manura, 2008-2010, MIT license.

// based on http://lua-users.org/wiki/DetectingUndefinedVariables

var M = {};

//! require 'luainspect.typecheck' (context)

var LA = require ("luainspect.ast");

var function definelocal(scope, name, ast) {
  if( scope[name] ) {
    scope[name].localmasked = true;
    ast.localmasking = scope[name];
  }
  scope[name] = ast;
  if( name == '_' ) { ast.isignore = true; }
}

// Resolves scoping and usages of variable in AST.
// Data Notes:
//   ast.localdefinition refers to lexically scoped definition of `Id node `ast`.
//     If ast.localdefinition == ast then ast is a "lexical definition".
//     If ast.localdefinition == nil, then variable is global.
//   ast.functionlevel is the number of functions the AST is contained in.
//     ast.functionlevel is defined iff ast is a lexical definition.
//   ast.isparam is true iff ast is a lexical definition and a function parameter.
//   ast.isset is true iff ast is a lexical definition and exists an assignment on it.
//   ast.isused is true iff ast is a lexical definition and has been referred to.
//   ast.isignore is true if local variable should be ignored (e.g. typically "_")
//   ast.localmasking - for a lexical definition, this is set to the lexical definition
//     this is masking (i.e. same name).  nil if not masking.
//   ast.localmasked - true iff lexical definition masked by another lexical definition.
//   ast.isfield is true iff `String node ast is used for field access on object,
//      e.g. x.y or x['y'].z
//   ast.previous - For `Index{o,s} or `Invoke{o,s,...}, s.previous == o
var function traverse(ast, scope, globals, level, functionlevel) {
  scope = scope || {};

  var blockrecurse;
  ast.level = level;

  // operations on walking down the AST
  if( ast.tag == 'Local' ) {
    blockrecurse = 1;
    // note: apply new scope after processing values
  } else if( ast.tag == 'Localrec' ) {
    var namelist_ast, valuelist_ast = ast[1], ast[2];
    for( _,value_ast in ipairs(namelist_ast) ) {
      assert(value_ast.tag == 'Id');
      var name = value_ast[1];
      var parentscope = getmetatable(scope).__index;
      definelocal(parentscope, name, value_ast);
      value_ast.localdefinition = value_ast;
      value_ast.functionlevel = functionlevel;
      value_ast.level = level+1;
    }
    blockrecurse = 1;
  } else if( ast.tag == 'Id' ) {
    var name = ast[1];
    if( scope[name] ) {
      ast.localdefinition = scope[name];
      ast.functionlevel = functionlevel;
      scope[name].isused = true;
    } else { // global, do nothing
    }
  } else if( ast.tag == 'Function' ) {
    var paramlist_ast, body_ast = ast[1], ast[2];
    functionlevel +=   1;
    for( _,param_ast in ipairs(paramlist_ast) ) {
      var name = param_ast[1];
      assert(param_ast.tag == 'Id' || param_ast.tag == 'Dots');
      if( param_ast.tag == 'Id' ) {
        definelocal(scope, name, param_ast);
        param_ast.localdefinition = param_ast;
        param_ast.functionlevel = functionlevel;
        param_ast.isparam = true;
      }
      param_ast.level = level+1;
    }
    blockrecurse = 1;
  } else if( ast.tag == 'Set' ) {
    var reflist_ast, valuelist_ast = ast[1], ast[2];
    for( _,ref_ast in ipairs(reflist_ast) ) {
      if( ref_ast.tag == 'Id' ) {
        var name = ref_ast[1];
        if( scope[name] ) {
          scope[name].isset = true;
        } else {
          if( ! globals[name] ) {
            globals[name] = {set=ref_ast};
          }
        }
      }
      ref_ast.level = level+1;
    }
    //ENHANCE? We could differentiate assignments to x (which indicates that
    //  x is not const) and assignments to a member of x (which indicates that
    //  x is not a pointer to const) and assignments to any nested member of x
    //  (which indicates that x it not a transitive const).
  } else if( ast.tag == 'Fornum' ) {
    blockrecurse = 1;
  } else if( ast.tag == 'Forin' ) {
    blockrecurse = 1;
  }

  // recurse (depth-first search down the AST)
  if( ast.tag == 'Repeat' ) {
    var block_ast, cond_ast = ast[1], ast[2];
    var scope = scope;
    for( _,stat_ast in ipairs(block_ast) ) {
      scope = setmetatable({}, {__index = scope});
      traverse(stat_ast, scope, globals, level+1, functionlevel);
    }
    scope = setmetatable({}, {__index = scope});
    traverse(cond_ast, scope, globals, level+1, functionlevel);
  } else if( ast.tag == 'Fornum' ) {
    var name_ast, block_ast = ast[1], ast[#ast];
    // eval value list in current scope
    for( i=2, #ast-1 ) { traverse(ast[i], scope, globals, level+1, functionlevel); }
    // eval body in next scope
    var name = name_ast[1];
    definelocal(scope, name, name_ast);
    name_ast.localdefinition = name_ast;
    name_ast.functionlevel = functionlevel;
    traverse(block_ast, scope, globals, level+1, functionlevel);
  } else if( ast.tag == 'Forin' ) {
    var namelist_ast, vallist_ast, block_ast = ast[1], ast[2], ast[3];
    // eval value list in current scope
    traverse(vallist_ast, scope, globals, level+1, functionlevel);
    // eval body in next scope
    for( _,name_ast in ipairs(namelist_ast) ) {
      var name = name_ast[1];
      definelocal(scope, name, name_ast);
      name_ast.localdefinition = name_ast;
      name_ast.functionlevel = functionlevel;
      name_ast.level = level+1;
    }
    traverse(block_ast, scope, globals, level+1, functionlevel);
  } else { // normal
    for( i,v in ipairs(ast) ) {
      if( i != blockrecurse && type(v) == 'table' ) {
        var scope = setmetatable({}, {__index = scope});
        traverse(v, scope, globals, level+1, functionlevel);
      }
    }
  }

  // operations on walking up the AST
  if( ast.tag == 'Local' ) {
    // Unlike Localrec, variables come into scope after evaluating values.
    var namelist_ast, valuelist_ast = ast[1], ast[2];
    for( _,name_ast in ipairs(namelist_ast) ) {
      assert(name_ast.tag == 'Id');
      var name = name_ast[1];
      var parentscope = getmetatable(scope).__index;
      definelocal(parentscope, name, name_ast);
      name_ast.localdefinition = name_ast;
      name_ast.functionlevel = functionlevel;
      name_ast.level = level+1;
    }
  } else if( ast.tag == 'Index' ) {
    if( ast[2].tag == 'String' ) {
      ast[2].isfield = true;
      ast[2].previous = ast[1];
    }
  } else if( ast.tag == 'Invoke' ) {
    assert(ast[2].tag == 'String');
    ast[2].isfield = true;
    ast[2].previous = ast[1];
  }
}

function M.globals(ast) {
  // Default list of defined variables.
  var scope = setmetatable({}, {});
  var globals = {};
  traverse(ast, scope, globals, 1, 1); // Start check.

  return globals;
}


// Gets locals in scope of statement of block ast.  If isafter is true and ast is statement,
// uses scope just after statement ast.
// Assumes 'parent' attributes on ast are marked.
// Returns table mapping name -> AST local definition.
function M.variables_in_scope(ast, isafter) {
  var scope = {};
  var cast = ast;
  while( cast.parent ) {
    var midx = LA.ast_idx(cast.parent, cast);
    for( idx=1,midx ) {
      var bast = cast.parent[idx];
      if( bast.tag == 'Localrec' || bast.tag == 'Local' && (idx < midx || isafter) ) {
        var names_ast = bast[1];
        for( bidx=1,#names_ast ) {
          var name_ast = names_ast[bidx];
          var name = name_ast[1];
          scope[name] = name_ast;
        }
      } else if( cast != ast && (bast.tag == 'For' || bast.tag == 'Forin' || bast.tag == 'Function') ) {
        var names_ast = bast[1];
        for( bidx=1,#names_ast ) {
          var name_ast = names_ast[bidx];
          if( name_ast.tag == 'Id' ) {  //Q: or maybe `Dots should be included
            var name = name_ast[1];
            scope[name] = name_ast;
          }
        }
      }
    }
    cast = cast.parent;
  }
  return scope;
}


return M;
