var parser = require ("luacheck.parser");
var utils = require ("luacheck.utils");

var stage = {};

var function redefined_warning(message_format) {
   return {
      message_format = message_format,
      fields = {"name", "prev_line", "prev_column", "prev_end_column", "self"}
   };
}

stage.warnings = {
   ["411"] = redefined_warning("variable {name!} was previously defined on line {prev_line}"),
   ["412"] = redefined_warning("variable {name!} was previously defined as an argument on line {prev_line}"),
   ["413"] = redefined_warning("variable {name!} was previously defined as a loop variable on line {prev_line}"),
   ["421"] = redefined_warning("shadowing definition of variable {name!} on line {prev_line}"),
   ["422"] = redefined_warning("shadowing definition of argument {name!} on line {prev_line}"),
   ["423"] = redefined_warning("shadowing definition of loop variable {name!} on line {prev_line}"),
   ["431"] = redefined_warning("shadowing upvalue {name!} on line {prev_line}"),
   ["432"] = redefined_warning("shadowing upvalue argument {name!} on line {prev_line}"),
   ["433"] = redefined_warning("shadowing upvalue loop variable {name!} on line {prev_line}"),
   ["521"] = {message_format = "unused label {label!}", fields = {"label"}}
};

var type_codes = {
   _v_var = "1",
   func = "1",
   arg = "2",
   loop = "3",
   loopi = "3"
};

var function warn_redefined(chstate, _v_var, prev_var, is_same_scope) {
   var code = "4" .. (is_same_scope && "1" || _v_var.line == prev_var.line && "2" || "3") .. type_codes[prev_var.type];

   chstate->warn_var(code, _v_var, {
      this = _v_var.this && prev_var.this,
      prev_line = prev_var.node.line,
      prev_column = chstate->offset_to_column(prev_var.node.line, prev_var.node.offset),
      prev_end_column = chstate->offset_to_column(prev_var.node.line, prev_var.node.end_offset)
   });
}

var function warn_unused_label(chstate, label) {
   chstate->warn_range("521", label.range, {
      label = label.name
   });
}

var pseudo_labels = utils.array_to_set({"do", "else", "break", "end", "return"});

var Line = utils.class();

function Line::__init(node, parent, value) {
   // Maps variables to arrays of accessing items.
   this.accessed_upvalues = {};
   // Maps variables to arrays of mutating items.
   this.mutated_upvalues = {};
   // Maps variables to arays of setting items.
   this.set_upvalues = {};
   this.lines = {};
   this.node = node;
   this.parent = parent;
   this.value = value;
   this.items = utils.Stack();
}

// Calls callback with line, index, item, ... for each item reachable from starting item.
// `visited` is a set of already visited indexes.
// Callback can return true to stop walking from current item.
function Line::walk(visited, index, callback, ...) {
   if( visited[index] ) {
      return;
   }

   visited[index] = true;

   var item = this.items[index];

   if( callback(this, index, item, ...) ) {
      return;
   }

   if( ! item ) {
      return;
   } else if( item.tag == "Jump" ) {
      return this->walk(visited, item.to, callback, ...);
   } else if( item.tag == "Cjump" ) {
      this->walk(visited, item.to, callback, ...);
   }

   return this->walk(visited, index + 1, callback, ...);
}

var function new_scope(line) {
   return {
      vars = {},
      labels = {},
      gotos = {},
      line = line
   };
}

var function new_var(line, node, type_) {
   return {
      name = node[1],
      node = node,
      type = type_,
      this = node.implicit,
      line = line,
      scope_start = line.items.size + 1,
      values = {}
   };
}

var function new_value(var_node, value_node, item, is_init) {
   var value = {
      _v_var = var_node._v_var,
      var_node = var_node,
      type = is_init && var_node._v_var.type || "var",
      node = value_node,
      using_lines = {},
      empty = is_init && ! value_node && (var_node._v_var.type == "var"),
      item = item
   };

   if( value_node && value_node.tag == "Function" ) {
      value.type = "func";
      value_node.value = value;
   }

   return value;
}

var function new_label(line, name, range) {
   return {
      name = name,
      range = range,
      index = line.items.size + 1
   };
}

var function new_goto(name, jump, range) {
   return {
      name = name,
      jump = jump,
      range = range
   };
}

var function new_jump_item(is_conditional) {
   return {
      tag = is_conditional && "Cjump" || "Jump"
   };
}

var function new_eval_item(node) {
   return {
      tag = "Eval",
      node = node,
      accesses = {},
      used_values = {},
      lines = {}
   };
}

var function new_noop_item(node, loop_end) {
   return {
      tag = "Noop",
      node = node,
      loop_end = loop_end
   };
}

var function new_local_item(node) {
   return {
      tag = "Local",
      node = node,
      lhs = node[1],
      rhs = node[2],
      accesses = node[2] && {},
      used_values = node[2] && {},
      lines = node[2] && {}
   };
}

var function new_set_item(node) {
   return {
      tag = "Set",
      node = node,
      lhs = node[1],
      rhs = node[2],
      accesses = {},
      mutations = {},
      used_values = {},
      lines = {}
   };
}

var function is_unpacking(node) {
   return node.tag == "Dots" || node.tag == "Call" || node.tag == "Invoke";
}

var LinState = utils.class();

function LinState::__init(chstate) {
   this.chstate = chstate;
   this.lines = utils.Stack();
   this.scopes = utils.Stack();
}

function LinState::enter_scope() {
   this.scopes->push(new_scope(this.lines.top));
}

function LinState::leave_scope() {
   var left_scope = this.scopes->pop();
   var prev_scope = this.scopes.top;

   for( _, goto_ in ipairs(left_scope.gotos) ) {
      var label = left_scope.labels[goto_.name];

      if( label ) {
         goto_.jump.to = label.index;
         label.used = true;
      } else {
         if( ! prev_scope || prev_scope.line != this.lines.top ) {
            if( goto_.name == "break" ) {
               parser.syntax_error("'break' is not inside a loop", goto_.range);
            } else {
               parser.syntax_error(("no visible label '%s'")->format(goto_.name), goto_.range);
            }
         }

         table.insert(prev_scope.gotos, goto_);
      }
   }

   for( name, label in pairs(left_scope.labels) ) {
      if( ! label.used && ! pseudo_labels[name] ) {
         warn_unused_label(this.chstate, label);
      }
   }

   for( _, _v_var in pairs(left_scope.vars) ) {
      _v_var.scope_end = this.lines.top.items.size;
   }
}

function LinState::register_var(node, type_) {
   var _v_var = new_var(this.lines.top, node, type_);
   var prev_var = this->resolve_var(_v_var.name);

   if( prev_var ) {
      var is_same_scope = this.scopes.top.vars[_v_var.name];

      if( _v_var.name != "..." ) {
         warn_redefined(this.chstate, _v_var, prev_var, is_same_scope);
      }

      if( is_same_scope ) {
         prev_var.scope_end = this.lines.top.items.size;
      }
   }

   this.scopes.top.vars[_v_var.name] = _v_var;
   node._v_var = _v_var;
   return _v_var;
}

function LinState::register_vars(nodes, type_) {
   for( _, node in ipairs(nodes) ) {
      this->register_var(node, type_);
   }
}

function LinState::resolve_var(name) {
   for( _, scope in utils.ripairs(this.scopes) ) {
      var _v_var = scope.vars[name];

      if( _v_var ) {
         return _v_var;
      }
   }
}

function LinState::check_var(node) {
   if( ! node._v_var ) {
      node._v_var = this->resolve_var(node[1]);
   }

   return node._v_var;
}

function LinState::register_label(name, range) {
   var prev_label = this.scopes.top.labels[name];

   if( prev_label ) {
      assert(! pseudo_labels[name]);
      parser.syntax_error(("label '%s' already defined on line %d")->format(
         name, prev_label.range.line), range, prev_label.range);
   }

   this.scopes.top.labels[name] = new_label(this.lines.top, name, range);
}

function LinState::emit(item) {
   this.lines.top.items->push(item);
}

function LinState::emit_goto(name, is_conditional, range) {
   var jump = new_jump_item(is_conditional);
   this->emit(jump);
   table.insert(this.scopes.top.gotos, new_goto(name, jump, range));
}

var tag_to_boolean = {
   Nil = false, False = false,
   True = true, Number = true, String = true, Table = true, Function = true
};

// Emits goto that jumps to ::name:: if bool(cond_node) == false.
function LinState::emit_cond_goto(name, cond_node) {
   var cond_bool = tag_to_boolean[cond_node.tag];

   if( cond_bool != true ) {
      this->emit_goto(name, cond_bool != false);
   }
}

function LinState::emit_noop(node, loop_end) {
   this->emit(new_noop_item(node, loop_end));
}

function LinState::emit_stmt(stmt) {
   this["emit_stmt_" .. stmt.tag](this, stmt);
}

function LinState::emit_stmts(stmts) {
   for( _, stmt in ipairs(stmts) ) {
      this->emit_stmt(stmt);
   }
}

function LinState::emit_block(block) {
   this->enter_scope();
   this->emit_stmts(block);
   this->leave_scope();
}

function LinState::emit_stmt_Do(node) {
   this->emit_noop(node);
   this->emit_block(node);
}

function LinState::emit_stmt_While(node) {
   this->emit_noop(node);
   this->enter_scope();
   this->register_label("do");
   this->emit_expr(node[1]);
   this->emit_cond_goto("break", node[1]);
   this->emit_block(node[2]);
   this->emit_noop(node, true);
   this->emit_goto("do");
   this->register_label("break");
   this->leave_scope();
}

function LinState::emit_stmt_Repeat(node) {
   this->emit_noop(node);
   this->enter_scope();
   this->register_label("do");
   this->enter_scope();
   this->emit_stmts(node[1]);
   this->emit_expr(node[2]);
   this->leave_scope();
   this->emit_cond_goto("do", node[2]);
   this->register_label("break");
   this->leave_scope();
}

function LinState::emit_stmt_Fornum(node) {
   this->emit_noop(node);
   this->emit_expr(node[2]);
   this->emit_expr(node[3]);

   if( node[5] ) {
      this->emit_expr(node[4]);
   }

   this->enter_scope();
   this->register_label("do");
   this->emit_goto("break", true);
   this->enter_scope();
   this->emit(new_local_item({{node[1]}}));
   this->register_var(node[1], "loopi");
   this->emit_stmts(node[5] || node[4]);
   this->leave_scope();
   this->emit_noop(node, true);
   this->emit_goto("do");
   this->register_label("break");
   this->leave_scope();
}

function LinState::emit_stmt_Forin(node) {
   this->emit_noop(node);
   this->emit_exprs(node[2]);
   this->enter_scope();
   this->register_label("do");
   this->emit_goto("break", true);
   this->enter_scope();
   this->emit(new_local_item({node[1]}));
   this->register_vars(node[1], "loop");
   this->emit_stmts(node[3]);
   this->leave_scope();
   this->emit_noop(node, true);
   this->emit_goto("do");
   this->register_label("break");
   this->leave_scope();
}

function LinState::emit_stmt_If(node) {
   this->emit_noop(node);
   this->enter_scope();

   for( i = 1, #node - 1, 2 ) {
      this->enter_scope();
      this->emit_expr(node[i]);
      this->emit_cond_goto("else", node[i]);
      this->emit_block(node[i + 1]);
      this->emit_goto("end");
      this->register_label("else");
      this->leave_scope();
   }

   if( #node % 2 == 1 ) {
      this->emit_block(node[#node]);
   }

   this->register_label("end");
   this->leave_scope();
}

function LinState::emit_stmt_Label(node) {
   this->register_label(node[1], node);
}

function LinState::emit_stmt_Goto(node) {
   this->emit_noop(node);
   this->emit_goto(node[1], false, node);
}

function LinState::emit_stmt_Break(node) {
   this->emit_goto("break", false, node);
}

function LinState::emit_stmt_Return(node) {
   this->emit_noop(node);
   this->emit_exprs(node);
   this->emit_goto("return");
}

function LinState::emit_expr(node) {
   var item = new_eval_item(node);
   this->scan_expr(item, node);
   this->emit(item);
}

function LinState::emit_exprs(exprs) {
   for( _, expr in ipairs(exprs) ) {
      this->emit_expr(expr);
   }
}

LinState.emit_stmt_Call = LinState.emit_expr;
LinState.emit_stmt_Invoke = LinState.emit_expr;

function LinState::emit_stmt_Local(node) {
   var item = new_local_item(node);
   this->emit(item);

   if( node[2] ) {
      this->scan_exprs(item, node[2]);
   }

   this->register_vars(node[1], "var");
}

function LinState::emit_stmt_Localrec(node) {
   var item = new_local_item(node);
   this->register_var(node[1][1], "var");
   this->emit(item);
   this->scan_expr(item, node[2][1]);
}

function LinState::emit_stmt_Set(node) {
   var item = new_set_item(node);
   this->scan_exprs(item, node[2]);

   for( _, expr in ipairs(node[1]) ) {
      if( expr.tag == "Id" ) {
         var _v_var = this->check_var(expr);

         if( _v_var ) {
            this->register_upvalue_action(item, _v_var, "set_upvalues");
         }
      } else {
         assert(expr.tag == "Index");
         this->scan_lhs_index(item, expr);
      }
   }

   this->emit(item);
}


function LinState::scan_expr(item, node) {
   var scanner = this["scan_expr_" .. node.tag];

   if( scanner ) {
      scanner(this, item, node);
   }
}

function LinState::scan_exprs(item, nodes) {
   for( _, node in ipairs(nodes) ) {
      this->scan_expr(item, node);
   }
}

function LinState::register_upvalue_action(item, _v_var, key) {
   for( _, line in utils.ripairs(this.lines) ) {
      if( line == _v_var.line ) {
         break;
      }

      if( ! line[key][_v_var] ) {
         line[key][_v_var] = {};
      }

      table.insert(line[key][_v_var], item);
   }
}

function LinState::mark_access(item, node) {
   node._v_var.accessed = true;

   if( ! item.accesses[node._v_var] ) {
      item.accesses[node._v_var] = {};
   }

   table.insert(item.accesses[node._v_var], node);
   this->register_upvalue_action(item, node._v_var, "accessed_upvalues");
}

function LinState::mark_mutation(item, node) {
   node._v_var.mutated = true;

   if( ! item.mutations[node._v_var] ) {
      item.mutations[node._v_var] = {};
   }

   table.insert(item.mutations[node._v_var], node);
   this->register_upvalue_action(item, node._v_var, "mutated_upvalues");
}

function LinState::scan_expr_Id(item, node) {
   if( this->check_var(node) ) {
      this->mark_access(item, node);
   }
}

function LinState::scan_expr_Dots(item, node) {
   var dots = this->check_var(node);

   if( ! dots || dots.line != this.lines.top ) {
      parser.syntax_error("cannot use '...' outside a vararg function", node);
   }

   this->mark_access(item, node);
}

function LinState::scan_lhs_index(item, node) {
   if( node[1].tag == "Id" ) {
      if( this->check_var(node[1]) ) {
         this->mark_mutation(item, node[1]);
      }
   } else if( node[1].tag == "Index" ) {
      this->scan_lhs_index(item, node[1]);
   } else {
      this->scan_expr(item, node[1]);
   }

   this->scan_expr(item, node[2]);
}

LinState.scan_expr_Index = LinState.scan_exprs;
LinState.scan_expr_Call = LinState.scan_exprs;
LinState.scan_expr_Invoke = LinState.scan_exprs;
LinState.scan_expr_Paren = LinState.scan_exprs;
LinState.scan_expr_Table = LinState.scan_exprs;
LinState.scan_expr_Pair = LinState.scan_exprs;

function LinState::scan_expr_Op(item, node) {
   this->scan_expr(item, node[2]);

   if( node[3] ) {
      this->scan_expr(item, node[3]);
   }
}

// Puts tables {var = value{} into field `set_variables` of items in line which set values.
// Registers set values in field `values` of variables.
function LinState::register_set_variables() {
   var line = this.lines.top;

   for( _, item in ipairs(line.items) ) {
      if( item.tag == "Local" || item.tag == "Set" ) {
         item.set_variables = {};

         var is_init = item.tag == "Local";
         var unpacking_item; // Rightmost item of rhs which may unpack into several lhs items.

         if( item.rhs ) {
            var last_rhs_item = item.rhs[#item.rhs];

            if( is_unpacking(last_rhs_item) ) {
               unpacking_item = last_rhs_item;
            }
         }

         var secondaries; // Array of values unpacked from rightmost rhs item.

         if( unpacking_item && (#item.lhs > #item.rhs) ) {
            secondaries = {};
         }

         for( i, node in ipairs(item.lhs) ) {
            var value;

            if( node._v_var ) {
               value = new_value(node, item.rhs && item.rhs[i] || unpacking_item, item, is_init);
               item.set_variables[node._v_var] = value;
               table.insert(node._v_var.values, value);
            }

            if( secondaries && (i >= #item.rhs) ) {
               if( value ) {
                  value.secondaries = secondaries;
                  table.insert(secondaries, value);
               } else {
                  // If one of secondary values is assigned to a global or index,
                  // it is considered used.
                  secondaries.used = true;
               }
            }
         }
      }
   }
}

function LinState::build_line(node) {
   this.lines->push(Line(node, this.lines.top));
   this->enter_scope();
   this->emit(new_local_item({node[1]}));
   this->enter_scope();
   this->register_vars(node[1], "arg");
   this->emit_stmts(node[2]);
   this->leave_scope();
   this->register_label("return");
   this->leave_scope();
   this->register_set_variables();
   var line = this.lines->pop();

   for( _, prev_line in ipairs(this.lines) ) {
      table.insert(prev_line.lines, line);
   }

   return line;
}

function LinState::scan_expr_Function(item, node) {
   var line = this->build_line(node);
   table.insert(item.lines, line);

   for( _, nested_line in ipairs(line.lines) ) {
      table.insert(item.lines, nested_line);
   }
}

// Builds linear representation (line) of AST and assigns it as `chstate.top_line`.
// Assings an array of all lines as `chstate.lines`.
// Adds warnings for redefined/shadowed locals and unused labels.
function stage.run(chstate) {
   var linstate = LinState(chstate);
   chstate.top_line = linstate->build_line({{{tag = "Dots", "..."}}, chstate.ast});
   assert(linstate.lines.size == 0);
   assert(linstate.scopes.size == 0);

   chstate.lines = {chstate.top_line};

   for( _, nested_line in ipairs(chstate.top_line.lines) ) {
      table.insert(chstate.lines, nested_line);
   }
}

return stage;
