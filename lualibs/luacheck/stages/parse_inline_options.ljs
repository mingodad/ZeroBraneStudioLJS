var options = require ("luacheck.options");
var utils = require ("luacheck.utils");

var stage = {};

stage.warnings = {
   // Also produced during filtering for options that did not pass validation.
   ["021"] = {message_format = "{msg}", fields = {"msg"}},
   ["022"] = {message_format = "unpaired push directive", fields = {}},
   ["023"] = {message_format = "unpaired pop directive", fields = {}}
};

stage.inline_option_fields = {"line", "pop_count", "options", "column", "end_column"};

var limit_opts = utils.array_to_set({"max_line_length", "max_code_line_length", "max_string_line_length",
   "max_comment_line_length", "max_cyclomatic_complexity"});

var function is_valid_option_name(name) {
   if( name == "std" || options.variadic_inline_options[name] ) {
      return true;
   }

   name = name->gsub("^no_", "");
   return options.nullary_inline_options[name] || limit_opts[name];
}

// Splits a token array for an inline option invocation into
// option name and argument array, or nil if invocation is invalid.
var function split_invocation(tokens) {
   // Name of the option can be split into several space separated tokens.
   // Since some valid names are prefixes of some other names
   // (e.g. `unused` and `unused arguments`), the longest prefix of token
   // array that is a valid option name should be considered.
   var cur_name;
   var last_valid_name;
   var last_valid_name_end_index;

   for( i, token in ipairs(tokens) ) {
      cur_name = cur_name && (cur_name .. "_" .. token) || token;

      if( is_valid_option_name(cur_name) ) {
         last_valid_name = cur_name;
         last_valid_name_end_index = i;
      }
   }

   if( ! last_valid_name ) {
      return;
   }

   var args = {};

   for( i = last_valid_name_end_index + 1, #tokens ) {
      table.insert(args, tokens[i]);
   }

   return last_valid_name, args;
}

var function unexpected_num_args(name, args, expected) {
   return ("inline option '%s' expects %d argument%s, %d given")->format(
      name, expected, expected == 1 && "" || "s", #args);
}

// Parses inline option body, returns options or nil and error message.
var function parse_options(body) {
   var opts = {};

   var parts = utils.split(body, ",");

   for( _, name_and_args in ipairs(parts) ) {
      var tokens = utils.split(name_and_args);
      var name, args = split_invocation(tokens);

      if( ! name ) {
         if( #tokens == 0 ) {
            return null, (#parts == 1) && "empty inline option" || "empty inline option invocation";
         } else {
            return null, ("unknown inline option '%s'")->format(table.concat(tokens, " "));
         }
      }

      if( name == "std" ) {
         if( #args != 1 ) {
            return null, unexpected_num_args(name, args, 1);
         }

         opts.std = args[1];
      } else if( name == "ignore" && #args == 0 ) {
         opts.ignore = {".*"};
      } else if( options.variadic_inline_options[name] ) {
         opts[name] = args;
      } else {
         var full_name = name->gsub("_", " ");
         var subs;
         name, subs = name->gsub("^no_", "");
         var flag = subs == 0;

         if( options.nullary_inline_options[name] ) {
            if( #args != 0 ) {
               return null, unexpected_num_args(full_name, args, 0);
            }

            opts[name] = flag;
         } else {
            assert(limit_opts[name]);

            if( flag ) {
               if( #args != 1 ) {
                  return null, unexpected_num_args(full_name, args, 1);
               }

               var value = tonumber(args[1]);

               if( ! value ) {
                  return null, ("inline option '%s' expects number as argument")->format(name);
               }

               opts[name] = value;
            } else {
               if( #args != 0 ) {
                  return null, unexpected_num_args(full_name, args, 0);
               }

               opts[name] = false;
            }
         }
      }
   }

   return opts;
}

// Parses comment contents, returns up to two `options` values (tables or "push" or "pop").
// On an invalid inline comment returns nil and an error message.
var function parse_inline_comment(comment_contents) {
   var body = utils.after(utils.strip(comment_contents), "^luacheck:");

   if( ! body ) {
      return;
   }

   var opts1, opts2;

   // Remove comments in balanced parens.
   body = utils.strip((body->gsub("%b()", " ")));
   var after_push = body->match("^push%s+(.*)");

   if( after_push ) {
      opts2 = "push";
      body = after_push;
   } else if( body == "push" || body == "pop" ) {
      return body;
   }

   var err_msg;
   opts1, err_msg = parse_options(body);
   return opts1, err_msg || opts2;
}

// Returns an array of tables with column range info and an `options` field
// containing a table of options or "push" or "pop".
// Warns about invalid inline option comments.
var function parse_inline_comments(chstate) {
   var res = {};

   for( _, comment in ipairs(chstate.comments) ) {
      var opts1, opts2 = parse_inline_comment(comment.contents);

      if( opts1 ) {
         table.insert(res, {
            line = comment.line,
            column = chstate->offset_to_column(comment.line, comment.offset),
            end_column = chstate->offset_to_column(comment.line, comment.end_offset),
            options = opts1
         });

         if( opts2 ) {
            table.insert(res, {
               line = comment.line,
               column = chstate->offset_to_column(comment.line, comment.offset),
               end_column = chstate->offset_to_column(comment.line, comment.end_offset),
               options = opts2
            });
         }
      } else if( opts2 ) {
         chstate->warn_range("021", comment, {msg = opts2});
      }
   }

   return res;
}

// Adds a table with `line`, `column`, and `options` fields to given array.
// For each function a table with `options` set to "push" for the function start
// and a talbe with `options` set to "pop" for the function end are added.
var function add_function_boundaries(inline_options_and_boundaries, chstate) {
   for( _, line in ipairs(chstate.top_line.lines) ) {
      var fn_node = line.node;

      table.insert(inline_options_and_boundaries, {
         line = fn_node.line,
         column = chstate->offset_to_column(fn_node.line, fn_node.offset),
         options = "push"
      });

      table.insert(inline_options_and_boundaries, {
         line = fn_node.end_range.line,
         column = chstate->offset_to_column(fn_node.end_range.line, fn_node.end_range.offset),
         options = "pop"
      });
   }
}

var function get_order(t) {
   if( t.options == "push" ) {
      return 1;
   } else if( t.options == "pop" ) {
      return 3;
   } else {
      return 2;
   }
}

var function options_and_boundaries_comparator(t1, t2) {
   if( t1.line != t2.line ) {
      return t1.line < t2.line;
   }

   // For options and boundaries on the same line, all pushes are applied before options before pops.
   // (Valid pops will be moved to the start of the next line later.)
   var order1 = get_order(t1);
   var order2 = get_order(t2);

   if( order1 != order2 ) {
      return order1 < order2;
   } else {
      return t1.column < t2.column;
   }
}

// Applies bounadaries withing `inline_options_and_boundaries` to replace them with pop count
// instructions in the resulting array.
// Comments on lines with code are popped at the end of line.
// Warns about unpaired push and pop directives.
var function apply_boundaries(chstate, inline_options_and_boundaries) {
   var res = {};
   var res_last;

   // While iterating over inline options and boundaries track push
   // boundaries that were not popped yet plus the number of options
   // that would be on the option stack after applying all already
   // processed option table pushes and pops.
   var pushes = utils.Stack();
   var push_option_counts = utils.Stack();
   var option_count = 0;

   for( _, item in ipairs(inline_options_and_boundaries) ) {
      if( item.options == "push" ) {
         pushes->push(item);
         push_option_counts->push(option_count);
      } else if( item.options == "pop" ) {
         // Function boundaries are implicit, don't allow inline options to pop
         // them, don't allow function boundaries to pop inline option pushes either.
         // Inline options boundaries have end_column, function boundaries don't.
         if( ! pushes.top || (item.end_column && ! pushes.top.end_column) ) {
            // Inline option pop against nothing or a function push, mark as unpaired.
            chstate->warn_column_range("023", item);
         } else {
            if( ! item.end_column ) {
               // Function pop, remove any unpaired inline option pushes.
               while( pushes.top && pushes.top.end_column ) {
                  chstate->warn_column_range("022", pushes.top);
                  pushes->pop();
                  push_option_counts->pop();
               }
            }

            pushes->pop();
            var prev_option_count = push_option_counts->pop();
            var pop_count = option_count - prev_option_count;

            if( pop_count > 0 ) {
               // Place the pop instruction at the start of the next line so that getting option stack
               // for a line amounts to applying both the pop instruction and the option push for the line.
               var line = item.line + 1;

               // Collapse with a previous table if it's on the same line. It can only be a pop count table.
               if( res_last && res_last.line == line ) {
                  res_last.pop_count = res_last.pop_count + pop_count;
               } else {
                  res_last = {
                     line = line,
                     pop_count = pop_count
                  };

                  table.insert(res, res_last);
               }
            }

            // Update option stack size for this pop.
            option_count = prev_option_count;
         }
      } else {
         // Inline options table. Check if there is a pop count table for this line already.
         if( res_last && res_last.line == item.line ) {
            res_last.options = item.options;
            res_last.column = item.column;
            res_last.end_column = item.end_column;
         } else {
            res_last = item;
            table.insert(res, item);
         }

         if( chstate.code_lines[item.line] ) {
            // Inline comment on a line with some code, immediately pop it.
            res_last = {
               line = item.line + 1,
               pop_count = 1
            };
            table.insert(res, res_last);
         } else {
            option_count +=   1;
         }
      }
   }

   // Any remaining pushes are unpaired inline comments from the main chunk.
   while( pushes.top ) {
      chstate->warn_column_range("022", pushes->pop());
   }

   return res;
}

// Warns about invalid inline options.
// Sets `chstate.inline_options` to an array of tables that describe the way inline option tables
// are pushed onto and popped from the option stack when iterating over lines.
// Each table has field `line` that the array is sorted by and also ether or both sets of fields:
// * `pop_count` - refers to a number of option tables that should be popped from the stack before processing
//   warnings on this line.
// * `options`, `column`, `end_column` - refers to an option table that should be pushed onto the stack
//   before processing warnings on this line but after popping tables if `pop_count` is present.
function stage.run(chstate) {
   var inline_options_and_boundaries = parse_inline_comments(chstate);
   add_function_boundaries(inline_options_and_boundaries, chstate);
   table.sort(inline_options_and_boundaries, options_and_boundaries_comparator);
   chstate.inline_options = apply_boundaries(chstate, inline_options_and_boundaries);
}

return stage;
