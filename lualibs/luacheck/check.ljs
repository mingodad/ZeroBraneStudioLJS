var check_state = require ("luacheck.check_state");
var core_utils = require ("luacheck.core_utils");
var parse_inline_options = require ("luacheck.stages.parse_inline_options");
var parser = require ("luacheck.parser");
var stages = require ("luacheck.stages");
var utils = require ("luacheck.utils");

var inline_option_fields = utils.array_to_set(parse_inline_options.inline_option_fields);

var function validate_fields(tables, per_code_fields) {
   for( _, t in ipairs(tables) ) {
      var fields_set;

      if( per_code_fields ) {
         if( ! t.code ) {
            error("Warning has no code", 0);
         }

         var warning_info = stages.warnings[t.code];

         if( ! warning_info ) {
            error("Unknown issue code " .. t.code, 0);
         }

         fields_set = warning_info.fields_set;
      } else {
         fields_set = inline_option_fields;
      }

      for( field in pairs(t) ) {
         if( ! fields_set[field] ) {
            error("Unknown field " .. field .. " in " ..
               (per_code_fields && "issue with code " .. t.code || "inline option table"), 0);
         }
      }
   }
}

//- Checks source.
// Returns a table with results, with the following fields:
//    `events`: array of issues and inline option events (options, push, or pop).
//    `per_line_options`: map from line numbers to arrays of inline option events.
//    `line_lengths`: map from line numbers to line lengths.
//    `line_endings`: map from line numbers to "comment", "string", or `nil` base on
//                    whether the line ending is within a token.
// If `events` array contains a syntax error, the other fields are empty tables.
var function check(source) {
   var chstate = check_state.new(source);
   var ok, error_wrapper = utils.try(stages.run, chstate);
   var warnings, inline_options, line_lengths, line_endings;

   if( ok ) {
      warnings = chstate.warnings;
      core_utils.sort_by_location(warnings);
      inline_options = chstate.inline_options;
      line_lengths = chstate.line_lengths;
      line_endings = chstate.line_endings;
   } else {
      var err = error_wrapper.err;

      if( ! utils.is_instance(err, parser.SyntaxError) ) {
         error(error_wrapper, 0);
      }

      var syntax_error = {
         code = "011",
         line = err.line,
         column = chstate->offset_to_column(err.line, err.offset),
         end_column = chstate->offset_to_column(err.line, err.end_offset),
         msg = err.msg
      };

      if( err.prev_line ) {
         syntax_error.prev_line = err.prev_line;
         syntax_error.prev_column = chstate->offset_to_column(err.prev_line, err.prev_offset);
         syntax_error.prev_end_column = chstate->offset_to_column(err.prev_line, err.prev_end_offset);
      }

      warnings = {syntax_error};
      inline_options = {};
      line_lengths = {};
      line_endings = {};
   }

   validate_fields(warnings, true);
   validate_fields(inline_options);

   return {
      warnings = warnings,
      inline_options = inline_options,
      line_lengths = line_lengths,
      line_endings = line_endings
   };
}

return check;
