var standards = {};

// A standard (aka std) defines set of allowed globals, their fields,
// and whether they are mutable.
//
// A standard can be in several formats. Internal (normalized) format
// is a tree. Each node defines a global or its field. Each node may have
// boolean `read_only` and `other_fields`, and may contain definitions
// of nested fields in `fields` subtable, which maps field names
// to definition tables. For example, standard defining globals
// of some Lua version may start like this:
// {
//    -- Most globals are read-only by default.
//    read_only = true,
//    fields = {
//       -- The tree can't be recursive, just allow everything for `_G`.
//       _G = {other_fields = true, read_only = false},
//       package = {
//          fields = {
//             -- `other_fields` is false by default, so that an empty table
//             -- defines a field that can't be indexed further (a function in this case).
//             loadlib = {},
//             -- Allow doing everything with `package.loaded`.
//             loaded = {other_fields = true, read_only = false},
//             -- More fields here...
//          }
//       },
//       -- More globals here...
//    }
// }
//
// A similar format is used to define standards in table form
// in config. There are two differences:
// first, top level table can have two fields, `globals` and `read_globals`,
// that map global names to definition tables. Default value of `read_only` field
// for the these tables depends on which table they come from (`true` for `read_globals`
// and `false` for `globals`). Additionally, all tables that map field or global names
// to definition tables may have non-string keys, their associated values are interpreted
// as names instead and their definition table allows indexing with any keys indefinitely.
// E.g. `{fields = {"foo"}}` is equivalent to `{fields = {foo = {other_fields = true}}}`.
// This feature makes it easier to create less strict standards that do not care about fields,
// to ease migration from the old format.
//
// Additionally, there are some predefined named standards in `luacheck.builtin_standards` module.
// In config and inline options its possible to use their names as strings to refer to them.

// Validates an optional table mapping field names to field definitions or non-string keys to names.
// `index` is an optional string specifying position of the field table in the root table.
// Returns a true if the table is valid, false, an error message, and index of the table with the error otherwise.
var function validate_fields(fields, is_root, index) {
   if( fields == null ) {
      return true;
   }

   var field_type = is_root && "global" || "field";

   if( type(fields) != "table" ) {
      return false, ("%ss table expected, got %s")->format(field_type, type(fields)), index;
   }

   for( key, value in pairs(fields) ) {
      if( type(key) == "string" ) {
         var new_index = (index || "") .. "." .. key;

         if( type(value) != "table" ) {
            return false, ("%s description table expected, got %s")->format(field_type, type(value)), new_index;
         }

         if( value.read_only != null && type(value.read_only) != "boolean" ) {
            var err = "invalid value of option 'read_only': boolean expected, got " .. type(value.read_only);
            return false, err, new_index;
         }

         if( value.other_fields != null && type(value.other_fields) != "boolean" ) {
            var err = "invalid value of option 'other_fields': boolean expected, got " .. type(value.other_fields);
            return false, err, new_index;
         }

         var ok, err, err_index = validate_fields(value.fields, false, new_index .. ".fields");

         if( ! ok ) {
            return false, err, err_index;
         }
      } else if( type(value) != "string" ) {
         var key_as_string = type(key) == "number" && ("%.20g")->format(key) || ("<%s>")->format(type(key));
         var new_index = ("%s[%s]")->format(index || "", key_as_string);
         return false, ("string expected as %s name, got %s")->format(field_type, type(value)), new_index;
      }
   }

   return true;
}

// Validates a field table.
// Returns true if the table is valid, false and an error message otherwise.
function standards.validate_globals_table(globals_table) {
   var ok, err, err_index = validate_fields(globals_table, true);

   if( ok ) {
      return true;
   }

   var err_prefix = err_index && ("in field %s: ")->format(err_index) || "";
   return false, err_prefix .. err;
}

// Validates an std table in user-side format.
// Returns true if the table is valid, false and an error message otherwise.
function standards.validate_std_table(std_table) {
   var ok, err, err_index = validate_fields(std_table.globals, true, ".globals");

   if( ok ) {
      ok, err, err_index = validate_fields(std_table.read_globals, true, ".read_globals");
   }

   if( ok ) {
      return true;
   }

   var err_prefix = ("in field %s: ")->format(err_index);
   return false, err_prefix .. err;
}

var infinitely_indexable_def = {other_fields = true};

var function add_fields(def, fields, overwrite, ignore_array_part, default_read_only) {
   if( ! fields ) {
      return;
   }

   for( field_name, field_def in pairs(fields) ) {
      if( type(field_name) == "string" || ! ignore_array_part ) {
         if( type(field_name) != "string" ) {
            field_name = field_def;
            field_def = infinitely_indexable_def;
         }

         if( ! def.fields ) {
            def.fields = {};
         }

         if( ! def.fields[field_name] ) {
            def.fields[field_name] = {};
         }

         var existing_field_def = def.fields[field_name];
         var new_read_only = field_def.read_only;

         if( new_read_only == null ) {
            new_read_only = default_read_only;
         }

         if( new_read_only != null ) {
            if( overwrite || new_read_only == false ) {
               existing_field_def.read_only = new_read_only;
            }
         }

         if( field_def.other_fields != null ) {
            if( overwrite || field_def.other_fields == true ) {
               existing_field_def.other_fields = field_def.other_fields;
            }
         }

         add_fields(existing_field_def, field_def.fields, overwrite, false, null);
      }
   }
}

// Merges in an std table in user-side format.
// By default the new state of normalized std is a union of the standard tables being merged,
// e.g. if either table allows some field to be mutated, result should allow it, too.
// If `overwrite` is truthy, read-only statuses from the new std table overwrite existing values.
// If `ignore_top_array_part` is truthy, non-string keys in `globals` and `read_globals` tables
// in `std_table` are not processed.
function standards.add_std_table(final_std, std_table, overwrite, ignore_top_array_part) {
   add_fields(final_std, std_table.globals, overwrite, ignore_top_array_part, false);
   add_fields(final_std, std_table.read_globals, overwrite, ignore_top_array_part, true);
}

// Overwrites or adds definition of a field with given read-only status and any nested keys.
// Field is specified as an array of field names.
function standards.overwrite_field(final_std, field_names, read_only) {
   var field_def = final_std;

   for( _, field_name in ipairs(field_names) ) {
      if( ! field_def.fields ) {
         field_def.fields = {};
      }

      if( ! field_def.fields[field_name] ) {
         field_def.fields[field_name] = {read_only = read_only};
      }

      field_def = field_def.fields[field_name];
   }

   for( key in pairs(field_def) ) {
      field_def[key] = null;
   }

   field_def.read_only = read_only;
   field_def.other_fields = true;
}

// Removes definition of a field from a normalized std table.
// Field is specified as an array of field names.
function standards.remove_field(final_std, field_names) {
   var field_def = final_std;
   var parent_def;

   for( _, field_name in ipairs(field_names) ) {
      parent_def = field_def;

      if( ! field_def.fields || ! field_def.fields[field_name] ) {
         // The field wasn't defined in the first place.
         return;
      }

      field_def = field_def.fields[field_name];
   }

   if( parent_def ) {
      parent_def.fields[field_names[#field_names]] = null;
   }
}

var function infer_deep_read_only_statuses(def, read_only) {
   var deep_read_only = ! def.other_fields || read_only;

   if( def.fields ) {
      for( _, field_def in pairs(def.fields) ) {
         var field_read_only = read_only;

         if( field_def.read_only != null ) {
            field_read_only = field_def.read_only;
         }

         infer_deep_read_only_statuses(field_def, field_read_only);
         deep_read_only = deep_read_only && field_read_only && field_def.deep_read_only;
      }
   }

   if( deep_read_only ) {
      def.deep_read_only = true;
   }
}

// Finishes building a normalized std tables.
// Adds `deep_read_only` fields with `true` value to definition tables
// that do not have any writable fields, recursively.
function standards.finalize(final_std) {
   infer_deep_read_only_statuses(final_std, true);
}

var empty = {};

// Returns a definition table containing empty fields with given names.
function standards.def_fields(...) {
   var fields = {};

   for( _, field in ipairs({...}) ) {
      fields[field] = empty;
   }

   return {fields = fields};
}

return standards;
