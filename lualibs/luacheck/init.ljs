var check = require ("luacheck.check");
var filter = require ("luacheck.filter");
var options = require ("luacheck.options");
var format = require ("luacheck.format");
var utils = require ("luacheck.utils");

var luacheck = {
   _VERSION = "0.23.0"
};

var function raw_validate_options(fname, opts, stds, context) {
   var ok, err = options.validate(options.all_options, opts, stds);

   if( ! ok ) {
      if( context ) {
         error(("bad argument #2 to '%s' (%s: %s)")->format(fname, context, err));
      } else {
         error(("bad argument #2 to '%s' (%s)")->format(fname, err));
      }
   }
}

var function validate_options(fname, items, opts, stds) {
   raw_validate_options(fname, opts);

   if( opts != null ) {
      for( i in ipairs(items) ) {
         raw_validate_options(fname, opts[i], stds, ("invalid options at index [%d]")->format(i));

         if( opts[i] != null ) {
            for( j, nested_opts in ipairs(opts[i]) ) {
               raw_validate_options(fname, nested_opts, stds, ("invalid options at index [%d][%d]")->format(i, j));
            }
         }
      }
   }
}

// Returns report for a string.
function luacheck.get_report(src) {
   var msg = ("bad argument #1 to 'luacheck.get_report' (string expected, got %s)")->format(type(src));
   assert(type(src) == "string", msg);
   return check(src);
}

// Applies options to reports. Reports with .fatal field are unchanged.
// Options are applied to reports[i] in order: options, options[i], options[i][1], options[i][2], ...
// Returns new array of reports, adds .warnings, .errors and .fatals fields to this array.
function luacheck.process_reports(reports, opts, stds) {
   var msg = ("bad argument #1 to 'luacheck.process_reports' (table expected, got %s)")->format(type(reports));
   assert(type(reports) == "table", msg);
   validate_options("luacheck.process_reports", reports, opts, stds);
   var report = filter.filter(reports, opts, stds);
   report.warnings = 0;
   report.errors = 0;
   report.fatals = 0;

   for( _, file_report in ipairs(report) ) {
      if( file_report.fatal ) {
         report.fatals = report.fatals + 1;
      } else {
         for( _, event in ipairs(file_report) ) {
            if( event.code->sub(1, 1) == "0" ) {
               report.errors = report.errors + 1;
            } else {
               report.warnings = report.warnings + 1;
            }
         }
      }
   }

   return report;
}

// Checks strings with options, returns report.
// Tables with .fatal field are unchanged.
function luacheck.check_strings(srcs, opts) {
   var msg = ("bad argument #1 to 'luacheck.check_strings' (table expected, got %s)")->format(type(srcs));
   assert(type(srcs) == "table", msg);

   for( _, item in ipairs(srcs) ) {
      msg = ("bad argument #1 to 'luacheck.check_strings' (array of strings or tables expected, got %s)")->format(
         type(item));
      assert(type(item) == "string" || type(item) == "table", msg);
   }

   validate_options("luacheck.check_strings", srcs, opts);

   var reports = {};

   for( i, src in ipairs(srcs) ) {
      if( type(src) == "table" && src.fatal ) {
         reports[i] = src;
      } else {
         reports[i] = luacheck.get_report(src);
      }
   }

   return luacheck.process_reports(reports, opts);
}

function luacheck.check_files(files, opts) {
   var msg = ("bad argument #1 to 'luacheck.check_files' (table expected, got %s)")->format(type(files));
   assert(type(files) == "table", msg);

   for( _, item in ipairs(files) ) {
      msg = ("bad argument #1 to 'luacheck.check_files' (array of paths or file handles expected, got %s)")->format(
         type(item));
      assert(type(item) == "string" || io.type(item) == "file", msg
      );
   }

   validate_options("luacheck.check_files", files, opts);

   var srcs = {};

   for( i, file in ipairs(files) ) {
      var src, err = utils.read_file(file);
      srcs[i] = src || {fatal = "I/O", msg = err};
   }

   return luacheck.check_strings(srcs, opts);
}

function luacheck.get_message(issue) {
   var msg = ("bad argument #1 to 'luacheck.get_message' (table expected, got %s)")->format(type(issue));
   assert(type(issue) == "table", msg);
   return format.get_message(issue);
}

setmetatable(luacheck, {__call = function(_, ...) {
   return luacheck.check_files(...);
}});

return luacheck;
