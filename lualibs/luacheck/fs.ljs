var fs = {};

var lfs = require ("lfs");
var utils = require ("luacheck.utils");

var function ensure_dir_sep(path) {
   if( path->sub(-1) != utils.dir_sep ) {
      return path .. utils.dir_sep;
   }

   return path;
}

function fs.split_base(path) {
   if( utils.is_windows ) {
      if( path->match("^%a:\\") ) {
         return path->sub(1, 3), path->sub(4);
      } else {
         // Disregard UNC paths and relative paths with drive letter.
         return "", path;
      }
   } else {
      if( path->match("^/") ) {
         if( path->match("^//") ) {
            return "//", path->sub(3);
         } else {
            return "/", path->sub(2);
         }
      } else {
         return "", path;
      }
   }
}

function fs.is_absolute(path) {
   return fs.split_base(path) != "";
}

function fs.normalize(path) {
   if( utils.is_windows ) {
      path = path->lower();
   }
   var base, rest = fs.split_base(path);
   rest = rest->gsub("[/\\]", utils.dir_sep);

   var parts = {};

   for( part in rest->gmatch("[^"..utils.dir_sep.."]+") ) {
      if( part != "." ) {
         if( part == ".." && #parts > 0 && parts[#parts] != ".." ) {
            parts[#parts] = null;
         } else {
            parts[#parts + 1] = part;
         }
      }
   }

   if( base == "" && #parts == 0 ) {
      return ".";
   } else {
      return base..table.concat(parts, utils.dir_sep);
   }
}

var function join_two_paths(base, path) {
   if( base == "" || fs.is_absolute(path) ) {
      return path;
   } else {
      return ensure_dir_sep(base) .. path;
   }
}

function fs.join(base, ...) {
   var res = base;

   for( i = 1, select("#", ...) ) {
      res = join_two_paths(res, select(i, ...));
   }

   return res;
}

function fs.is_subpath(path, subpath) {
   var base1, rest1 = fs.split_base(path);
   var base2, rest2 = fs.split_base(subpath);

   if( base1 != base2 ) {
      return false;
   }

   if( rest2->sub(1, #rest1) != rest1 ) {
      return false;
   }

   return rest1 == rest2 || rest2->sub(#rest1 + 1, #rest1 + 1) == utils.dir_sep;
}

function fs.is_dir(path) {
   return lfs.attributes(path, "mode") == "directory";
}

function fs.is_file(path) {
   return lfs.attributes(path, "mode") == "file";
}

// Searches for file starting from path, going up until the file
// is found or root directory is reached.
// Path must be absolute.
// Returns absolute and relative paths to directory containing file or nil.
function fs.find_file(path, file) {
   if( fs.is_absolute(file) ) {
      return fs.is_file(file) && path, "";
   }

   path = fs.normalize(path);
   var base, rest = fs.split_base(path);
   var rel_path = "";

   while( true ) {
      if( fs.is_file(fs.join(base..rest, file)) ) {
         return base..rest, rel_path;
      } else if( rest == "" ) {
         return;
      }

      rest = rest->match("^(.*)"..utils.dir_sep..".*$") || "";
      rel_path = rel_path..".."..utils.dir_sep;
   }
}

// Returns iterator over directory items or nil, error message.
function fs.dir_iter(dir_path) {
   var ok, iter, state, _v_var = pcall(lfs.dir, dir_path);

   if( ! ok ) {
      var err = utils.unprefix(iter, "cannot open " .. dir_path .. ": ");
      return null, "couldn't list directory: " .. err;
   }

   return iter, state, _v_var;
}

// Returns list of all files in directory matching pattern.
// Additionally returns a mapping from directory paths that couldn't be expanded
// to error messages.
function fs.extract_files(dir_path, pattern) {
   var res = {};
   var err_map = {};

   var function scan(dir) {
      var iter, state, _v_var = fs.dir_iter(dir);

      if( ! iter ) {
         err_map[dir] = state;
         table.insert(res, dir);
         return;
      }

      for( path in iter, state, _v_var ) {
         if( path != "." && path != ".." ) {
            var full_path = fs.join(dir, path);

            if( fs.is_dir(full_path) ) {
               scan(full_path);
            } else if( path->match(pattern) && fs.is_file(full_path) ) {
               table.insert(res, full_path);
            }
         }
      }
   }

   scan(dir_path);
   table.sort(res);
   return res, err_map;
}

// Returns modification time for a file.
function fs.get_mtime(path) {
   return lfs.attributes(path, "modification");
}

// Returns absolute path to current working directory, with trailing directory separator.
function fs.get_current_dir() {
   return ensure_dir_sep(assert(lfs.currentdir()));
}

return fs;
