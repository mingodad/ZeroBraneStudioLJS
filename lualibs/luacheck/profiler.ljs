// Require luasocket only when needed.
var socket;

var profiler = {};

var metrics = {
   {name = "Wall", get = function() { return socket.gettime(); }},
   {name = "CPU", get = os.clock},
   {name = "Memory", get = function() { return collectgarbage("count"); }}
};

var functions = {
   {name = "load", module = "cache"},
   {name = "update", module = "cache"},
   {name = "decode", module = "decoder"},
   {name = "parse", module = "parser"},
   {name = "run", module = "stages.unwrap_parens"},
   {name = "run", module = "stages.parse_inline_options"},
   {name = "run", module = "stages.linearize"},
   {name = "run", module = "stages.name_functions"},
   {name = "run", module = "stages.resolve_locals"},
   {name = "run", module = "stages.detect_bad_whitespace"},
   {name = "run", module = "stages.detect_cyclomatic_complexity"},
   {name = "run", module = "stages.detect_empty_blocks"},
   {name = "run", module = "stages.detect_empty_statements"},
   {name = "run", module = "stages.detect_globals"},
   {name = "run", module = "stages.detect_reversed_fornum_loops"},
   {name = "run", module = "stages.detect_unbalanced_assignments"},
   {name = "run", module = "stages.detect_uninit_accesses"},
   {name = "run", module = "stages.detect_unreachable_code"},
   {name = "run", module = "stages.detect_unused_fields"},
   {name = "run", module = "stages.detect_unused_locals"},
   {name = "filter", module = "filter"},
   {name = "normalize", module = "options"}
};

var stats = {};
var start_values = {};

var function start_phase(name) {
   for( _, metric in ipairs(metrics) ) {
      start_values[metric][name] = metric.get();
   }
}

var function stop_phase(name) {
   for( _, metric in ipairs(metrics) ) {
      var increment = metric.get() - start_values[metric][name];
      stats[metric][name] = (stats[metric][name] || 0) + increment;
   }
}

var phase_stack = {};

var function push_phase(name) {
   var prev_name = phase_stack[#phase_stack];

   if( prev_name ) {
      stop_phase(prev_name);
   }

   table.insert(phase_stack, name);
   start_phase(name);
}

var function pop_phase(name) {
   assert(name == table.remove(phase_stack));
   stop_phase(name);
   var prev_name = phase_stack[#phase_stack];

   if( prev_name ) {
      start_phase(prev_name);
   }
}

var function continue_wrapper(name, ...) {
   pop_phase(name);
   return ...;
}

var function wrap(fn, name) {
   return function(...) {
      push_phase(name);
      return continue_wrapper(name, fn(...));
   };
}

var function patch(fn) {
   var mod = require("luacheck." .. fn.module);
   var orig = mod[fn.name];
   var new = wrap(orig, fn.module .. "." .. fn.name);
   mod[fn.name] = new;
}

function profiler.init() {
   socket = require ("socket");
   collectgarbage("stop");

   for( _, metric in ipairs(metrics) ) {
      stats[metric] = {};
      start_values[metric] = {};
   }

   for( _, fn in ipairs(functions) ) {
      patch(fn);
   }

   push_phase("other");
}

function profiler.report() {
   pop_phase("other");

   for( _, metric in ipairs(metrics) ) {
      var names = {};
      var total = 0;

      for( name, value in pairs(stats[metric]) ) {
         table.insert(names, name);
         total +=   value;
      }

      table.sort(names, function(name1, name2) {
         var stats1 = stats[metric][name1];
         var stats2 = stats[metric][name2];

         if( stats1 != stats2 ) {
            return stats1 > stats2;
         } else {
            return name1 < name2;
         }
      });

      print(metric.name);
      print();

      for( _, name in ipairs(names) ) {
         print(("%s - %f (%f%%)")->format(name, stats[metric][name], stats[metric][name] / total * 100));
      }

      print(("Total - %f")->format(total));
      print();
   }
}

return profiler;
