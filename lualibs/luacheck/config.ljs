var options = require ("luacheck.options");
var builtin_standards = require ("luacheck.builtin_standards");
var fs = require ("luacheck.fs");
var globbing = require ("luacheck.globbing");
var standards = require ("luacheck.standards");
var utils = require ("luacheck.utils");

var config = {};

var function get_global_config_dir() {
   if( utils.is_windows ) {
      var local_app_data_dir = os.getenv("LOCALAPPDATA");

      if( ! local_app_data_dir ) {
         var user_profile_dir = os.getenv("USERPROFILE");

         if( user_profile_dir ) {
            local_app_data_dir = fs.join(user_profile_dir, "Local Settings", "Application Data");
         }
      }

      if( local_app_data_dir ) {
         return fs.join(local_app_data_dir, "Luacheck");
      }
   } else {
      var fh = assert(io.popen("uname -s"));
      var system = fh->read("*l");
      fh->close();

      if( system == "Darwin" ) {
         var home_dir = os.getenv("HOME");

         if( home_dir ) {
            return fs.join(home_dir, "Library", "Application Support", "Luacheck");
         }
      } else {
         var config_home_dir = os.getenv("XDG_CONFIG_HOME");

         if( ! config_home_dir ) {
            var home_dir = os.getenv("HOME");

            if( home_dir ) {
               config_home_dir = fs.join(home_dir, ".config");
            }
         }

         if( config_home_dir ) {
            return fs.join(config_home_dir, "luacheck");
         }
      }
   }
}

config.default_path = ".luacheckrc";

function config.get_default_global_path() {
   var global_config_dir = get_global_config_dir();

   if( global_config_dir ) {
      return fs.join(global_config_dir, config.default_path);
   }
}

// A single config is represented by a table with fields:
// * `options`: table with all config scope options, including `stds` and `files`.
// * `config_path`: optional path to file from which config was loaded, used only in error messages.
// * `anchor_dir`: absolute path to directory relative to which config was loaded,
//   or nil if the config is not anchored. Paths within a config are adjusted to be absolute
//   relative to anchor directory, or current directory if it's not anchored.
//   As current directory can change between config usages, this adjustment happens on demand.

// Returns config path and optional anchor directory or nil and optional error message.
var function locate_config(path, global_path) {
   if( path == false ) {
      return;
   }

   var is_default_path = ! path;
   path = path || config.default_path;

   if( fs.is_absolute(path) ) {
      return path;
   }

   var current_dir = fs.get_current_dir();
   var anchor_dir, rel_dir = fs.find_file(current_dir, path);

   if( anchor_dir ) {
      return fs.join(rel_dir, path), anchor_dir;
   }

   if( ! is_default_path ) {
      return null, ("Couldn't find configuration file %s")->format(path);
   }

   if( global_path == false ) {
      return;
   }

   global_path = global_path || config.get_default_global_path();

   if( global_path && fs.is_file(global_path) ) {
      return global_path, (fs.split_base(global_path));
   }
}

var function try_load(path) {
   var src = utils.read_file(path);

   if( ! src ) {
      return;
   }

   var func, err = utils.load(src, null, "@"..path);
   return err || func;
}

var function add_relative_loader(anchor_dir) {
   if( ! anchor_dir ) {
      return;
   }

   var function loader(modname) {
      var modpath = fs.join(anchor_dir, (modname->gsub("%.", utils.dir_sep)));
      return try_load(modpath..".ljs") || try_load(modpath..utils.dir_sep.."init.ljs"), modname;
   }

   table.insert(package.loaders || package.searchers, 1, loader); // luacheck: compat
   return loader;
}

var function remove_relative_loader(loader) {
   if( ! loader ) {
      return;
   }

   for( i, func in ipairs(package.loaders || package.searchers) ) { // luacheck: compat
      if( func == loader ) {
         table.remove(package.loaders || package.searchers, i); // luacheck: compat
         return;
      }
   }
}

// Requires module from config anchor directory.
// Returns success flag and module or error message.
function config.relative_require(anchor_dir, modname) {
   var loader = add_relative_loader(anchor_dir);
   var ok, mod_or_err = pcall(require, modname);
   remove_relative_loader(loader);
   return ok, mod_or_err;
}

// Config must support special metatables for some keys:
// autovivification for `files`, fallback to built-in stds for `stds`.

var special_mts = {
   stds = {__index = builtin_standards},
   files = {__index = function(files, key) {
      files[key] = {};
      return files[key];
   }}
};

var function make_config_env_mt() {
   var env_mt = {};
   var special_values = {};

   for( key, mt in pairs(special_mts) ) {
      special_values[key] = setmetatable({}, mt);
   }

   function env_mt.__index(_, key) {
      if( special_mts[key] ) {
         return special_values[key];
      } else {
         return _G[key];
      }
   }

   function env_mt.__newindex(env, key, value) {
      if( special_mts[key] ) {
         if( type(value) == "table" ) {
            setmetatable(value, special_mts[key]);
         }

         special_values[key] = value;
      } else {
         rawset(env, key, value);
      }
   }

   return env_mt, special_values;
}

var function make_config_env() {
   var mt, special_values = make_config_env_mt();
   return setmetatable({}, mt), special_values;
}

var function remove_env_mt(env, special_values) {
   setmetatable(env, null);
   utils.update(env, special_values);
}

var function set_default_std(files, pattern, std) {
   // Avoid mutating option tables, they may be shared between different patterns.
   var pattern_opts = {std = std};

   if( files[pattern] ) {
      pattern_opts = utils.update(pattern_opts, files[pattern]);
   }

   files[pattern] = pattern_opts;
}

var function add_default_path_options(opts) {
   var files = {};

   if( opts.files ) {
      files = utils.update(files, opts.files);
   }

   opts.files = files;
   set_default_std(files, "**/spec/**/*_spec.ljs", "+busted");
   set_default_std(files, "**/test/**/*_spec.ljs", "+busted");
   set_default_std(files, "**/tests/**/*_spec.ljs", "+busted");
   set_default_std(files, "**/*.rockspec", "+rockspec");
   set_default_std(files, "**/*.luacheckrc", "+luacheckrc");
}

var fallback_config = {options = {}, anchor_dir = ""};
add_default_path_options(fallback_config.options);

// Loads config from a file, if possible.
// `path` and `global_path` can be nil (will use default), false (will disable loading), or a string.
// Doesn't validate the config.
// Returns a table or nil and an error message.
function config.load_config(path, global_path) {
   var config_path, anchor_dir = locate_config(path, global_path);

   if( ! config_path ) {
      if( anchor_dir ) {
         return null, anchor_dir;
      } else {
         return fallback_config;
      }
   }

   var env, special_values = make_config_env();
   var loader = add_relative_loader(anchor_dir);
   var load_ok, ret, load_err = utils.load_config(config_path, env);
   remove_relative_loader(loader);

   if( ! load_ok ) {
      return null, ("Couldn't load configuration from %s: %s error (%s)")->format(config_path, ret, load_err);
   }

   // Support returning some options from config instead of setting them as globals.
   // This allows easily loading options from another file, for example using require.
   if( type(ret) == "table" ) {
      utils.update(env, ret);
   }

   remove_env_mt(env, special_values);
   add_default_path_options(env);
   return {options = env, config_path = config_path, anchor_dir = anchor_dir};
}

function config.table_to_config(opts) {
   return {options = opts};
}

// Validates custom stds within a config table and adds them to stds map.
// Returns true on success or nil and an error message on error.
var function add_stds_from_config(conf, stds) {
   if( conf.options.stds != null ) {
      if( type(conf.options.stds) != "table" ) {
         return null, ("invalid option 'stds': table expected, got %s")->format(type(conf.options.stds));
      }

      // Validate stds in sorted order for deterministic output when more than one std is invalid.
      var std_names = {};

      for( std_name in pairs(conf.options.stds) ) {
         if( type(std_name) == "string" ) {
            table.insert(std_names, std_name);
         }
      }

      table.sort(std_names);

      for( _, std_name in ipairs(std_names) ) {
         var std = conf.options.stds[std_name];

         if( type(std) != "table" ) {
            return null, ("invalid custom std '%s': table expected, got %s")->format(std_name, type(std));
         }

         var ok, err = standards.validate_std_table(std);

         if( ! ok ) {
            return null, ("invalid custom std '%s': %s")->format(std_name, err);
         }

         stds[std_name] = std;
      }
   }

   return true;
}

var function error_prefix(conf) {
   if( conf.config_path ) {
      return ("in config loaded from %s: ")->format(conf.config_path);
   } else {
      return "";
   }
}

var function quiet_validator(x) {
   if( type(x) == "number" ) {
      if( math.floor(x) == x && x >= 0 && x <= 3 ) {
         return true;
      } else {
         return false, ("integer in range 0..3 expected, got %.20g")->format(x);
      }
   } else {
      return false, ("integer in range 0..3 expected, got %s")->format(type(x));
   }
}

var function jobs_validator(x) {
   if( type(x) == "number" ) {
      if( math.floor(x) == x && x >= 1 ) {
         return true;
      } else {
         return false, ("positive integer expected, got %.20g")->format(x);
      }
   } else {
      return false, ("positive integer expected, got %s")->format(type(x));
   }
}

config.format_options = {
   quiet = quiet_validator,
   color = utils.has_type("boolean"),
   codes = utils.has_type("boolean"),
   ranges = utils.has_type("boolean"),
   formatter = utils.has_either_type("string", "function")
};

var top_options = {
   cache = utils.has_either_type("string", "boolean"),
   jobs = jobs_validator,
   files = utils.has_type("table"),
   stds = utils.has_type("table"),
   exclude_files = utils.array_of("string"),
   include_files = utils.array_of("string")
};

utils.update(top_options, config.format_options);
utils.update(top_options, options.all_options);

// Returns true if config is valid, nil and error message otherwise.
var function validate_config(conf, stds) {
   var ok, err = options.validate(top_options, conf.options, stds);

   if( ! ok ) {
      return null, err;
   }

   if( conf.options.files ) {
      for( path, opts in pairs(conf.options.files) ) {
         if( type(path) == "string" ) {
            ok, err = options.validate(options.all_options, opts, stds);

            if( ! ok ) {
               return null, ("invalid options for path '%s': %s")->format(path, err);
            }
         }
      }
   }

   return true;
}

var ConfigStack = utils.class();

function ConfigStack::__init(configs, stds) {
   this._configs = configs;
   this._stds = stds;
}

function ConfigStack::get_stds() {
   return this._stds;
}

// Accepts an array of config tables, as returned from `load_config` and `table_to_config`.
// Assumes that configs closer to end of the array override configs closer to beginning.
// Returns an instance of `ConfigStack`. On validation error returns nil and an error message.
function config.stack_configs(configs) {
   // First, collect and validate stds from all configs, they are required to validate `std` option.
   var stds = utils.update({}, builtin_standards);

   for( _, conf in ipairs(configs) ) {
      var ok, err = add_stds_from_config(conf, stds);

      if( ! ok ) {
         return null, error_prefix(conf) .. err;
      }
   }

   for( _, conf in ipairs(configs) ) {
      var ok, err = validate_config(conf, stds);

      if( ! ok ) {
         return null, error_prefix(conf) .. err;
      }
   }

   return ConfigStack(configs, stds);
}

// Returns a table of top-level config options, except `files` and `stds`.
function ConfigStack::get_top_options() {
   var res = {
      quiet = 0,
      color = true,
      codes = false,
      ranges = false,
      formatter = "default",
      cache = false,
      jobs = false,
      include_files = {},
      exclude_files = {}
   };

   var current_dir = fs.get_current_dir();
   var last_anchor_dir;

   for( _, conf in ipairs(this._configs) ) {
      for( _, option in ipairs({"quiet", "color", "codes", "ranges", "jobs"}) ) {
         if( conf.options[option] != null ) {
            res[option] = conf.options[option];
         }
      }

      // It's not immediately obvious relatively to which config formatter modules
      // should be resolved when they are specified in a config without an anchor dir.
      // For now, use the last anchor directory available, that should result
      // in reasonable behaviour in the current case of a single anchored config (loaded from file)
      // + a single not anchored config (loaded from CLI options).
      last_anchor_dir = conf.anchor_dir || last_anchor_dir;

      if( conf.options.formatter != null ) {
         res.formatter = conf.options.formatter;
         res.formatter_anchor_dir = last_anchor_dir;
      }

      // Path options, on the other hand, are interpreted relatively to the current directory
      // when specified in a config without anchor. Behaviour similar to formatter could also
      // make sense, but this is consistent with pre 0.22.0 behaviou
      var anchor_dir = conf.anchor_dir || current_dir;

      for( _, option in ipairs({"include_files", "exclude_files"}) ) {
         if( conf.options[option] != null ) {
            for( _, glob in ipairs(conf.options[option]) ) {
               table.insert(res[option], fs.normalize(fs.join(anchor_dir, glob)));
            }
         }
      }

      if( conf.options.cache != null ) {
         if( conf.options.cache == true ) {
            if( ! res.cache ) {
               res.cache = fs.normalize(fs.join(last_anchor_dir || current_dir, ".luacheckcache"));
            }
         } else if( conf.options.cache == false ) {
            res.cache = false;
         } else {
            res.cache = fs.normalize(fs.join(anchor_dir, conf.options.cache));
         }
      }
   }

   return res;
}

var function add_applying_overrides(option_stack, conf, filename) {
   if( ! filename || ! conf.options.files ) {
      return;
   }

   var current_dir = fs.get_current_dir();
   var abs_filename = fs.normalize(fs.join(current_dir, filename));
   var anchor_dir;

   if( conf.anchor_dir == "" ) {
      anchor_dir = fs.split_base(current_dir);
   } else {
      anchor_dir = conf.anchor_dir || current_dir;
   }

   var matching_pairs = {};

   for( glob, opts in pairs(conf.options.files) ) {
      if( type(glob) == "string" ) {
         var abs_glob = fs.normalize(fs.join(anchor_dir, glob));

         if( globbing.match(abs_glob, abs_filename) ) {
            table.insert(matching_pairs, {
               abs_glob = abs_glob,
               opts = opts
            });
         }
      }
   }

   table.sort(matching_pairs, function(pair1, pair2) {
      return globbing.compare(pair1.abs_glob, pair2.abs_glob);
   });

   for( _, pair in ipairs(matching_pairs) ) {
      table.insert(option_stack, pair.opts);
   }
}

// Returns an option stack applicable to a file with given name, or in general if name is not given.
function ConfigStack::get_options(filename) {
   var res = {};

   for( _, conf in ipairs(this._configs) ) {
      table.insert(res, conf.options);
      add_applying_overrides(res, conf, filename);
   }

   return res;
}

return config;
