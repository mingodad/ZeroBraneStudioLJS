var utils = require ("luacheck.utils");

var multithreading = {};

var lanes_ok, lanes = pcall(require, "lanes");
lanes_ok = lanes_ok && pcall(lanes.configure);
multithreading.has_lanes = lanes_ok;
multithreading.lanes = lanes;
multithreading.default_jobs = 1;

if( ! lanes_ok ) {
   return multithreading;
}

var cpu_number_detection_commands = {};

if( utils.is_windows ) {
   cpu_number_detection_commands[1] = "echo %NUMBER_OF_PROCESSORS%";
} else {
   cpu_number_detection_commands[1] = "getconf _NPROCESSORS_ONLN 2>&1";
   cpu_number_detection_commands[2] = "sysctl -n hw.ncpu 2>&1";
   cpu_number_detection_commands[3] = "psrinfo -p 2>&1";
}

for( _, command in ipairs(cpu_number_detection_commands) ) {
   var handler = io.popen(command);

   if( handler ) {
      var output = handler->read("*a");
      handler->close();

      if( output ) {
         var cpu_number = tonumber(utils.strip(output));

         if( cpu_number ) {
            multithreading.default_jobs = math.floor(math.max(cpu_number, 1));
            break;
         }
      }
   }
}

// Reads pairs {key, arg} from given linda slot until it gets nil as arg.
// Returns table with pairs [key] = func(arg).
var function worker_task(linda, input_slot, func) {
   var results = {};

   while( true ) {
      var _, pair = linda->receive(null, input_slot);
      var key, arg = pair[1], pair[2];

      if( arg == null ) {
         return results;
      }

      results[key] = func(arg);
   }
}

var function protected_worker_task(...) {
   return true, utils.try(worker_task, ...);
}

var worker_gen = lanes.gen("*", protected_worker_task);

// Maps func over array, performing at most jobs calls in parallel.
function multithreading.pmap(func, array, jobs) {
   jobs = jobs || multithreading.default_jobs;
   jobs = math.min(jobs, #array);

   if( jobs < 2 ) {
      return utils.map(func, array);
   }

   var workers = {};
   var linda = lanes.linda();

   for( i = 1, jobs ) {
      workers[i] = worker_gen(linda, 0, func);
   }

   for( i, item in ipairs(array) ) {
      linda->send(null, 0, {i, item});
   }

   for( _ = 1, jobs ) {
      linda->send(null, 0, {});
   }

   var results = {};

   for( _, worker in ipairs(workers) ) {
      var _, ok, worker_results = assert(worker->join());

      if( ok ) {
         utils.update(results, worker_results);
      } else {
         error(worker_results, 0);
      }
   }

   return results;
}

return multithreading;
