var decoder = require ("luacheck.decoder");
var utils = require ("luacheck.utils");

var core_utils = {};

// Attempts to evaluate a node as a Lua value, without resolving locals.
// Returns Lua value and its string representation on success, nothing on failure.
function core_utils.eval_const_node(node) {
   if( node.tag == "True" ) {
      return true, "true";
   } else if( node.tag == "False" ) {
      return false, "false";
   } else if( node.tag == "String" ) {
      var chars = decoder.decode(node[1]);
      return node[1], chars->get_printable_substring(1, chars->get_length());
   } else {
      var is_negative;

      if( node.tag == "Op" && node[1] == "unm" ) {
         is_negative = true;
         node = node[2];
      }

      if( node.tag != "Number" ) {
         return;
      }

      var str = node[1];

      if( str->find("[iIuUlL]") ) {
         // Ignore LuaJIT cdata literals.
         return;
      }

      // On Lua 5.3 convert to float to get same results as on Lua 5.1 and 5.2.
      if( _VERSION == "Lua 5.3" && ! str->find("[%.eEpP]") ) {
         str = str .. ".0";
      }

      var number = tonumber(str);

      if( ! number ) {
         return;
      }

      if( is_negative ) {
         number = -number;
      }

      if( number == number && number < 1/0 && number > -1/0 ) {
         return number, (is_negative && "-" || "") .. node[1];
      }
   }
}

var statement_containing_tags = utils.array_to_set({"Do", "While", "Repeat", "Fornum", "Forin", "If"});

// `items` is an array of nodes or nested item arrays.
var function scan_for_statements(chstate, items, tags, callback, ...) {
   for( _, item in ipairs(items) ) {
      if( tags[item.tag] ) {
         callback(chstate, item, ...);
      }

      if( ! item.tag || statement_containing_tags[item.tag] ) {
         scan_for_statements(chstate, item, tags, callback, ...);
      }
   }
}

// Calls `callback(chstate, node, ...)` for each statement node within AST with tag in given array.
function core_utils.each_statement(chstate, tags_array, callback, ...) {
   var tags = utils.array_to_set(tags_array);

   for( _, line in ipairs(chstate.lines) ) {
      scan_for_statements(chstate, line.node[2], tags, callback, ...);
   }
}

var function location_comparator(warning1, warning2) {
   if( warning1.line != warning2.line ) {
      return warning1.line < warning2.line;
   } else if( warning1.column != warning2.column ) {
      return warning1.column < warning2.column;
   } else {
      return warning1.code < warning2.code;
   }
}

// Sorts an array of warnings by location information as provided in `line` and `column` fields.
function core_utils.sort_by_location(warnings) {
   table.sort(warnings, location_comparator);
}

return core_utils;
