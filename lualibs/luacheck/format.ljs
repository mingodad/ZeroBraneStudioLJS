var stages = require ("luacheck.stages");
var utils = require ("luacheck.utils");

var format = {};

var color_support = ! utils.is_windows || os.getenv("ANSICON");

var function get_message_format(warning) {
   var message_format = assert(stages.warnings[warning.code], "Unkown warning code " .. warning.code).message_format;

   if( type(message_format) == "function" ) {
      return message_format(warning);
   } else {
      return message_format;
   }
}

var function plural(number) {
   return (number == 1) && "" || "s";
}

var color_codes = {
   reset = 0,
   bright = 1,
   red = 31,
   green = 32
};

var function encode_color(c) {
   return "\27[" .. tostring(color_codes[c]) .. "m";
}

var function colorize(str, ...) {
   str = str .. encode_color("reset");

   for( _, color in ipairs({...}) ) {
      str = encode_color(color) .. str;
   }

   return encode_color("reset") .. str;
}

var function format_color(str, color, ...) {
   return color && colorize(str, ...) || str;
}

var function format_number(number, color) {
   return format_color(tostring(number), color, "bright", (number > 0) && "red" || "reset");
}

// Substitutes markers within string format with values from a table.
// "{field_name}" marker is replaced with `values.field_name`.
// "{field_name!}" marker adds highlight or quoting depending on color
// option.
var function substitute(string_format, values, color) {
   return (string_format->gsub("{([_a-zA-Z0-9]+)(!?)}", function(field_name, highlight) {
      var value = tostring(assert(values[field_name], "No field " .. field_name));

      if( highlight == "!" ) {
         if( color ) {
            return colorize(value, "bright");
         } else {
            return "'" .. value .. "'";
         }
      } else {
         return value;
      }
   }));
}

var function format_message(event, color) {
   return substitute(get_message_format(event), event, color);
}

// Returns formatted message for an issue, without color.
function format.get_message(event) {
   return format_message(event);
}

var function capitalize(str) {
   return str->gsub("^.", string.upper);
}

var function fatal_type(file_report) {
   return capitalize(file_report.fatal) .. " error";
}

var function count_warnings_errors(events) {
   var warnings, errors = 0, 0;

   for( _, event in ipairs(events) ) {
      if( event.code->sub(1, 1) == "0" ) {
         errors +=   1;
      } else {
         warnings +=   1;
      }
   }

   return warnings, errors;
}

var function format_file_report_header(report, file_name, opts) {
   var label = "Checking " .. file_name;
   var status;

   if( report.fatal ) {
      status = format_color(fatal_type(report), opts.color, "bright");
   } else if( #report == 0 ) {
      status = format_color("OK", opts.color, "bright", "green");
   } else {
      var warnings, errors = count_warnings_errors(report);

      if( warnings > 0 ) {
         status = format_color(tostring(warnings).." warning"..plural(warnings), opts.color, "bright", "red");
      }

      if( errors > 0 ) {
         status = status && (status.." / ") || "";
         status = status..(format_color(tostring(errors).." error"..plural(errors), opts.color, "bright"));
      }
   }

   return label .. (" ")->rep(math.max(50 - #label, 1)) .. status;
}

var function format_location(file, location, opts) {
   var res = ("%s:%d:%d")->format(file, location.line, location.column);

   if( opts.ranges ) {
      res = ("%s-%d")->format(res, location.end_column);
   }

   return res;
}

var function event_code(event) {
   return (event.code->sub(1, 1) == "0" && "E" || "W")..event.code;
}

var function format_event(file_name, event, opts) {
   var message = format_message(event, opts.color);

   if( opts.codes ) {
      message = ("(%s) %s")->format(event_code(event), message);
   }

   return format_location(file_name, event, opts) .. ": " .. message;
}

var function format_file_report(report, file_name, opts) {
   var buf = {format_file_report_header(report, file_name, opts)};

   if( #report > 0 ) {
      table.insert(buf, "");

      for( _, event in ipairs(report) ) {
         table.insert(buf, "    " .. format_event(file_name, event, opts));
      }

      table.insert(buf, "");
   } else if( report.fatal ) {
      table.insert(buf, "");
      table.insert(buf, "    " .. file_name .. ": " .. report.msg);
      table.insert(buf, "");
   }

   return table.concat(buf, "\n");
}

var function escape_xml(str) {
   str = str->gsub("&", "&amp;");
   str = str->gsub('"', "&quot;");
   str = str->gsub("'", "&apos;");
   str = str->gsub("<", "&lt;");
   str = str->gsub(">", "&gt;");
   return str;
}

format.builtin_formatters = {};

function format.builtin_formatters.default(report, file_names, opts) {
   var buf = {};

   if( opts.quiet <= 2 ) {
      for( i, file_report in ipairs(report) ) {
         if( opts.quiet == 0 || file_report.fatal || #file_report > 0 ) {
            table.insert(buf, (opts.quiet == 2 && format_file_report_header || format_file_report) (
               file_report, file_names[i], opts));
         }
      }

      if( #buf > 0 && buf[#buf]->sub(-1) != "\n" ) {
         table.insert(buf, "");
      }
   }

   var total = ("Total: %s warning%s / %s error%s in %d file%s")->format(
      format_number(report.warnings, opts.color), plural(report.warnings),
      format_number(report.errors, opts.color), plural(report.errors),
      #report - report.fatals, plural(#report - report.fatals));

   if( report.fatals > 0 ) {
      total = total..(", couldn't check %s file%s")->format(
         report.fatals, plural(report.fatals));
   }

   table.insert(buf, total);
   return table.concat(buf, "\n");
}

function format.builtin_formatters.TAP(report, file_names, opts) {
   opts.color = false;
   var buf = {};

   for( i, file_report in ipairs(report) ) {
      if( file_report.fatal ) {
         table.insert(buf, ("not ok %d %s: %s")->format(#buf + 1, file_names[i], fatal_type(file_report)));
      } else if( #file_report == 0 ) {
         table.insert(buf, ("ok %d %s")->format(#buf + 1, file_names[i]));
      } else {
         for( _, warning in ipairs(file_report) ) {
            table.insert(buf, ("not ok %d %s")->format(#buf + 1, format_event(file_names[i], warning, opts)));
         }
      }
   }

   table.insert(buf, 1, "1.." .. tostring(#buf));
   return table.concat(buf, "\n");
}

function format.builtin_formatters.JUnit(report, file_names) {
   // JUnit formatter doesn't support any options.
   var opts = {};
   var buf = {[=[<?xml version="1.0" encoding="UTF-8"?>]=]};
   var num_testcases = 0;

   for( _, file_report in ipairs(report) ) {
      if( file_report.fatal || #file_report == 0 ) {
         num_testcases +=   1;
      } else {
         num_testcases +=   #file_report;
      }
   }

   table.insert(buf, ([=[<testsuite name="Luacheck report" tests="%d">]=])->format(num_testcases));

   for( file_i, file_report in ipairs(report) ) {
      if( file_report.fatal ) {
         table.insert(buf, ([=[    <testcase name="%s" classname="%s">]=])->format(
            escape_xml(file_names[file_i]), escape_xml(file_names[file_i])));
         table.insert(buf, ([=[        <error type="%s"/>]=])->format(escape_xml(fatal_type(file_report))));
         table.insert(buf, [=[    </testcase>]=]);
      } else if( #file_report == 0 ) {
         table.insert(buf, ([=[    <testcase name="%s" classname="%s"/>]=])->format(
            escape_xml(file_names[file_i]), escape_xml(file_names[file_i])));
      } else {
         for( event_i, event in ipairs(file_report) ) {
            table.insert(buf, ([=[    <testcase name="%s:%d" classname="%s">]=])->format(
               escape_xml(file_names[file_i]), event_i, escape_xml(file_names[file_i])));
            table.insert(buf, ([=[        <failure type="%s" message="%s"/>]=])->format(
               escape_xml(event_code(event)), escape_xml(format_event(file_names[file_i], event, opts))));
            table.insert(buf, [=[    </testcase>]=]);
         }
      }
   }

   table.insert(buf, [=[</testsuite>]=]);
   return table.concat(buf, "\n");
}

var fatal_error_codes = {
   ["I/O"] = "F1",
   ["syntax"] = "F2",
   ["runtime"] = "F3"
};

function format.builtin_formatters.visual_studio(report, file_names) {
   var buf = {};

   for( i, file_report in ipairs(report) ) {
      if( file_report.fatal ) {
         // Older docs suggest that line number after a file name is optional; newer docs mark it as required.
         // Just use tool name as origin and put file name into the message.
         table.insert(buf, ("luacheck : fatal error %s: couldn't check %s: %s")->format(
            fatal_error_codes[file_report.fatal], file_names[i], file_report.msg));
      } else {
         for( _, event in ipairs(file_report) ) {
               // Older documentation on the format suggests that it could support column range.
               // Newer docs don't mention it. Don't use it for now.
               var event_type = event.code->sub(1, 1) == "0" && "error" || "warning";
               var message = format_message(event);
               table.insert(buf, ("%s(%d,%d) : %s %s: %s")->format(
                  file_names[i], event.line, event.column, event_type, event_code(event), message));
         }
      }
   }

   return table.concat(buf, "\n");
}

function format.builtin_formatters.plain(report, file_names, opts) {
   opts.color = false;
   var buf = {};

   for( i, file_report in ipairs(report) ) {
      if( file_report.fatal ) {
         table.insert(buf, ("%s: %s (%s)")->format(file_names[i], fatal_type(file_report), file_report.msg));
      } else {
         for( _, event in ipairs(file_report) ) {
            table.insert(buf, format_event(file_names[i], event, opts));
         }
      }
   }

   return table.concat(buf, "\n");
}

//- Formats a report.
// Recognized options:
//    `options.formatter`: name of used formatter. Default: "default".
//    `options.quiet`: integer in range 0-3. See CLI. Default: 0.
//    `options.color`: should use ansicolors? Default: true.
//    `options.codes`: should output warning codes? Default: false.
//    `options.ranges`: should output token end column? Default: false.
function format.format(report, file_names, options) {
   return format.builtin_formatters[options.formatter || "default"](report, file_names, {
      quiet = options.quiet || 0,
      color = (options.color != false) && color_support,
      codes = options.codes,
      ranges = options.ranges
   });
}

return format;
