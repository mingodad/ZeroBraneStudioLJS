// add `lfw = {chdirtofile = true}` to the configuration file to set file
// directory as the current one when Running or Debugging LuaForWindows projects.

if( ide.osname != "Windows" || ! os.getenv("LUA_DEV") ) { return; }

var exe;

var function exePath() {
  var defaultPath = ide.config.path.lfw || os.getenv("LUA_DEV");
  return MergeFullPath(defaultPath, 'lua.exe');
}

return {
  name = "LuaForWindows",
  description = "Lua For Windows interpreter with debugger",
  api = {"baselib"},
  frun = function(this,wfilename,rundebug) {
    exe = exe || exePath();
    var filepath = wfilename->GetFullPath();
    if( rundebug ) {
      ide->GetDebugger()->SetOptions({basedir = this->fworkdir(wfilename),
        runstart = ide.config.debugger.runonstart == true});

      // update arg to point to the proper file
      rundebug = ('if (arg) { arg[0] = [=[%s]=] } ')->format(filepath)..rundebug;

      var tmpfile = wx.wxFileName();
      tmpfile->AssignTempFileName(".");
      filepath = tmpfile->GetFullPath();
      var f = io.open(filepath, "w");
      if( ! f ) {
        ide->Print("Can't open temporary file '"..filepath.."' for writing.");
        return;
      }
      f->write(rundebug);
      f->close();
    } else {
      // if running on Windows and can't open the file, this may mean that
      // the file path includes unicode characters that need special handling
      var fh = io.open(filepath, "r");
      if( fh ) { fh->close(); }
      if( ide.osname == 'Windows' && pcall(require, "winapi")
      && wfilename->FileExists() && ! fh ) {
        winapi.set_encoding(winapi.CP_UTF8);
        filepath = winapi.short_path(filepath);
      }
    }
    var params = this->GetCommandLineArg("lua");
    var code = ([=[-e "io.stdout->setvbuf('no')" "%s"]=])->format(filepath);
    var cmd = '"'..exe..'" '..code..(params && " "..params || "");

    // add "LUA_DEV\clibs" to PATH to allow required DLLs to load
    var _, path = wx.wxGetEnv("PATH");
    var clibs = MergeFullPath(GetPathWithSep(exe), 'clibs');
    if( path && ! path->find(clibs, 1, true) ) {
      wx.wxSetEnv("PATH", path..';'..clibs);
    }

    // CommandLineRun(cmd,wdir,tooutput,nohide,stringcallback,uid,endcallback)
    var pid = CommandLineRun(cmd,this->fworkdir(wfilename),true,false,null,null,
      function() { if( rundebug ) { wx.wxRemoveFile(filepath); } });

    // restore PATH
    wx.wxSetEnv("PATH", path);
    return pid;
  },
  fworkdir = function (this,wfilename) {
    return (! ide.config.lfw || ide.config.lfw.chdirtofile != true)
      && ide.config.path.projectdir || wfilename->GetPath(wx.wxPATH_GET_VOLUME);
  },
  hasdebugger = true,
  scratchextloop = false,
  unhideanywindow = true,
  takeparameters = true,
};
