// authors: Luxinia Dev (Eike Decker & Christoph Kubisch)
//-------------------------------------------------------

var funcdef = "([A-Za-z_][A-Za-z0-9_%.%:]*)%s*";
var decindent = {
  ['else'] = true, ['elseif'] = true, ['until'] = true, ['end'] = true};
var incindent = {
  ['else'] = true, ['elseif'] = true, ['for'] = true, ['do'] = true,
  ['if'] = true, ['repeat'] = true, ['while'] = true};
var function isfndef(str) {
  var l;
  var s,e,cap,par = string.find(str, "function%s+" .. funcdef .. "(%(.-%))");
  // try to match without brackets now, but only at the beginning of the line
  if( (! s) ) {
    s,e,cap = string.find(str, "^%s*function%s+" .. funcdef);
  }
  // try to match "foo = function()"
  if( (! s) ) {
    s,e,cap,par = string.find(str, funcdef .. "=%s*function%s*(%(.-%))");
  }
  if( (s) ) {
    l = string.find(string.sub(str,1,s-1),"local%s+$");
    cap = cap .. " " .. (par || "(?)");
  }
  return s,e,cap,l;
}
var q = EscapeMagic;

var PARSE = require ('lua_parser_loose');
var LEX = require ('lua_lexer_loose');

var function ldoc(tx, typepatt) {
  var varname = "([%w_]+)";
  // <type> == ?string, ?|T1|T2
  // anything that follows optional "|..." is ignored
  var typename = "%??"..typepatt;
  // @tparam[...] <type> <paramname>
  // @param[type=<type>] <paramname>
  // @string[...] <paramname>; not handled
  var t, v = tx->match("--%s*@tparam%b[]%s+"..typename.."%s+"..varname);
  if( ! t ) { // try without optional [...] part
    t, v = tx->match("--%s*@tparam%s+"..typename.."%s+"..varname);
  }
  if( ! t ) {
    t, v = tx->match("--%s*@param%s*%[type="..typename.."%]%s+"..varname);
  }
  return t, v;
}

return {
  exts = {"lua", "rockspec", "wlua"},
  lexer = wxstc.wxSTC_LEX_LUA,
  apitype = "lua",
  linecomment = "--",
  sep = ".:",
  isdecindent = function(str) {
    str = (str
      ->gsub('%[=*%[.-%]=*%]','') // remove long strings
      ->gsub("%b[]","") // remove all table indexes
      ->gsub('%[=*%[.*','')->gsub('.*%]=*%]','') // remove partial long strings
      ->gsub('%-%-.*','') // strip comments after strings are processed
      ->gsub("%b()","()") // remove all function calls
    );
    // this handles three different cases:
    var term = (str->match("^%s*([%w_]+)%s*$")
      || str->match("^%s*(elseif)[%s%(]")
      || str->match("^%s*(until)[%s%(]")
      || str->match("^%s*(else)%f[^%w_]")
    );
    // (1) 'end', 'elseif', 'else', 'until'
    var match = term && decindent[term];
    // (2) 'end)', 'end}', 'end,', and 'end;'
    if( ! term ) { term, match = str->match("^%s*(end)%s*([%)%}]*)%s*[,;]?"); }
    // endFoo could be captured as well; filter it out
    if( term && str->match("^%s*(end)[%w_]") ) { term = null; }
    // (3) '},', '};', '),' and ');'
    if( ! term ) { match = str->match("^%s*[%)%}]+%s*[,;]?%s*$"); }

    return match && 1 || 0, match && term && 1 || 0;
  },
  isincindent = function(str) {
    // remove "long" comments and escaped slashes (to process \' and \" below)
    str = str->gsub('%-%-%[=*%[.-%]=*%]',' ')->gsub('\\[\\\'"]','');
    while( true ) {
      var num, sep = null, str->match("['\"]");
      if( ! sep ) { break; }
      str, num = str->gsub(sep..".-\\"..sep,sep)->gsub(sep..".-"..sep," ");
      if( num == 0 ) { break; }
    }
    str = (str
      ->gsub('%[=*%[.-%]=*%]',' ') // remove long strings
      ->gsub('%b[]',' ') // remove all table indexes
      ->gsub('%[=*%[.*','')->gsub('.*%]=*%]','') // remove partial long strings
      ->gsub('%-%-.*','') // strip comments after strings are processed
      ->gsub("%b()","()") // remove all function calls
    );

    var func = (isfndef(str) || str->match("%f[%w_]function%s*%(")) && 1 || 0;
    var term = str->match("^%s*([%w_]+)%W*");
    var terminc = term && incindent[term] && 1 || 0;
    // fix 'if' not terminated with 'then'
    // or 'then' not started with 'if'
    if( (term == 'if' || term == 'elseif') && ! str->match("%f[%w_]then%f[^%w_]")
    || (term == 'for') && ! str->match("%f[%w_]do%f[^%w_]")
    || (term == 'while') && ! str->match("%f[%w_]do%f[^%w_]")
    // or `repeat ... until` are on the same line
    || (term == 'repeat') && str->match("%f[%w_]until%f[^%w_]")
    // if this is a function definition, then don't increment the level
    || func == 1 ) {
      terminc = 0;
    } else if( ! (term == 'if' || term == 'elseif') && str->match("%f[%w_]then%f[^%w_]")
    || ! (term == 'for') && str->match("%f[%w_]do%f[^%w_]")
    || ! (term == 'while') && str->match("%f[%w_]do%f[^%w_]") ) {
      terminc = 1;
    }
    var _, opened = str->gsub("([%{%(])", "%1");
    var _, closed = str->gsub("([%}%)])", "%1");
    // ended should only be used to negate term and func effects
    var anon = str->match("%f[%w_]function%s*%(.+[^%w_]end%f[^%w_]");
    var ended = (terminc + func > 0) && (str->match("[^%w_]+end%s*$") || anon) && 1 || 0;

    return opened - closed + func + terminc - ended;
  },
  marksymbols = function(code, pos, vars) {
    var lx = LEX.lexc(code, null, pos);
    return coroutine.wrap(function() {
      var varnext = {};
      PARSE.parse_scope_resolve(lx, function(op, name, lineinfo, vars, nobreak) {
        if( !(op == 'Id' || op == 'Statement' || op == 'Var'
            || op == 'Function' || op == 'String'
            || op == 'VarNext' || op == 'VarInside' || op == 'VarSelf'
            || op == 'FunctionCall' || op == 'Scope' || op == 'EndScope') ) {
          return; } // "normal" return; not interested in other events

        // level needs to be adjusted for VarInside as it comes into scope
        // only after next block statement
        var at = vars[0] && (vars[0] + (op == 'VarInside' && 1 || 0));
        if( op == 'Statement' ) {
          for( _, token in pairs(varnext) ) { coroutine.yield(unpack(token)); }
          varnext = {};
        } else if( op == 'VarNext' || op == 'VarInside' ) {
          table.insert(varnext, {'Var', name, lineinfo, vars, at, nobreak});
        }

        coroutine.yield(op, name, lineinfo, vars, op == 'Function' && at-1 || at, nobreak);
      }, vars);
    });
  },

  typeassigns = function(editor) {
    var maxlines = 48; // scan up to this many lines back
    var iscomment = editor.spec.iscomment;
    var assigns = {};
    var endline = editor->GetCurrentLine()-1;
    var line = math.max(endline-maxlines, 0);

    while( (line <= endline) ) {
      var ls = editor->PositionFromLine(line);
      var tx = editor->GetLine(line); //= string
      var s = bit.band(editor->GetStyleAt(ls + #tx->match("^%s*") + 2),31);

      // check for assignments
      var sep = editor.spec.sep;
      var varname = "([%w_][%w_"..q(sep->sub(1,1)).."]*)";
      var identifier = "([%w_][%w_"..q(sep).."%s]*)";

      // special hint
      var typ, _v_var = tx->match("%s*%-%-=%s*"..varname.."%s+"..identifier);
      var ldoctype, ldocvar = ldoc(tx, varname);
      if( _v_var && typ ) {
        assigns[_v_var] = typ->gsub("%s","");
      } else if( ldoctype && ldocvar ) {
        assigns[ldocvar] = ldoctype;
      } else if( ! iscomment[s] ) {
        // real assignments
        var _v_var,typ = tx->match("%s*"..identifier.."%s*=%s*([^;]+)");

        _v_var = _v_var && _v_var->gsub("local","")->gsub("%s","");
        // remove assert() calls as they don't affect their parameter types
        typ = typ && typ->gsub("assert%s*(%b())", function(s) { return s->gsub("^%(","")->gsub("%)$",""); });
        // handle `require` as a special case that returns a type that matches its parameter
        // (this is without deeper analysis on loaded files and should work most of the time)
        var req = typ && typ->match("^require%s*%(?%s*['\"](.+)['\"]%s*%)?");
        typ = req || typ;
        typ = (typ && typ
          ->gsub("%b()","")
          ->gsub("%b{}","")
          ->gsub("%b[]",".0")
          // replace concatenation with addition to avoid misidentifying types
          ->gsub("%.%.+","+")
          // remove comments; they may be in strings, but that's okay here
          ->gsub("%-%-.*",""));
        if( (typ && (typ->match(",") || typ->match("%sor%s") || typ->match("%sand%s"))) ) {
          typ = null;
        }
        typ = typ && typ->gsub("%s","");
        typ = typ && typ->gsub(".+", function(s) {
            return (s->find("^'[^']*'$")
              || s->find('^"[^"]*"$')
              || s->find('^%[=*%[.*%]=*%]$')) && 'string' || s;
          });

        // filter out everything that is not needed
        if( typ && typ != 'string' // special value for all strings
        && (! typ->match('^'..identifier..'$') // not an identifier
          || typ->match('^%d') // or a number
          || editor.api.tip.keys[typ] // or a keyword
          ) ) {
          typ = null;
        }

        if( (_v_var && typ) ) {
          if( (assigns[typ] && ! req) ) {
            assigns[_v_var] = assigns[typ];
          } else {
            if( req ) { assigns[req] = null; }
            assigns[_v_var] = typ;
          }
        }
      }
      line += 1;
    }

    return assigns;
  },

  lexerstyleconvert = {
    text = {wxstc.wxSTC_LUA_IDENTIFIER,},

    lexerdef = {wxstc.wxSTC_LUA_DEFAULT,},
    comment = {wxstc.wxSTC_LUA_COMMENT,
      wxstc.wxSTC_LUA_COMMENTLINE,
      wxstc.wxSTC_LUA_COMMENTDOC,},
    stringtxt = {wxstc.wxSTC_LUA_STRING,
      wxstc.wxSTC_LUA_CHARACTER,
      wxstc.wxSTC_LUA_LITERALSTRING,},
    stringeol = {wxstc.wxSTC_LUA_STRINGEOL,},
    preprocessor= {wxstc.wxSTC_LUA_PREPROCESSOR,},
    operator = {wxstc.wxSTC_LUA_OPERATOR,},
    number = {wxstc.wxSTC_LUA_NUMBER,},

    keywords0 = {wxstc.wxSTC_LUA_WORD,},
    keywords1 = {wxstc.wxSTC_LUA_WORD2,},
    keywords2 = {wxstc.wxSTC_LUA_WORD3,},
    keywords3 = {wxstc.wxSTC_LUA_WORD4,},
    keywords4 = {wxstc.wxSTC_LUA_WORD5,},
    keywords5 = {wxstc.wxSTC_LUA_WORD6,},
    keywords6 = {wxstc.wxSTC_LUA_WORD7,},
    keywords7 = {wxstc.wxSTC_LUA_WORD8,},
  },

  keywords = {
    // keywords
    [=[and break do else elseif end for function goto if in local not or repeat return then until while]=],

    // constants/variables
    [=[_G _VERSION _ENV false io.stderr io.stdin io.stdout nil math.huge math.pi self true package.cpath package.path]=],

    // core/global functions
    [=[assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring
      module next pairs pcall print rawequal rawget rawlen rawset require
      select setfenv setmetatable tonumber tostring type unpack xpcall]=],

    // library functions
    [=[bit32.arshift bit32.band bit32.bnot bit32.bor bit32.btest bit32.bxor bit32.extract
      bit32.lrotate bit32.lshift bit32.replace bit32.rrotate bit32.rshift
      coroutine.create coroutine.resume coroutine.running coroutine.status coroutine.wrap coroutine.yield
      coroutine.isyieldable
      debug.debug debug.getfenv debug.gethook debug.getinfo debug.getlocal
      debug.getmetatable debug.getregistry debug.getupvalue debug.getuservalue debug.setfenv
      debug.sethook debug.setlocal debug.setmetatable debug.setupvalue debug.setuservalue
      debug.traceback debug.upvalueid debug.upvaluejoin
      io.close io.flush io.input io.lines io.open io.output io.popen io.read io.tmpfile io.type io.write
      close flush lines read seek setvbuf write
      math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.cosh math.deg math.exp
      math.floor math.fmod math.frexp math.ldexp math.log math.log10 math.max math.min math.modf
      math.pow math.rad math.random math.randomseed math.sin math.sinh math.sqrt math.tan math.tanh
      math.type math.tointeger math.maxinteger math.mininteger math.ult
      os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename os.setlocale os.time os.tmpname
      package.loadlib package.searchpath package.seeall package.config
      package.loaded package.loaders package.preload package.searchers
      string.byte string.char string.dump string.find string.format string.gmatch string.gsub string.len
      string.lower string.match string.rep string.reverse string.sub string.upper
      byte find format gmatch gsub len lower match rep reverse sub upper
      table.move, string.pack, string.unpack, string.packsize
      table.concat table.insert table.maxn table.pack table.remove table.sort table.unpack]=]
  },
};
