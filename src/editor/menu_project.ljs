// Copyright 2011-17 Paul Kulchenko, ZeroBrane LLC
// authors: Lomtik Software (J. Winwood & John Labenski)
// Luxinia Dev (Eike Decker & Christoph Kubisch)
//-------------------------------------------------------

var ide = ide;
var frame = ide.frame;
var menuBar = frame.menuBar;
var openDocuments = ide.openDocuments;

//----------------------
// Interpreters and Menu

var targetDirMenu = ide->MakeMenu ({
  {ID_PROJECTDIRCHOOSE, TR("Choose...")..KSC(ID_PROJECTDIRCHOOSE), TR("Choose a project directory")},
  {ID_PROJECTDIRFROMFILE, TR("Set From Current File")..KSC(ID_PROJECTDIRFROMFILE), TR("Set project directory from current file")},
});
var targetMenu = ide->MakeMenu ({});
var debugMenu = ide->MakeMenu ({
  { ID_RUN, TR("&Run")..KSC(ID_RUN), TR("Execute the current project/file") },
  { ID_RUNNOW, TR("Run As Scratchpad")..KSC(ID_RUNNOW), TR("Execute the current project/file and keep updating the code to see immediate results"), wx.wxITEM_CHECK },
  { ID_COMPILE, TR("&Compile")..KSC(ID_COMPILE), TR("Compile the current file") },
  { ID_STARTDEBUG, TR("Start &Debugging")..KSC(ID_STARTDEBUG), TR("Start or continue debugging") },
  { ID_ATTACHDEBUG, TR("&Start Debugger Server")..KSC(ID_ATTACHDEBUG), TR("Allow external process to start debugging"), wx.wxITEM_CHECK },
  { },
  { ID_STOPDEBUG, TR("S&top Process")..KSC(ID_STOPDEBUG), TR("Stop the currently running process") },
  { ID_DETACHDEBUG, TR("Detach &Process")..KSC(ID_DETACHDEBUG), TR("Stop debugging and continue running the process") },
  { ID_STEP, TR("Step &Into")..KSC(ID_STEP), TR("Step into") },
  { ID_STEPOVER, TR("Step &Over")..KSC(ID_STEPOVER), TR("Step over") },
  { ID_STEPOUT, TR("Step O&ut")..KSC(ID_STEPOUT), TR("Step out of the current function") },
  { ID_RUNTO, TR("Run To Cursor")..KSC(ID_RUNTO), TR("Run to cursor") },
  { ID_TRACE, TR("Tr&ace")..KSC(ID_TRACE), TR("Trace execution showing each executed line") },
  { ID_BREAK, TR("&Break")..KSC(ID_BREAK), TR("Break execution at the next executed line of code") },
  { },
  { ID_BREAKPOINT, TR("Breakpoint")..KSC(ID_BREAKPOINT), "", {
    { ID_BREAKPOINTTOGGLE, TR("Toggle Breakpoint")..KSC(ID_BREAKPOINTTOGGLE) },
    { ID_BREAKPOINTNEXT, TR("Go To Next Breakpoint")..KSC(ID_BREAKPOINTNEXT) },
    { ID_BREAKPOINTPREV, TR("Go To Previous Breakpoint")..KSC(ID_BREAKPOINTPREV) },
  } },
  { },
  { ID_CLEAROUTPUTENABLE, TR("C&lear Output Window")..KSC(ID_CLEAROUTPUTENABLE), TR("Clear the output window before compiling or debugging"), wx.wxITEM_CHECK },
  { ID_COMMANDLINEPARAMETERS, TR("Command Line Parameters...")..KSC(ID_COMMANDLINEPARAMETERS), TR("Provide command line parameters") },
  { ID_PROJECTDIR, TR("Project Directory"), TR("Set the project directory to be used"), targetDirMenu },
  { ID_INTERPRETER, TR("Lua &Interpreter"), TR("Set the interpreter to be used"), targetMenu },
});
menuBar->Append(debugMenu, TR("&Project"));
menuBar->Check(ID_CLEAROUTPUTENABLE, true);

// older (<3.x) versions of wxwidgets may not have `GetLabelText`, so provide alternative
if( ! pcall(function() { return debugMenu.GetLabelText; }) ) {
  debugMenu.GetLabelText = function(this, ...) { return wx.wxMenuItem.GetLabelText(this.GetLabel(this, ...)); };
}
var debugMenuRunLabel = { [false]=debugMenu->GetLabelText(ID_STARTDEBUG), [true]=TR("Co&ntinue") };
var debugMenuStopLabel = { [false]=debugMenu->GetLabelText(ID_STOPDEBUG), [true]=TR("S&top Debugging") };

var interpreters;
var function selectInterpreter(id) {
  for( id in pairs(interpreters) ) {
    menuBar->Check(id, false);
    menuBar->Enable(id, true);
  }
  menuBar->Check(id, true);
  menuBar->Enable(id, false);

  var changed = ide.interpreter != interpreters[id];
  if( changed ) {
    if( ide.interpreter ) { PackageEventHandle("onInterpreterClose", ide.interpreter); }
    if( interpreters[id] ) { PackageEventHandle("onInterpreterLoad", interpreters[id]); }
  }

  ide.interpreter = interpreters[id];

  ide->GetDebugger()->Shutdown();

  if( ide.interpreter ) {
    ide.interpreter->UpdateStatus();
  } else {
    ide->SetStatus("", 4);
  }
  if( changed ) { ReloadAPIs(); }
}

function ProjectSetInterpreter(name) {
  var id = IDget("debug.interpreter."..name);
  if( id && interpreters[id] ) {
    selectInterpreter(id);
    return true;
  } else {
    ide->Print(("Can't load interpreter '%s'; using the default interpreter instead.")->format(name));
    var id = (
      // interpreter is set and is (still) on the list of known interpreters
      IDget("debug.interpreter."..(ide.config.interpreter || ide.config.default.interpreter)) ||
      // otherwise use default interpreter
      ID("debug.interpreter."..ide.config.default.interpreter)
    );
    selectInterpreter(id);
  }
}

var function evSelectInterpreter(event) {
  selectInterpreter(event->GetId());
}

function ProjectUpdateInterpreters() {
  assert(ide.interpreters, "no interpreters defined");

  // delete all existing items (if any)
  var items = targetMenu->GetMenuItemCount();
  for( i = items, 1, -1 ) {
    targetMenu->Delete(targetMenu->FindItemByPosition(i-1));
  }

  var names = {};
  for( file in pairs(ide.interpreters) ) { table.insert(names, file); }
  table.sort(names);

  interpreters = {};
  for( _, file in ipairs(names) ) {
    var inter = ide.interpreters[file];
    var id = ID("debug.interpreter."..file);
    inter.fname = file;
    interpreters[id] = inter;
    targetMenu->Append(
      wx.wxMenuItem(targetMenu, id, inter.name, inter.description, wx.wxITEM_CHECK));
    frame->Connect(id, wx.wxEVT_COMMAND_MENU_SELECTED, evSelectInterpreter);
  }

  var id = (
    // interpreter is set and is (still) on the list of known interpreters
    IDget("debug.interpreter."
      ..(ide.interpreter && ide.interpreters[ide.interpreter.fname] && ide.interpreter.fname
         || ide.config.interpreter || ide.config.default.interpreter)) ||
    // otherwise use default interpreter
    ID("debug.interpreter."..ide.config.default.interpreter)
  );
  selectInterpreter(id);
}

//---------------------------
// Project directory handling

var function projChoose(event) {
  var editor = ide->GetEditor();
  var fn = wx.wxFileName(
    editor && openDocuments[editor->GetId()].filePath || "");
  fn->Normalize(); // want absolute path for dialog

  var projectdir = ide->GetProject();
  var filePicker = wx.wxDirDialog(frame, TR("Choose a project directory"),
    projectdir != "" && projectdir || wx.wxGetCwd(), wx.wxDIRP_DIR_MUST_EXIST);
  if( filePicker->ShowModal(true) == wx.wxID_OK ) {
    return ide->SetProject(filePicker->GetPath());
  }
  return false;
}

frame->Connect(ID_PROJECTDIRCHOOSE, wx.wxEVT_COMMAND_MENU_SELECTED, projChoose);

var function projFromFile(event) {
  var editor = ide->GetEditor();
  if( ! editor ) { return; }
  var id = editor->GetId();
  var filepath = openDocuments[id].filePath;
  if( ! filepath ) { return; }
  var fn = wx.wxFileName(filepath);
  fn->Normalize(); // want absolute path for dialog

  if( ide.interpreter ) {
    ide->SetProject(ide.interpreter->fprojdir(fn));
  }
}
frame->Connect(ID_PROJECTDIRFROMFILE, wx.wxEVT_COMMAND_MENU_SELECTED, projFromFile);
frame->Connect(ID_PROJECTDIRFROMFILE, wx.wxEVT_UPDATE_UI,
  function (event) {
    var editor = ide->GetEditor();
    event->Enable(editor != null && ide->GetDocument(editor)->GetFilePath() != null);
  });

//--------------------
// Interpreter Running

var function getNameToRun(skipcheck) {
  var editor = ide->GetEditor();
  if( ! editor ) { return; }

  // test compile it before we run it, if successful then ask to save
  // only compile if lua api
  if( editor.spec.apitype &&
    editor.spec.apitype == "lua" &&
    (! skipcheck) &&
    (! ide.interpreter.skipcompile) &&
    (! CompileProgram(editor, { reportstats = false })) ) {
    return;
  }

  var doc = ide->GetDocument(editor);
  var name = ide->GetProjectStartFile() || doc->GetFilePath();
  if( ! SaveIfModified(editor) ) { return; }
  if( ide.config.editor.saveallonrun ) { SaveAll(true); }

  return wx.wxFileName(name || doc->GetFilePath());
}

var function runInterpreter(wfilename, withdebugger) {
  ClearOutput();
  ide->GetOutput()->Activate();

  ClearAllCurrentLineMarkers();
  if( ! wfilename || ! ide.interpreter.frun ) { return; }
  var pid = ide.interpreter->frun(wfilename, withdebugger);
  if( pid ) { OutputEnableInput(); }
  ide->SetLaunchedProcess(pid);
  return pid;
}

function ProjectRun(skipcheck) {
  var fname = getNameToRun(skipcheck);
  if( ! fname ) { return; }
  return runInterpreter(fname);
}

var debuggers = {
  debug = "require('mobdebug').loop('%s',%d)",
  scratchpad = "require('mobdebug').scratchpad('%s',%d)"
};

function ProjectDebug(skipcheck, debtype) {
  var debugger = ide->GetDebugger();
  if( (debugger->IsConnected()) ) {
    if( (debugger.scratchpad && debugger.scratchpad.paused) ) {
      debugger.scratchpad.paused = null;
      debugger.scratchpad.updated = true;
      ide->GetConsole()->SetRemote(null); // disable remote while Scratchpad running
    } else if( (! debugger->IsRunning()) ) {
      debugger->Run();
    }
  } else {
    if( ! debugger->IsListening() ) { debugger->Listen(); }
    var debcall = (debuggers[debtype || "debug"])->
      format(debugger->GetHostName(), debugger->GetPortNumber());
    var fname = getNameToRun(skipcheck);
    if( ! fname ) { return; }
    return runInterpreter(fname, debcall); // this may be pid or nil
  }
  return true;
}

//---------------------
// Actions

var BREAKPOINT_MARKER = StylesGetMarker("breakpoint");

frame->Connect(ID_BREAKPOINTTOGGLE, wx.wxEVT_COMMAND_MENU_SELECTED,
  function() { ide->GetEditor()->BreakpointToggle(); });
frame->Connect(ID_BREAKPOINTTOGGLE, wx.wxEVT_UPDATE_UI,
  function (event) {
    var debugger = ide->GetDebugger();
    var editor = ide->GetEditorWithFocus(ide->GetEditor());
    event->Enable(ide.interpreter && ide.interpreter.hasdebugger && (! debugger.scratchpad)
      && (editor != null) && (! editor->IsLineEmpty()));
  });

frame->Connect(ID_BREAKPOINTNEXT, wx.wxEVT_COMMAND_MENU_SELECTED,
  function() {
    var BPNSC = KSC(ID_BREAKPOINTNEXT)->gsub("\t","");
    if( ! ide->GetEditor()->MarkerGotoNext(BREAKPOINT_MARKER) && BPNSC == "F9" ) {
      var osx = ide.osname == "Macintosh";
      ide->Print(("You used '%s' shortcut that has been changed from toggling a breakpoint to navigating to the next breakpoint in the document.")
        ->format(BPNSC));
      // replace Ctrl with Cmd, but not in RawCtrl
      ide->Print(("To toggle a breakpoint, use '%s' or click in the editor margin.")
        ->format(KSC(ID_BREAKPOINTTOGGLE)->gsub("\t","")->gsub("%f[%w]Ctrl", osx && "Cmd" || "Ctrl")));
    }
  });
frame->Connect(ID_BREAKPOINTPREV, wx.wxEVT_COMMAND_MENU_SELECTED,
  function() { ide->GetEditor()->MarkerGotoPrev(BREAKPOINT_MARKER); });

frame->Connect(ID_BREAKPOINTNEXT, wx.wxEVT_UPDATE_UI,
  function (event) { event->Enable(ide->GetEditor() != null); });
frame->Connect(ID_BREAKPOINTPREV, wx.wxEVT_UPDATE_UI,
  function (event) { event->Enable(ide->GetEditor() != null); });

frame->Connect(ID_COMPILE, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () {
    ide->GetOutput()->Activate();
    CompileProgram(ide->GetEditor(), {
        keepoutput = ide->GetLaunchedProcess() != null || ide->GetDebugger()->IsConnected()
    });
  });
frame->Connect(ID_COMPILE, wx.wxEVT_UPDATE_UI,
  function (event) { event->Enable(ide->GetEditor() != null); });

frame->Connect(ID_RUN, wx.wxEVT_COMMAND_MENU_SELECTED, function () { ProjectRun(); });
frame->Connect(ID_RUN, wx.wxEVT_UPDATE_UI,
  function (event) {
    event->Enable(ide->GetDebugger()->IsConnected() == null &&
                 ide->GetLaunchedProcess() == null &&
                 (ide.interpreter.frun != null) && // nil == no running from this interpreter
                 ide->GetEditor() != null);
  });

frame->Connect(ID_RUNNOW, wx.wxEVT_COMMAND_MENU_SELECTED,
  function (event) {
    var debugger = ide->GetDebugger();
    if( debugger.scratchpad ) {
      debugger->ScratchpadOff();
    } else {
      debugger->ScratchpadOn(ide->GetEditor());
    }
  });
frame->Connect(ID_RUNNOW, wx.wxEVT_UPDATE_UI,
  function (event) {
    var editor = ide->GetEditor();
    var debugger = ide->GetDebugger();
    // allow scratchpad if there is no server or (there is a server and it is
    // allowed to turn it into a scratchpad) and we are not debugging anything
    event->Enable((ide.interpreter) && (ide.interpreter.hasdebugger) &&
                 (ide.interpreter.frun != null) && // nil == no running from this interpreter
                 (ide.interpreter.scratchextloop != null) && // nil == no scratchpad support
                 (editor != null) && ((debugger->IsConnected() == null || debugger.scratchable)
                 && ide->GetLaunchedProcess() == null || debugger.scratchpad != null));
    var isscratchpad = debugger.scratchpad != null;
    menuBar->Check(ID_RUNNOW, isscratchpad);
    var tool = ide->GetToolBar()->FindTool(ID_RUNNOW);
    if( tool && tool->IsSticky() != isscratchpad ) {
      tool->SetSticky(isscratchpad);
      ide->GetToolBar()->Refresh();
    }
  });

frame->Connect(ID_ATTACHDEBUG, wx.wxEVT_COMMAND_MENU_SELECTED,
  function (event) {
    ide->GetDebugger()->Listen(event->IsChecked()); // start/stop listening
    if( event->IsChecked() && ide.interpreter.fattachdebug ) { ide.interpreter->fattachdebug(); }
  });
frame->Connect(ID_ATTACHDEBUG, wx.wxEVT_UPDATE_UI,
  function (event) {
    event->Enable(ide.interpreter && ide.interpreter.fattachdebug && true || false);
    ide.frame.menuBar->Check(event->GetId(), ide->GetDebugger()->IsListening() && true || false);
  });

frame->Connect(ID_STARTDEBUG, wx.wxEVT_COMMAND_MENU_SELECTED, function () { ProjectDebug(); });
frame->Connect(ID_STARTDEBUG, wx.wxEVT_UPDATE_UI,
  function (event) {
    var editor = ide->GetEditor();
    var debugger = ide->GetDebugger();
    event->Enable((ide.interpreter) && (ide.interpreter.hasdebugger) &&
                 (ide.interpreter.frun != null) && // nil == no running from this interpreter
      ((debugger->IsConnected() == null && ide->GetLaunchedProcess() == null && editor != null) ||
       (debugger->IsConnected() != null && ! debugger->IsRunning())) &&
      (! debugger.scratchpad || debugger.scratchpad.paused));
    var isconnected = debugger->IsConnected() != null;
    var label, other = debugMenuRunLabel[isconnected], debugMenuRunLabel[! isconnected];
    if( debugMenu->GetLabelText(ID_STARTDEBUG) == wx.wxMenuItem.GetLabelText(other) ) {
      debugMenu->SetLabel(ID_STARTDEBUG, label..KSC(ID_STARTDEBUG));
    }
  });

frame->Connect(ID_STOPDEBUG, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () { ide->GetDebugger()->Stop(); });
frame->Connect(ID_STOPDEBUG, wx.wxEVT_UPDATE_UI,
  function (event) {
    var debugger = ide->GetDebugger();
    event->Enable(debugger->IsConnected() != null || ide->GetLaunchedProcess() != null);
    var isdebugging = debugger->IsConnected() != null;
    var label, other = debugMenuStopLabel[isdebugging], debugMenuStopLabel[! isdebugging];
    if( debugMenu->GetLabelText(ID_STOPDEBUG) == wx.wxMenuItem.GetLabelText(other) ) {
      debugMenu->SetLabel(ID_STOPDEBUG, label..KSC(ID_STOPDEBUG));
    }
  });

frame->Connect(ID_DETACHDEBUG, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () { ide->GetDebugger()->detach(); });
frame->Connect(ID_DETACHDEBUG, wx.wxEVT_UPDATE_UI,
  function (event) {
    var debugger = ide->GetDebugger();
    event->Enable(debugger->IsConnected() != null && (! debugger.scratchpad));
  });

frame->Connect(ID_RUNTO, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () {
    var editor = ide->GetEditor();
    ide->GetDebugger()->RunTo(editor, editor->GetCurrentLine()+1);
  });
frame->Connect(ID_RUNTO, wx.wxEVT_UPDATE_UI,
  function (event) {
    var debugger = ide->GetDebugger();
    event->Enable((debugger->IsConnected() != null) && (! debugger->IsRunning())
      && (ide->GetEditor() != null) && (! debugger.scratchpad));
  });

frame->Connect(ID_STEP, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () { ide->GetDebugger()->Step(); });
frame->Connect(ID_STEP, wx.wxEVT_UPDATE_UI,
  function (event) {
    var debugger = ide->GetDebugger();
    event->Enable((debugger->IsConnected() != null) && (! debugger->IsRunning())
      && (ide->GetEditor() != null) && (! debugger.scratchpad));
  });

frame->Connect(ID_STEPOVER, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () { ide->GetDebugger()->Over(); });
frame->Connect(ID_STEPOVER, wx.wxEVT_UPDATE_UI,
  function (event) {
    var debugger = ide->GetDebugger();
    event->Enable((debugger->IsConnected() != null) && (! debugger->IsRunning())
      && (ide->GetEditor() != null) && (! debugger.scratchpad));
  });

frame->Connect(ID_STEPOUT, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () { ide->GetDebugger()->Out(); });
frame->Connect(ID_STEPOUT, wx.wxEVT_UPDATE_UI,
  function (event) {
    var debugger = ide->GetDebugger();
    event->Enable((debugger->IsConnected() != null) && (! debugger->IsRunning())
      && (ide->GetEditor() != null) && (! debugger.scratchpad));
  });

frame->Connect(ID_TRACE, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () { ide->GetDebugger()->trace(); });
frame->Connect(ID_TRACE, wx.wxEVT_UPDATE_UI,
  function (event) {
    var debugger = ide->GetDebugger();
    event->Enable((debugger->IsConnected() != null) && (! debugger->IsRunning())
      && (ide->GetEditor() != null) && (! debugger.scratchpad));
  });

frame->Connect(ID_BREAK, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () {
    var debugger = ide->GetDebugger();
    if( debugger.server ) {
      debugger->Break();
      if( debugger.scratchpad ) {
        debugger.scratchpad.paused = true;
        ide->GetConsole()->SetRemote(debugger->GetConsole());
      }
    }
  });
frame->Connect(ID_BREAK, wx.wxEVT_UPDATE_UI,
  function (event) {
    var debugger = ide->GetDebugger();
    event->Enable(debugger->IsConnected() != null
      && (debugger->IsRunning()
           || (debugger.scratchpad && ! debugger.scratchpad.paused)));
  });

frame->Connect(ID_COMMANDLINEPARAMETERS, wx.wxEVT_COMMAND_MENU_SELECTED,
  function () {
    var params = ide->GetTextFromUser(TR("Enter command line parameters"),
      TR("Command line parameters"), ide.config.arg.any || "");
    // params is `nil` when the dialog is canceled
    if( params ) { ide->SetCommandLineParameters(params); }
  });
frame->Connect(ID_COMMANDLINEPARAMETERS, wx.wxEVT_UPDATE_UI,
  function (event) {
    var interpreter = ide->GetInterpreter();
    event->Enable(interpreter && interpreter.takeparameters && true || false);
  });

// save and restore command line parameters
ide->AddPackage("core.project", {
    AddCmdLine = function(this, params) {
      var settings = this->GetSettings();
      var arglist = settings.arglist || {};
      PrependStringToArray(arglist, params, ide.config.commandlinehistorylength);
      settings.arglist = arglist;
      this->SetSettings(settings);
    },
    GetCmdLines = function(this) { return this->GetSettings().arglist || {}; },

    onProjectLoad = function(this, project) {
      var settings = this->GetSettings();
      if( type(settings.arg) == "table" ) {
        ide->SetConfig("arg.any", settings.arg[project], project);
      }
      var interpreter = ide->GetInterpreter();
      if( interpreter ) { interpreter->UpdateStatus(); }
    },
    onProjectClose = function(this, project) {
      var settings = this->GetSettings();
      if( type(settings.arg) != "table" ) { settings.arg = {}; }
      if( settings.arg[project] != ide.config.arg.any ) {
        settings.arg[project] = ide.config.arg.any;
        this->SetSettings(settings);
      }
    },
});
