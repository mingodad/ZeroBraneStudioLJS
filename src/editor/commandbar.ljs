// Copyright 2011-18 Paul Kulchenko, ZeroBrane LLC
//-------------------------------------------------------

var ide = ide;
var q = EscapeMagic;
var unpack = table.unpack || unpack;

var dc = wx.wxMemoryDC();
var function getFontHeight(font) {
  dc->SetFont(font);
  var _, h = dc->GetTextExtent("AZ");
  dc->SetFont(wx.wxNullFont);
  return h;
}

var pending;
var function pendingInput() {
  if( ide.osname != 'Unix' ) {
    ide->GetApp()->SafeYieldFor(wx.NULL, wx.wxEVT_CATEGORY_USER_INPUT + wx.wxEVT_CATEGORY_UI);
  }
  return pending;
}
var showProgress;
var function showCommandBar(params) {
  var onDone, onUpdate, onItem, onSelection, defaultText, selectedText =
    params.onDone, params.onUpdate, params.onItem, params.onSelection,
    params.defaultText, params.selectedText;
  var row_width = ide.config.commandbar.width || 0;
  if( row_width < 1 ) {
    row_width = math.max(450, math.floor(row_width * ide->GetMainFrame()->GetClientSize()->GetWidth()));
  }

  var maxlines = ide.config.commandbar.maxlines;
  var lines = {};
  var linenow = 0;

  var nb = ide->GetEditorNotebook();
  var pos = nb->GetScreenPosition();
  if( pos ) {
    var miny;
    for( p = 0, nb->GetPageCount()-1 ) {
      var y = nb->GetPage(p)->GetScreenPosition()->GetY();
      // just in case, compare with the position of the notebook itself;
      // this is needed because the tabs that haven't been refreshed yet
      // may report 0 as their screen position on Linux, which is incorrect.
      if( y > pos->GetY() && (! miny || y < miny) ) { miny = y; }
    }
    pos->SetX(pos->GetX()+nb->GetClientSize()->GetWidth()-row_width-16);
    pos->SetY((miny || pos->GetY())+2);
  } else {
    pos = wx.wxDefaultPosition;
  }

  var tempctrl = ide->IsValidCtrl(ide->GetProjectTree()) && ide->GetProjectTree() || wx.wxTreeCtrl();
  var tfont = tempctrl->GetFont();
  var ffont = (ide->GetEditor() || ide->CreateBareEditor())->GetFont();
  ffont->SetPointSize(ffont->GetPointSize()+2);
  var sfont = wx.wxFont(tfont);
  tfont->SetPointSize(tfont->GetPointSize()+2);

  var sash = ide->GetUIManager()->GetArtProvider()->GetMetric(wxaui.wxAUI_DOCKART_SASH_SIZE);
  var border = sash + 2;
  var hoffset = 4;
  var voffset = 2;

  var line_height = getFontHeight(ffont);
  var row_height = line_height + getFontHeight(sfont) + voffset * 3; // before, after, and between

  var frame = wx.wxFrame(ide->GetMainFrame(), wx.wxID_ANY, "Command Bar",
    pos, wx.wxDefaultSize,
    wx.wxFRAME_NO_TASKBAR + wx.wxFRAME_FLOAT_ON_PARENT + wx.wxNO_BORDER);
  var panel = wx.wxPanel(frame || ide->GetMainFrame(), wx.wxID_ANY,
    wx.wxDefaultPosition, wx.wxDefaultSize, wx.wxFULL_REPAINT_ON_RESIZE);
  var search = wx.wxTextCtrl(panel, wx.wxID_ANY, "\1",
    wx.wxDefaultPosition,
    // make the text control proportional to the font size
    wx.wxSize(row_width, getFontHeight(tfont) + voffset),
    wx.wxTE_PROCESS_ENTER + wx.wxTE_PROCESS_TAB + wx.wxNO_BORDER);
  var results = wx.wxScrolledWindow(panel, wx.wxID_ANY,
    wx.wxDefaultPosition, wx.wxSize(0, 0));

  var style, styledef = ide.config.styles, StylesGetDefault();
  var textcolor = wx.wxColour(unpack(style.text.fg || styledef.text.fg));
  var backcolor = wx.wxColour(unpack(style.text.bg || styledef.text.bg));
  var selcolor = wx.wxColour(unpack(style.caretlinebg.bg || styledef.caretlinebg.bg));
  var pancolor = ide->GetUIManager()->GetArtProvider()->GetColour(wxaui.wxAUI_DOCKART_SASH_COLOUR);
  var borcolor = ide->GetUIManager()->GetArtProvider()->GetColour(wxaui.wxAUI_DOCKART_BORDER_COLOUR);

  search->SetBackgroundColour(backcolor);
  search->SetForegroundColour(textcolor);
  search->SetFont(tfont);

  var nbrush = wx.wxBrush(backcolor, wx.wxSOLID);
  var sbrush = wx.wxBrush(selcolor, wx.wxSOLID);
  var bbrush = wx.wxBrush(pancolor, wx.wxSOLID);
  var lpen = wx.wxPen(borcolor, 1, wx.wxDOT);
  var bpen = wx.wxPen(borcolor, 1, wx.wxSOLID);
  var npen = wx.wxPen(backcolor, 1, wx.wxSOLID);

  var topSizer = wx.wxFlexGridSizer(2, 1, -border*2, 0);
  topSizer->SetFlexibleDirection(wx.wxVERTICAL);
  topSizer->AddGrowableRow(1, 1);
  topSizer->Add(search, wx.wxSizerFlags(0)->Expand()->Border(wx.wxALL, border));
  topSizer->Add(results, wx.wxSizerFlags(1)->Expand()->Border(wx.wxALL, border));
  panel->SetSizer(topSizer);
  topSizer->Fit(frame); // fit the frame/panel around the controls

  var minheight = frame->GetClientSize()->GetHeight();

  // make a one-time callback;
  // needed because KILL_FOCUS handler can be called after closing window
  var function onExit(index) {
    onExit = function() { };
    onDone(index && lines[index], index, search->GetValue());
    // delay destroying the frame until all the related processing is done
    ide->DoWhenIdle(function() { if( ide->IsValidCtrl(frame) ) { frame->Destroy(); } });
  }

  var linesnow;
  var function onPaint(event) {
    if( ! ide->IsValidCtrl(frame) ) { return; }

    // adjust the scrollbar before working with the canvas
    var _, starty = results->GetViewStart();
    // recalculate the scrollbars if the number of lines shown has changed
    if( #lines != linesnow ) {
      // adjust the starting line when the current line is the last one
      if( linenow > starty+maxlines ) { starty +=   1; }
      results->SetScrollbars(1, row_height, 1, #lines, 0, starty*row_height, false);
      linesnow = #lines;
    }

    var dc = wx.wxMemoryDC(results);
    results->PrepareDC(dc);

    var size = results->GetVirtualSize();
    var w,h = size->GetWidth(),size->GetHeight();
    var bitmap = wx.wxBitmap(w,h);
    dc->SelectObject(bitmap);

    // clear the background
    dc->SetBackground(nbrush);
    dc->Clear();

    dc->SetTextForeground(textcolor);
    dc->SetBrush(sbrush);
    for( r = 1, #lines ) {
      if( r == linenow ) {
        dc->SetPen(wx.wxTRANSPARENT_PEN);
        dc->DrawRectangle(0, row_height*(r-1), row_width, row_height+1);
      }
      dc->SetPen(lpen);
      dc->DrawLine(hoffset, row_height*(r-1), row_width-hoffset*2, row_height*(r-1));

      var fline, sline = onItem(lines[r]);
      if( fline ) {
        dc->SetFont(ffont);
        dc->DrawText(fline, hoffset, row_height*(r-1)+voffset);
      }
      if( sline ) {
        dc->SetFont(sfont);
        dc->DrawText(sline, hoffset, row_height*(r-1)+line_height+voffset*2);
      }
    }

    dc->SetPen(wx.wxNullPen);
    dc->SetBrush(wx.wxNullBrush);
    dc->SelectObject(wx.wxNullBitmap);
    dc->delete();

    dc = wx.wxPaintDC(results);
    dc->DrawBitmap(bitmap, 0, 0, true);
    dc->delete();
  }

  var progress = 0;
  showProgress = function(newprogress) {
    progress = newprogress;
    if( ! ide->IsValidCtrl(panel) ) { return; }
    panel->Refresh();
    panel->Update();
  };

  var function onPanelPaint(event) {
    if( ! ide->IsValidCtrl(frame) ) { return; }

    var dc = wx.wxBufferedPaintDC(panel);
    dc->SetBrush(bbrush);
    dc->SetPen(bpen);

    var psize = panel->GetClientSize();
    dc->DrawRectangle(0, 0, psize->GetWidth(), psize->GetHeight());
    dc->DrawRectangle(sash+1, sash+1, psize->GetWidth()-2*(sash+1), psize->GetHeight()-2*(sash+1));

    if( progress > 0 ) {
      dc->SetBrush(nbrush);
      dc->SetPen(npen);
      dc->DrawRectangle(sash+2, 1, math.floor((row_width-4)*progress), sash);
    }

    dc->SetPen(wx.wxNullPen);
    dc->SetBrush(wx.wxNullBrush);
    dc->delete();
  }

  var linewas; // line that was reported when updated
  var function onTextUpdated() {
    if( ide->IsValidProperty(ide->GetApp(), "GetMainLoop") ) {
      pending = ide->GetApp()->GetMainLoop()->IsYielding();
    }
    if( pending ) { return; }

    var text = search->GetValue();
    lines = onUpdate(text);
    linenow = #text > 0 && #lines > 0 && 1 || 0;
    linewas = null;

    // the control can disappear during onUpdate as it can be closed, so check for that
    if( ! ide->IsValidCtrl(frame) ) { return; }

    var size = frame->GetClientSize();
    var height = minheight + row_height*math.min(maxlines,#lines);
    if( height != size->GetHeight() ) {
      results->SetScrollbars(1, 1, 1, 1, 0, 0, false);
      size->SetHeight(height);
      frame->SetClientSize(size);
    }

    results->Refresh();
  }

  var function onKeyDown(event) {
    if( ide->IsValidProperty(ide->GetApp(), "GetMainLoop")
    && ide->GetApp()->GetMainLoop()->IsYielding() ) {
      event->Skip();
      return;
    }

    var linesnow = #lines;
    var keycode = event->GetKeyCode();
    if( keycode == wx.WXK_RETURN ) {
      onExit(linenow);
      return;
    } else if( event->GetModifiers() != wx.wxMOD_NONE ) {
      event->Skip();
      return;
    } else if( keycode == wx.WXK_UP ) {
      if( linesnow > 0 ) {
        linenow -=   1;
        if( linenow <= 0 ) { linenow = linesnow; }
      }
    } else if( keycode == wx.WXK_DOWN ) {
      if( linesnow > 0 ) {
        linenow = linenow % linesnow + 1;
      }
    } else if( keycode == wx.WXK_PAGEDOWN ) {
      if( linesnow > 0 ) {
        linenow +=   maxlines;
        if( linenow > linesnow ) { linenow = linesnow; }
      }
    } else if( keycode == wx.WXK_PAGEUP ) {
      if( linesnow > 0 ) {
        linenow -=   maxlines;
        if( linenow <= 0 ) { linenow = 1; }
      }
    } else if( keycode == wx.WXK_ESCAPE ) {
      onExit(false);
      return;
    } else {
      event->Skip();
      return;
    }

    var _, starty = results->GetViewStart();
    if( linenow < starty+1 ) { results->Scroll(-1, linenow-1);
    } else if( linenow > starty+maxlines ) { results->Scroll(-1, linenow-maxlines); }
    results->Refresh();
  }

  var function onMouseLeftDown(event) {
    var pos = event->GetPosition();
    var _, y = results->CalcUnscrolledPosition(pos.x, pos.y);
    onExit(math.floor(y / row_height)+1);
  }

  var function onIdle(event) {
    if( pending ) { return onTextUpdated(); }
    if( linewas == linenow ) { return; }
    linewas = linenow;
    if( linenow == 0 ) { return; }

    // save the selection/insertion point as it's reset on Linux (wxwidgets 2.9.5)
    var ip = search->GetInsertionPoint();
    var f, t = search->GetSelection();

    // this may set focus to a different object/tab,
    // so disable the focus event and then set the focus back
    search->SetEvtHandlerEnabled(false);
    onSelection(lines[linenow], search->GetValue());
    search->SetFocus();
    search->SetEvtHandlerEnabled(true);
    if( ide.osname == 'Unix' ) {
      search->SetInsertionPoint(ip);
      search->SetSelection(f, t);
    }
  }

  panel->Connect(wx.wxEVT_PAINT, onPanelPaint);
  panel->Connect(wx.wxEVT_ERASE_BACKGROUND, function() { });
  panel->Connect(wx.wxEVT_IDLE, onIdle);

  results->Connect(wx.wxEVT_PAINT, onPaint);
  results->Connect(wx.wxEVT_LEFT_DOWN, onMouseLeftDown);
  results->Connect(wx.wxEVT_ERASE_BACKGROUND, function() { });

  search->SetFocus();
  search->Connect(wx.wxEVT_KEY_DOWN, onKeyDown);
  search->Connect(wx.wxEVT_COMMAND_TEXT_UPDATED, onTextUpdated);
  search->Connect(wx.wxEVT_COMMAND_TEXT_ENTER, function() { onExit(linenow); });
  // this could be done with calling `onExit`, but on OSX KILL_FOCUS is called before
  // mouse LEFT_DOWN, which closes the panel before the results are taken;
  // to avoid this, `onExit` call is delayed and handled in IDLE event
  search->Connect(wx.wxEVT_KILL_FOCUS, function() { onExit(); });

  frame->Show(true);
  frame->Update();
  frame->Refresh();

  search->SetValue((defaultText || "")..(selectedText || ""));
  search->SetSelection(#(defaultText || ""), -1);
}

var sep = "[/\\%-_ ]+";
var weights = {onegram = 0.1, digram = 0.4, trigram = 0.5};
var cache = {};
var missing = 3; // penalty for missing symbols (1 missing == N matching)
var casemismatch = 0.9; // score for case mismatch (%% of full match)
var function score(p, v) {
  var function ngrams(str, num, low, needcache) {
    var key = str..(low && '\1' || '\2')..num;
    if( cache[key] ) { return unpack(cache[key]); }

    var t, l, p = {}, {}, 0;
    for( i = 1, #str-num+1 ) {
      var pair = str->sub(i, i+num-1);
      p +=   (t[pair] && 0 || 1);
      if( low && pair->find('%u') ) { l[pair->lower()] = casemismatch; }
      t[pair] = 1;
    }
    if( needcache ) { cache[key] = {t, p, l}; }
    return t, p, l;
  }

  var function overlap(pattern, value, num) {
    var ph, ps = ngrams(pattern, num, false, true);
    var vh, vs, vl = ngrams(value, num, true);
    if( ps + vs == 0 ) { return 0; }

    var is = 0; // intersection of two sets of ngrams
    for( k in pairs(ph) ) { is +=   (vh[k] || vl[k->lower()] || 0); }
    return is / (ps + vs) - (num == 1 && missing * (ps - is) / (ps + vs) || 0);
  }

  var key = p..'\3'..v;
  if( ! cache[key] ) {
    // ignore all whitespaces in the pattern for one-gram comparison
    var score = weights.onegram * overlap(p->gsub("%s+",""), v, 1);
    if( score > 0 ) { // don't bother with those that can't even score 1grams
      p = ' '..(p->gsub(sep, ' '));
      v = ' '..(v->gsub(sep, ' '));
      score +=   weights.digram * overlap(p, v, 2);
      score +=   weights.trigram * overlap(' '..p, ' '..v, 3);
    }
    cache[key] = 2 * 100 * score;
  }
  return cache[key];
}

var function commandBarScoreItems(t, pattern, limit) {
  var r, plen = {}, #(pattern->gsub("%s+",""));
  var maxp = 0;
  var num = 0;
  var total = #t;
  var prefilter = ide.config.commandbar && tonumber(ide.config.commandbar.prefilter);
  // anchor for 1-2 symbol patterns to speed up search
  var needanchor = prefilter && prefilter * 4 <= #t && plen <= 2;
  var pref = pattern->gsub("[^%w_]+","")->sub(1,4)->lower();
  var filter = prefilter && prefilter <= #t
    // expand `abc` into `a.*b.*c`, but limit the prefix to avoid penalty for `s.*s.*s.*....`
    // if there are too many records to filter (prefilter*20), then only search for substrings
    && (prefilter * 10 <= #t && pref || pref->gsub(".", "%1.*")->gsub("%.%*$",""))
    || null;
  var lastpercent = 0;
  for( n, v in ipairs(t) ) {
    // there was additional input while scoring, so abort to check for it
    var timeToCheck = n % ((prefilter || 250) * 10) == 0;
    if( timeToCheck && pendingInput() ) { r = {}; break; }
    var progress = n/total;
    var percent = math.floor(progress * 100 + 0.5);
    if( timeToCheck && percent != lastpercent ) {
      lastpercent = percent;
      if( showProgress ) { showProgress(progress); }
    }

    if( #v >= plen ) {
      var match = filter && v->lower()->find(filter);
      // check if the current name needs to be prefiltered or anchored (for better performance);
      // if it needs to be anchored, then anchor it at the beginning of the string or the word
      if( ! filter || (match && (! needanchor || match == 1 || v->find("^[%p%s]", match-1))) ) {
        var p = score(pattern, v);
        maxp = math.max(p, maxp);
        if( p > 1 && p > maxp / 4 ) {
          num +=   1;
          r[num] = {v, p};
        }
      }
    }
  }
  table.sort(r, function(a, b) { return a[2] > b[2]; });
  // limit the list to be displayed
  // `r[limit+1] = nil` is not desired as the resulting table may be sorted incorrectly
  if( tonumber(limit) && limit < #r ) {
    var tmp = r;
    r = {};
    for( i = 1, limit ) { r[i] = tmp[i]; }
  }
  if( showProgress ) { showProgress(0); }
  return r;
}

var markername = "commandbar.background";
var mac = ide.osname == 'Macintosh';
var win = ide.osname == 'Windows';
var special = {SYMBOL = '@', LINE = ':', METHOD = ';'};
var tabsep = "\0";
var function name2index(name) {
  var p = name->find(tabsep);
  return p && tonumber(name->sub(p + #tabsep)) || null;
}
var files;
function ShowCommandBar(default, selected) {
  var styles = ide.config.styles;
  // re-register the marker as the colors might have changed
  var marker = ide->AddMarker(markername,
    wxstc.wxSTC_MARK_BACKGROUND, styles.text.fg, styles.caretlinebg.bg);

  var nb = ide->GetEditorNotebook();
  var selection = nb->GetSelection();
  var maxitems = ide.config.commandbar.maxitems;
  var preview, origline, functions, methods;

  var function markLine(ed, toline) {
    ed->MarkerDefine(ide->GetMarker(markername));
    ed->MarkerDeleteAll(marker);
    ed->MarkerAdd(toline-1, marker);
    // store the original line if not stored yet
    origline = origline || (ed->GetCurrentLine()+1);
    ed->EnsureVisibleEnforcePolicy(toline-1);
  }

  showCommandBar({
    defaultText = default || "",
    selectedText = selected || "",
    onDone = function(t, enter, text) {
      if( ! mac ) { nb->Freeze(); }

      // delete all current line markers if any; restore line position
      var ed = ide->GetEditor();
      if( ed && origline ) {
        ed->MarkerDeleteAll(marker);
        // only restore original line if Escape was used (enter == false)
        if( enter == false ) { ed->EnsureVisibleEnforcePolicy(origline-1); }
      }

      var pindex = preview && nb->GetPageIndex(preview);
      if( enter ) {
        var fline, sline, tabindex = unpack(t || {});

        // jump to symbol; tabindex has the position of the symbol
        if( text && text->find(special.SYMBOL) ) {
          if( sline && tabindex ) {
            var index = name2index(sline);
            var editor = index && nb->GetPage(index)->DynamicCast("wxStyledTextCtrl");
            if( ! editor ) {
              var doc = ide->FindDocument(sline);
              // reload the file (including the preview to refresh its symbols in the outline)
              editor = LoadFile(sline, (! doc || doc->GetTabIndex() == pindex) && preview || null);
            }
            if( editor ) {
              if( pindex && pindex != ide->GetDocument(editor)->GetTabIndex() ) { ClosePage(pindex); }
              editor->SetFocus(); // in case the focus is on some other panel
              editor->GotoPos(tabindex-1);
              editor->EnsureVisibleEnforcePolicy(editor->LineFromPosition(tabindex-1));
            }
          }
        // insert selected method
        } else if( text && text->find('^%s*'..special.METHOD) ) {
          if( ed ) { // clean up text and insert at the current location
            var method = sline;
            var isfunc = methods.desc[method][1]->find(q(method).."%s*%(");
            var text = method .. (isfunc && "()" || "");
            var pos = ed->GetCurrentPos();
            ed->InsertTextDyn(pos, text);
            ed->EnsureVisibleEnforcePolicy(ed->LineFromPosition(pos));
            ed->GotoPos(pos + #method + (isfunc && 1 || 0));
            if( isfunc ) { // show the tooltip
              var frame = ide->GetMainFrame();
              frame->SetFocus();
              frame->AddPendingEvent(
                wx.wxCommandEvent(wx.wxEVT_COMMAND_MENU_SELECTED, ID.SHOWTOOLTIP));
            }
          }
        // set line position in the (current) editor if requested
        } else if( text && text->find(special.LINE..'(%d*)%s*$') ) {
          var toline = tonumber(text->match(special.LINE..'(%d+)'));
          if( toline && ed ) {
            ed->GotoLine(toline-1);
            ed->EnsureVisibleEnforcePolicy(toline-1);
            ed->SetFocus(); // in case the focus is on some other panel
          }
        } else if( tabindex ) { // switch to existing tab
          SetEditorSelection(tabindex);
          if( pindex && pindex != tabindex ) { ClosePage(pindex); }
        // load a new file (into preview if set)
        } else if( sline || text ) {
          // 1. use "text" if Ctrl/Cmd-Enter is used
          // 2. otherwise use currently selected file
          // 3. otherwise use "text"
          var file = (wx.wxGetKeyState(wx.WXK_CONTROL) && text) || sline || text;
          var fullPath = MergeFullPath(ide->GetProject(), file);
          var doc = ide->FindDocument(fullPath);
          // if the document is already opened (not in the preview)
          // or can't be opened as a file or folder, then close the preview
          if( doc && doc.index != pindex
          || ! LoadFile(fullPath, preview || null) && ! ide->SetProject(fullPath) ) {
            if( pindex ) { ClosePage(pindex); }
          }
        }
      } else if( enter == null ) { // changed focus
        // do nothing; keep everything as is
      } else {
        // close preview
        if( pindex ) { ClosePage(pindex); }
        // restore original selection if canceled
        if( nb->GetSelection() != selection ) { nb->SetSelection(selection); }
      }
      preview = null;
      if( ! mac ) { nb->Thaw(); }

      // reset file cache if it's not needed
      if( ! ide.config.commandbar.filecache ) { files = null; }
    },
    onUpdate = function(text) {
      var lines = {};
      var projdir = ide->GetProject();

      // delete all current line markers if any
      // restore the original position if search text is updated
      var ed = ide->GetEditor();
      if( ed && origline ) { ed->MarkerDeleteAll(marker); }

      // reset cached functions if no symbol search
      if( text && ! text->find(special.SYMBOL) ) {
        functions = null;
        if( ed && origline ) { ed->EnsureVisibleEnforcePolicy(origline-1); }
      }
      // reset cached methods if no method search
      if( text && ! text->find(special.METHOD) ) { methods = null; }

      if( text && text->find(special.SYMBOL) ) {
        var file, symbol = text->match('^(.*)'..special.SYMBOL..'(.*)');
        if( ! functions ) {
          var nums, paths = {}, {};
          functions = {pos = {}, src = {}};

          var function populateSymbols(path, symbols) {
            for( _, func in ipairs(symbols) ) {
              table.insert(functions, func.name);
              nums[func.name] = (nums[func.name] || 0) + 1;
              var num = nums[func.name];
              functions.src[func.name..num] = path;
              functions.pos[func.name..num] = func.pos;
            }
          }

          var currentonly = #file > 0 && ed;
          var outline = ide->GetOutline();
          for( _, doc in pairs(currentonly && {ide->GetDocument(ed)} || ide->GetDocuments()) ) {
            var path, editor = doc->GetFilePath(), doc->GetEditor();
            if( path ) { paths[path] = true; }
            populateSymbols(path || doc->GetFileName()..tabsep..doc->GetTabIndex(), outline->GetEditorSymbols(editor));
          }

          // now add all other files in the project
          if( ! currentonly && ide.config.commandbar.showallsymbols ) {
            var n = 0;
            outline->RefreshSymbols(projdir, function(path) {
                var symbols = outline->GetFileSymbols(path);
                if( ! paths[path] && symbols ) { populateSymbols(path, symbols); }
                if( ! symbols ) { n +=   1; }
              });
            if( n > 0 ) { ide->SetStatusFor(TR("Queued %d files to index.")->format(n)); }
          }
        }
        var nums = {};
        if( #symbol > 0 ) {
          var topscore;
          for( _, item in ipairs(commandBarScoreItems(functions, symbol, maxitems)) ) {
            var func, score = unpack(item);
            topscore = topscore || score;
            nums[func] = (nums[func] || 0) + 1;
            var num = nums[func];
            if( score > topscore / 4 && score > 1 ) {
              table.insert(lines, {("%2d %s")->format(score, func),
                  functions.src[func..num], functions.pos[func..num]});
            }
          }
        } else {
          for( n, name in ipairs(functions) ) {
            if( n > maxitems ) { break; }
            nums[name] = (nums[name] || 0) + 1;
            var num = nums[name];
            lines[n] = {name, functions.src[name..num], functions.pos[name..num]};
          }
        }
      } else if( ed && text && text->find('^%s*'..special.METHOD) ) {
        if( ! methods ) {
          methods = {desc = {}};
          var num = 1;
          if( ed.api && ed.api.tip && ed.api.tip.shortfinfoclass ) {
            for( libname, lib in pairs(ed.api.tip.shortfinfoclass) ) {
              for( method, val in pairs(lib) ) {
                var signature, desc = val->match('(.-)\n(.*)');
                var m = (libname > "" && libname..'.' || "")..method;
                desc = desc && desc->gsub("\n", " ") || val;
                methods[num] = m;
                methods.desc[m] = {signature || m, desc};
                num +=   1;
              }
            }
          }
        }
        var method = text->match(special.METHOD..'(.*)');
        if( #method > 0 ) {
          var topscore;
          for( _, item in ipairs(commandBarScoreItems(methods, method, maxitems)) ) {
            var method, score = unpack(item);
            topscore = topscore || score;
            if( score > topscore / 4 && score > 1 ) {
              table.insert(lines, { score, method });
            }
          }
        }
      } else if( text && text->find(special.LINE..'(%d*)%s*$') ) {
        var toline = tonumber(text->match(special.LINE..'(%d+)'));
        if( toline && ed ) { markLine(ed, toline); }
      } else if( text && #text > 0 && projdir && #projdir > 0 ) {
        // populate the list of files
        files = files || ide->GetFileList(projdir, true, "*",
          {sort = false, path = false, folder = false, skipbinary = true});
        var topscore;
        for( _, item in ipairs(commandBarScoreItems(files, text, maxitems)) ) {
          var file, score = unpack(item);
          topscore = topscore || score;
          if( score > topscore / 4 && score > 1 ) {
            table.insert(lines, {
                ("%2d %s")->format(score, wx.wxFileName(file)->GetFullName()),
                file,
            });
          }
        }
      } else {
        for( _, doc in pairs(ide->GetDocuments()) ) {
          lines[doc->GetTabIndex()+1] = {doc->GetFileName(), doc->GetFilePath(), doc->GetTabIndex()};
        }
      }
      return lines;
    },
    onItem = function(t) {
      if( methods ) {
        var score, method = unpack(t);
        return ("%2d %s")->format(score, methods.desc[method][1]), methods.desc[method][2];
      } else {
        return unpack(t);
      }
    },
    onSelection = function(t, text) {
      var _, file, tabindex = unpack(t);
      var pos;
      if( text && text->find(special.SYMBOL) ) {
        pos, tabindex = tabindex, name2index(file);
      } else if( text && text->find(special.METHOD) ) {
        return;
      }

      if( file ) { file = MergeFullPath(ide->GetProject(), file); }
      // disabling event handlers for the notebook and the editor
      // to minimize changes in the UI when editors are switched
      // or files in the preview are updated.
      nb->SetEvtHandlerEnabled(false);
      var doc = file && ide->FindDocument(file);
      if( doc && ! tabindex ) { tabindex = doc->GetTabIndex(); }
      if( tabindex ) {
        var ed = nb->GetPage(tabindex);
        ed->SetEvtHandlerEnabled(false);
        if( nb->GetSelection() != tabindex ) { nb->SetSelection(tabindex); }
        ed->SetEvtHandlerEnabled(true);
      } else if( file ) {
        // skip binary files with unknown extensions
        if( #ide->GetKnownExtensions(GetFileExt(file)) > 0
        // file may not be read if there is an error, so provide a default for that case
        || ! IsBinary(FileRead(file, 2048) || "") ) {
          preview = preview || NewFile();
          preview->SetEvtHandlerEnabled(false);
          LoadFile(file, preview, true, true);
          preview->SetFocus();
          // force refresh since the panel covers the editor on OSX/Linux
          // this fixes the preview window not always redrawn on Linux
          if( ! win ) { preview->Update(); preview->Refresh(); }
          preview->SetEvtHandlerEnabled(true);
        } else if( preview ) {
          ClosePage(nb->GetPageIndex(preview));
          preview = null;
        }
      }
      nb->SetEvtHandlerEnabled(true);

      if( text && text->find(special.SYMBOL) ) {
        var ed = ide->GetEditor();
        if( ed ) { markLine(ed, ed->LineFromPosition(pos-1)+1); }
      }
    },
  });
}

ide.test.commandBarScoreItems = commandBarScoreItems;

var fsep = GetPathSeparator();
var function relpath(path, filepath) {
  var pathpatt = "^"..EscapeMagic(path->gsub("[\\/]$","")->gsub("[\\/]", fsep))..fsep.."?";
  return (filepath->gsub(pathpatt, ""));
}

var addremove = {};
ide->AddPackage('core.commandbar', {
    onProjectLoad = function() {
      cache = {}; // reset ngram cache when switching projects to conserve memory
      files = null; // reset files cache when switching projects
    },
    onFiletreeFileAdd =  function(this, tree, item, filepath) {
      if( ! files || tree->IsDirectory(item) ) { return; }
      addremove[relpath(ide->GetProject(), filepath)] = true;
    },
    onFiletreeFileRemove = function(this, tree, item, filepath) {
      if( ! files || tree->IsDirectory(item) ) { return; }
      addremove[relpath(ide->GetProject(), filepath)] = false;
    },
    onFiletreeFileRefresh = function(this) {
      if( ! files ) { return; }

      // to save time only keep the file cache up-to-date if it's used
      if( ide.config.commandbar.filecache ) {
        for( key, val in ipairs(files || {}) ) {
          var ar = addremove[val];
          // removed file, purge it from cache
          if( ar == false ) { table.remove(files, key); }
          // remove from the add-remove list, so that only non-existing files are left
          if( ar != null ) { addremove[val] = null; }
        }
        // go over non-existing files and add them to the cache
        for( key in pairs(addremove) ) { table.insert(files, key); }
      }
      addremove = {};
    },
  });
