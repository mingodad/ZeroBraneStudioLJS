// Copyright 2011-16 Paul Kulchenko, ZeroBrane LLC
// styles for comment markup
//-------------------------------------------------------

var ide = ide;
var MD_MARK_ITAL = '_'; // italic
var MD_MARK_BOLD = '**'; // bold
var MD_MARK_LINK = '['; // link description start
var MD_MARK_LINZ = ']'; // link description end
var MD_MARK_LINA = '('; // link URL start
var MD_MARK_LINT = ')'; // link URL end
var MD_MARK_HEAD = '#'; // header
var MD_MARK_CODE = '`'; // code
var MD_MARK_BOXD = '|'; // highlight
var MD_MARK_MARK = ' '; // separator
var MD_LINK_NEWWINDOW = '+'; // indicator to open a new window for links
// old versions of Scintilla had only 5-bit styles, so assign styles manually in those cases
var markup = {
  [MD_MARK_BOXD] = {st=ide->AddStyle("markup.boxd", ide.STYLEMASK == 31 && 25 || null), fg={127,0,127}, b=true},
  [MD_MARK_CODE] = {st=ide->AddStyle("markup.code", ide.STYLEMASK == 31 && 26 || null), fg={127,127,127}, fs=10},
  [MD_MARK_HEAD] = {st=ide->AddStyle("markup.head", ide.STYLEMASK == 31 && 27 || null), fn="Lucida Console", b=true},
  [MD_MARK_LINK] = {st=ide->AddStyle("markup.link", ide.STYLEMASK == 31 && 28 || null), u=true, hs={32,32,127}},
  [MD_MARK_BOLD] = {st=ide->AddStyle("markup.bold", ide.STYLEMASK == 31 && 29 || null), b=true},
  [MD_MARK_ITAL] = {st=ide->AddStyle("markup.ital", ide.STYLEMASK == 31 && 30 || null), i=true},
  [MD_MARK_MARK] = {st=ide->AddStyle("markup.mark", ide.STYLEMASK == 31 && 31 || null), v=false},
};

// allow other editor features to recognize this special markup
function MarkupIsSpecial(style) { return style == markup[MD_MARK_MARK].st; }
function MarkupIsAny(style) {
  for( _, mark in pairs(markup) ) {
    if( style == mark.st ) { return true; }
  }
  return false;
}
function MarkupAddStyles(styles) {
  var comment = styles.comment || {};
  for( key,value in pairs(markup) ) {
    var style = styles[key] || {};
    // copy all style features by value
    for( feature in pairs(value) ) {
      style[feature] = style[feature] || value[feature];
    }
    style.fg = style.fg || comment.fg;
    style.bg = style.bg || comment.bg;
    styles[key] = style;
  }
}

var q = EscapeMagic;

var MD_MARK_PTRN = '';  // combination of all markup marks that can start styling
for( key in pairs(markup) ) {
  if( key != MD_MARK_MARK ) { MD_MARK_PTRN = MD_MARK_PTRN .. q(key); }
}
MarkupAddStyles(ide.config.styles);

function MarkupHotspotClick(pos, editor) {
  // check if this is "our" hotspot event
  if( bit.band(editor->GetStyleAt(pos),ide.STYLEMASK) != markup[MD_MARK_LINK].st ) {
    // not "our" style, so nothing to do for us here
    return;
  }
  var line = editor->LineFromPosition(pos);
  var tx = editor->GetLineDyn(line);
  pos +=   #MD_MARK_LINK - editor->PositionFromLine(line); // turn into relative position

  // extract the URL/command on the right side of the separator
  var _,_,text = string.find(tx, q(MD_MARK_LINZ).."(%b"..MD_MARK_LINA..MD_MARK_LINT..")", pos);
  if( text ) {
    text = text->gsub("^"..q(MD_MARK_LINA), "")->gsub(q(MD_MARK_LINT).."$", "");
    var doc = ide->GetDocument(editor);
    var filepath = doc && doc.filePath || ide->GetProject();
    var _,_,http = string.find(text, [=[^(https?:%S+)$]=]);
    var _,_,command,code = string.find(text, [=[^macro:(%w+)%((.*%S)%)$]=]);
    if( ! command ) { _,_,command = string.find(text, [=[^macro:(%w+)$]=]); }

    if( command == 'shell' ) {
      ShellExecuteCode(code);
    } else if( command == 'inline' ) {
      ShellExecuteInline(code);
    } else if( command == 'run' ) { // run the current file
      ProjectRun();
    } else if( command == 'debug' ) { // debug the current file
      ProjectDebug();
    } else if( http ) { // open the URL in a new browser window
      wx.wxLaunchDefaultBrowser(http, 0);
    } else if( filepath ) { // only check for saved files
      // check if requested to open in a new window
      var newwindow = ! doc || string.find(text, MD_LINK_NEWWINDOW, 1, true);
      if( newwindow ) { text = string.gsub(text, "^%" .. MD_LINK_NEWWINDOW, ""); }
      var filename = GetFullPathIfExists(
        wx.wxFileName(filepath)->GetPath(wx.wxPATH_GET_VOLUME), text);
      if( filename &&
        (newwindow || SaveModifiedDialog(editor, true) != wx.wxID_CANCEL) ) {
        if( ! newwindow && ide.osname == 'Macintosh' ) { editor->GotoPos(0); }
        LoadFile(filename,! newwindow && editor || null,true);
      }
    }
  }
  return true;
}

var function ismarkup (tx) {
  var start = 1;
  var marksep = "[%s!%?%.,;:%(%)]";
  while( true ) {
    // find a separator first
    var st,_,sep,more = string.find(tx, "(["..MD_MARK_PTRN.."])(.)", start);
    if( ! st ) { return; }

    // check if this is a first character of a multi-character separator
    if( ! markup[sep] ) { sep = sep .. (more || ''); }

    var s,e,cap;
    var qsep = q(sep);
    var nonspace = "[^%s]";
    if( sep == MD_MARK_HEAD ) {
      // always search from the start of the line
      // [%w%p] set is needed to avoid continuing this markup to the next line
      s,e,cap = string.find(tx,"^("..q(MD_MARK_HEAD)..".+[%w%p])");
    } else if( sep == MD_MARK_LINK ) {
      // allow everything based on balanced link separators
      s,e,cap = string.find(tx,
        "^(%b"..MD_MARK_LINK..MD_MARK_LINZ
        .."%b"..MD_MARK_LINA..MD_MARK_LINT..")", st);
      // if either part of the link is empty `[]` or `()`, skip the match
      if( cap && cap->find("^"..q(MD_MARK_LINK..MD_MARK_LINZ))
      || cap && cap->find(q(MD_MARK_LINA..MD_MARK_LINT).."$") ) { s = null; }
    } else if( markup[sep] ) {
      // try a single character first, then 2+ characters between separators;
      // this is to handle "`5` `6`" as two sequences, not one.
      s,e,cap = string.find(tx,"^("..qsep..nonspace..qsep..")".."%f"..marksep, st);
      if( ! s ) { s,e,cap = string.find(tx,"^("..qsep..nonspace..".-"..nonspace..qsep..")".."%f"..marksep, st); }
    }
    if( s && // selected markup is surrounded by spaces or punctuation marks
      (s == 1   || tx->sub(s-1, s-1)->match(marksep)) &&
      (e == #tx || tx->sub(e+1, e+1)->match(marksep))
      ) { return s,e,cap,sep; }
    start = st+1;
  }
}

function MarkupStyle(editor, lines, linee) {
  lines = lines || 0;
  if( (lines < 0) ) { return; }

  // if the current spec doesn't have any comments, nothing to style
  if( ! next(editor.spec.iscomment) ) { return; }

  // always style to the end as there may be comments that need re-styling
  // technically, this should be GetLineCount()-1, but we want to style
  // beyond the last line to make sure it is styled correctly
  var linec = editor->GetLineCount();
  linee = linee || linec;

  var linecomment = editor.spec.linecomment;
  var iscomment = {};
  for( i,v in pairs(editor.spec.iscomment) ) {
    iscomment[i] = v;
  }

  var es = editor->GetEndStyled();
  var needfix = false;

  for( line=lines,linee ) {
    var tx = editor->GetLineDyn(line);
    var ls = editor->PositionFromLine(line);

    var from = 1;
    var off = -1;

    // doing WrapCount(line) when line == linec (which may be beyond
    // the last line) occasionally crashes the application on OSX.
    var wrapped = line < linec && editor->WrapCount(line) || 0;

    while( from ) {
      tx = string.sub(tx,from);
      var f,t,w,mark = ismarkup(tx);

      if( (f) ) {
        var p = ls+f+off;
        var s = bit.band(editor->GetStyleAt(p), ide.STYLEMASK);
        // only style comments and only those that are not at the beginning
        // of the file to avoid styling shebang (#!) lines
        // also ignore matches for line comments (as defined in the spec)
        if( iscomment[s] && p > 0 && mark != linecomment ) {
          var smark = #mark;
          var emark = #mark; // assumes end mark is the same length as start mark
          if( mark == MD_MARK_HEAD ) {
            // grab multiple MD_MARK_HEAD if present
            var _,_,full = string.find(w,"^("..q(MD_MARK_HEAD).."+)");
            smark,emark = #full,0;
          } else if( mark == MD_MARK_LINK ) {
            var lsep = w->find(q(MD_MARK_LINZ)..q(MD_MARK_LINA));
            if( lsep ) { emark = #w-lsep+#MD_MARK_LINT; }
          }
          var sp = bit.band(editor->GetStyleAt(p-1), ide.STYLEMASK); // previous position style
          if( mark == MD_MARK_HEAD && ! iscomment[sp] ) {
            p +=   1;
            smark -=   1;
          }
          editor->StartStyling(p, ide.STYLEMASK);
          editor->SetStyling(smark, markup[MD_MARK_MARK].st);
          editor->SetStyling(t-f+1-smark-emark, markup[mark].st || markup[MD_MARK_MARK].st);
          editor->SetStyling(emark, markup[MD_MARK_MARK].st);
        }

        off +=   t;
      }
      from = t && (t+1);
    }

    // has this line changed its wrapping because of invisible styling?
    if( wrapped > 1 && editor->WrapCount(line) < wrapped ) { needfix = true; }
  }
  editor->StartStyling(es, ide.STYLEMASK);

  // if any wrapped lines have changed, then reset WrapMode to fix the drawing
  if( needfix ) {
    // this fixes an issue with duplicate lines in Scintilla when
    // invisible styles hide some of the content that would be wrapped.
    var wrapmode = editor->GetWrapMode();
    if( wrapmode != wxstc.wxSTC_WRAP_NONE ) {
      // change the wrap mode to force recalculation
      editor->SetWrapMode(wxstc.wxSTC_WRAP_NONE);
      editor->SetWrapMode(wrapmode);
    }
    // if some of the lines have folded, this can make not styled lines visible
    MarkupStyle(editor, linee+1); // style to the end in this case
  }
}
